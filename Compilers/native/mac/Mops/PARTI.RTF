{\rtf1\mac\deff2 {\fonttbl{\f0\fswiss Chicago;}{\f2\froman New York;}{\f3\fswiss Geneva;}{\f4\fmodern Monaco;}{\f6\fdecor London;}{\f11\fnil Cairo;}{\f13\fnil Zapf Dingbats;}{\f14\fnil Bookman;}{\f15\fnil N Helvetica Narrow;}{\f16\fnil Palatino;}{\f18\fnil Zapf Chancery;}{\f20\froman Times;}{\f21\fswiss Helvetica;}{\f22\fmodern Courier;}{\f23\ftech Symbol;}{\f33\fnil Avant Garde;}{\f34\fnil New Century Schlbk;}{\f128\fnil Boston IIx;}{\f192\fnil Mangia;}{\f220\fnil MiniBoston IIx;}{\f221\fnil MicroBoston IIx;}{\f222\fnil Line & Lead;}{\f1024\fnil American Heritage;}{\f1025\fnil ClosedCaption2;}{\f1026\fnil XPGildedCD-IN;}{\f1133\fnil Century Cond;}{\f1148\fnil XPCompacta;}{\f1202\fnil XPOxfordText-Normal;}{\f1238\fnil XPCopperhead;}{\f1269\fnil Futena;}{\f1397\fnil XPCabotOpen;}{\f1639\fnil XPRadial;}{\f1792\fnil Lucida Bright;}{\f2000\fnil Garamond Narrow;}{\f2007\fnil Delphian;}{\f2017\fnil Lubalin Graph;}{\f2024\fnil Machine;}{\f2029\fnil Nadianne;}{\f2036\fnil Old English Text;}{\f2038\fnil Onyx;}{\f2040\fnil Oxford;}{\f2046\fnil Swing;}{\f2052\fnil Zeal;}{\f2091\fnil Cursive-Elegant;}{\f2096\fnil XPKaleph-Bold;}{\f2121\fnil Garamond;}{\f2247\fnil XPGildedCD;}{\f2385\fnil XPJasmine;}{\f2429\fnil XPSchooner;}{\f2435\fnil Fruit;}{\f2490\fnil DeltaSymbol;}{\f2503\fnil Technical;}{\f2515\fnil MT Extra;}{\f2686\fnil Caslon;}{\f2689\fnil Trade Condensed;}{\f2799\fnil XPTechno;}{\f2835\fnil XPFortunaCD;}{\f2999\fnil eWorld Tight;}{\f4950\fnil TTYFont;}{\f7715\fnil XPFortuna-XB;}{\f9840\fnil Espy Sans;}{\f9842\fnil Espy Sans Bold;}{\f10840\fnil Klang MT;}{\f10890\fnil Script MT Bold;}{\f10897\fnil Old English Text MT;}{\f10909\fnil New Berolina MT;}{\f10957\fnil Bodoni MT Ultra Bold;}{\f10967\fnil Arial MT Condensed Light;}{\f14811\fnil Helvetica Compressed;}{\f14974\fnil Helvetica Black;}{\f15011\fnil Gill Sans Condensed Bold;}{\f32525\fnil VT100;}}{\colortbl\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;}{\stylesheet{\s231\li1440\ri720\tldot\tx8280\tqr\tx8640 \f20 \sbasedon0\snext0 toc 3;}{\s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 \sbasedon233\snext0 toc 2;}{\s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 \sbasedon0\snext0 toc 1;}{\s242 \f20 \sbasedon0\snext0 page number;}{\s243\tx720\tqc\tx4320\tqr\tx8640 \f20 \sbasedon244\snext243 footer;}{\s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \sbasedon0\snext244 header;}{\s251\qc\sb80 \b\f20\fs20 \sbasedon0\snext0 heading 5;}{\s252\li720\sb240\keepn \b\f21 \sbasedon253\snext0 heading 4;}{\s253\li720\sb240\keepn \b\f21 \sbasedon254\snext0 heading 3;}{\s254\sb240\keepn \b\f21 \sbasedon255\snext0 heading 2;}{\s255\qr\sb240\sa720\keepn \b\f21\fs36 \sbasedon0\snext0 heading 1;}{\f20 \sbasedon222\snext0 Normal;}{\s2\li720 \b\f22\fs20 \sbasedon0\snext2 examples;}{\s3\qj\sb160 \f20 \sbasedon0\snext3 paragraph;}{\s4\qj\sb120 \f20 \sbasedon3\snext4 preamble;}{\s5\sb120\keepn \b\f21 \sbasedon253\snext5 subhead (non-toc);}{\s6\li720\tqr\tx4320\tqr\tx5040 \f20 \sbasedon0\snext6 equals;}{\s7\qj\fi-2160\li3240\ri720\tx800\tx1440\tx2160\tx2520\tx2880\tx4050\tx9599 \f20 \sbasedon0\snext7 list;}{\s8\li720 \f22\fs20 \sbasedon2\snext8 examplenb;}{\s9\qj\li180\tx800\tx1080\tx1440\tx2160\tx2520\tx2880\tx4050\tx7200\tx9599 \f20 \sbasedon0\snext10 def;}{\s10\qj\li450\tx800\tx1080\tx1440\tx2160\tx2520\tx2880\tx4050\tx7200\tx9599 \f20 \sbasedon0\snext9 exp;}{\s13 \f22\fs20 \sbasedon8\snext13 program;}{\s15\qc\sb720 \f20 \sbasedon0\snext15 end of lesson;}{\s16\qc\sb160\keepn \f20 \sbasedon3\snext16 figure graphic;}{\s17\fi-3600\li3600\sb120\tx1080 \f20 \sbasedon0\snext17 definition;}}{\info{\title Part I-tutorial}{\subject Mops Manual}{\*\verscomm Converted by John Robinson}}\margl1080\margr1080\margb1080\facingp\gutter720\widowctrl\ftnbj\pgnstart9\fracwidth \sectd \sbkodd\pgnrestart\pgnlcrm\linemod0\linex0\cols1\endnhere\titlepg {\headerr \pard\plain \li200 \f20 {\f21 Mops Tutorial\par \par }}{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\footerf \pard\plain \f20 \par }\pard\plain \qc \f20 {\b\fs96 Mops\par }\pard \qc {\b\i\fs28 Mike's Object-oriented Programming System\par }\pard \qc {\b\fs48 \par Version 2.6\par }\pard \qc\posy3601\dxfrtext180 {\b\fs96 Part I\par }\pard \qc\posy3601\dxfrtext180 {\b\fs48 Introduction and Tutorial\par }\pard\plain \s4\qj\sb120\posyb\dxfrtext180 \f20 Mops is an object-oriented programming system, derived from the Neon language developed by Charles Duff and sold by Kriya, Inc.  Kriya have discontinued support for Neon, and have released all the source code into the public domain, retaining only the ownership of the name Neon.\par \pard \s4\qj\sb120\posyb\dxfrtext180\tx3240 Mops implemented by:\tab Michael Hore\par Able assistance from:\tab Doug Hoffman\par \pard \s4\qj\posyb\dxfrtext180\tx3240 \tab Greg Haverkamp\par \tab Xan Gregg\par \pard \s4\qj\sb120\posyb\dxfrtext180\tx3240 Documentation updated:\tab Version 2.6, June 1995\par Documentation formatted by:\tab Craig Treleaven\par \pard\plain \s5\sb120\keepn \b\f21 \page Printing this document\par \pard\plain \s4\qj\sb120 \f20 This document is in Microsoft Word Version 5.1 format and uses the fonts Times, Courier, and Helvetica, only.  It is formatted using the Laserwriter 7 driver for US Letter paper, portrait orientation, with fractional widths enabled.  If you want to print any other way, you will probably need to repaginate and regenerate the table of contents and table of predefined classes and methods.  See below.\par \pard \s4\qj\sb120 Almost every paragraph in this document is formatted using a Word style.  Formatting is consistent throughout and can be reformatted in moments this way.  \par \pard\plain \s5\sb120\keepn \b\f21 Viewing on-line\par \pard\plain \s4\qj\sb120 \f20 Of course, you can read the whole manual on-screen.  Word\rquote s Find\'c9 command can help to locate items of interest.  One other technique is useful but not well known.  Use the Outline View and click the \ldblquote 2\rdblquote  in the ruler at the top of the screen.  Word will then show the Lessons and the sub-headings within the lessons.  Whichever line is at the top of the window in outline view will become the line at the top of the window when you switch back to Normal View.  By scrolling in Outline View, you can quickly find the section of interest and position the window for reading in Normal View.  \par \pard\plain \s5\sb120\keepn \b\f21 Two-sided printing\par \pard\plain \s4\qj\sb120 \f20 As shipped, this document is formattted for 2-sided printing to save paper.  If you haven\rquote t printed two-sided documents with your printer before, you might want to practise with the first few pages before sending the whole thing.  On most printers, you need to use Word\rquote s option to print first the odd numbered pages (in the Print\'c9 dialog), reload the paper and then print the even numbered pages.  \par \pard\plain \s5\sb120\keepn \b\f21 Single-sided printing\par \pard\plain \s4\qj\sb120 \f20 If you don\rquote t want to bother with two-sided printing, use the Document dialog and make the Gutter margin zero.  If you adjust the Left and Right margins so the printable width is still 6.5 inches, the page breaks should stay in the same places.  Blank pages may pop out here and there as all Lessons start on an odd-numbered page.  \par \pard\plain \s5\sb120\keepn \b\f21 A4 Paper\par \pard\plain \s4\qj\sb120 \f20 If you select A4 paper in the Page Setup\'c9 dialog, the page breaks will change.  Regenerate the table of contents, as below.  As far as I can tell, the paragraph styles all do the right thing and ajust to the paper width.  Well, all except one:  the header on odd-numbered pages will extend a quarter inch into the margin because the tab stop is at 6.5 inches.  Redefine the Header style to set it to 6.25, if you feel the need.  \par \pard\plain \s5\sb120\keepn \b\f21 Table of Contents\par \pard\plain \s4\qj\sb120 \f20 Use the Table of Contents\'c9 dialog to col\-lect headings from level 1 to level 2 for the Table of Contents.  Figure captions have Heading 5 style, but I didn\rquote t see a reason to create a table of figures.  \par \pard\plain \f20 {\b\fs28\ul\dn6 \sect }\sectd \sbkodd\pgnrestart\pgnlcrm\linemod0\linex0\cols2\endnhere\titlepg {\headerr \pard\plain \li200 \f20 {\f21 Mops Tutorial\par \par }}{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \s244\qc\tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 {\b\f21\fs36 \par }\pard \s244\qc\sa120\tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 {\b\f21\fs36 Contents\par }}{\footerf \pard\plain \f20 \par }\pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Introduction\tab 1\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Before you start\tab 1\par Backup\tab 2\par Using an editor\tab 2\par Mops\emdash an object-oriented language\tab 3\par Private data\tab 5\par A threaded language\tab 5\par The Mops dictionary\tab 6\par Developing stand-alone applications\tab 6\par What your Mops system contains\tab 6\par The Bomb box\tab 7\par Internet and Web info for Mops\tab 7\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 1\tab 9\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 How to start up Mops\tab 9\par The Mops window\tab 10\par The ENTER key\tab 10\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 2\tab 13\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 More about the stack\tab 13\par Arithmetic and the stack\tab 15\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 3\tab 17\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Stack notation\tab 17\par Mastering postfix notation\tab 19\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 4\tab 21\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Mops and OOP\tab 21\par Methods and Inheritance\tab 21\par Objects and Messages\tab 22\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 5\tab 27\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Mapping class-object relationships\tab 27\par Defining a class\tab 27\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 6\tab 31\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Objects and their messages\tab 31\par Summary\tab 33\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 7\tab 35\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Modifying a Mops program\tab 35\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 8\tab 37\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Predefined classes\emdash an introduction\tab 37\par Data structure classes\tab 38\par Other predefined classes\tab 39\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 9\tab 41\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Defining new Mops words\tab 41\par The return stack\tab 42\par Named input parameters\tab 42\par Local variables\tab 43\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 10\tab 45\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Additional math\tab 45\par Displaying text\tab 45\par Explicit stack manipulations\tab 46\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 11\tab 49\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 How Mops makes decisions\tab 49\par Two alternatives\tab 50\par Truths, falsehoods, and comparisons\tab 50\par Nested decisions\tab 52\par Logical operators\tab 53\par The CASE decision\tab 53\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 12\tab 55\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Loops\tab 55\par Definite loops\tab 55\par Nested loops\tab 57\par LEAVE\tab 57\par Indefinite loops\tab 58\par EXIT\tab 59\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 13\tab 61\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Mops' fixed-point arithmetic\tab 61\par Decimal, hex, and binary arithmetic\tab 62\par Signed and unsigned numbers\tab 63\par One last set of numbers\emdash ASCII\tab 64\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 14\tab 65\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Global constants and values\tab 65\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 15\tab 67\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Building a sine table\tab 67\par How the sine table works\tab 70\par \pard\plain \s231\li1440\ri720\tldot\tx8280\tqr\tx8640 \f20 Lines 1-5\tab 70\par Line 8\tab 70\par \pard \s231\li1440\ri720\tldot\tx8280\tqr\tx8640 Line 11\tab 70\par Line 13\tab 70\par Line 15\tab 71\par Line 16\tab 71\par Lines 18-34\tab 71\par Lines 36-40\tab 72\par Lines 46-66\tab 72\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 What happens on the stack\tab 73\par \pard\plain \s231\li1440\ri720\tldot\tx8280\tqr\tx8640 \f20 Lines 71 - 76\tab 75\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 16\tab 77\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Building a turtle graphics program\tab 77\par \pard\plain \s231\li1440\ri720\tldot\tx8280\tqr\tx8640 \f20 Line 3\tab 79\par Line 5\tab 79\par Lines 7 - 23\tab 79\par Lines 25 - 26\tab 80\par Lines 28 - 60\tab 80\par Lines 62 - 98\tab 82\par Lines 100 - 129\tab 82\par Lines 131 - 136\tab 83\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Experimenting with Turtle\tab 83\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 17\tab 85\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Create a mini-Logo language\tab 85\par Designing the language\tab 85\par Implementing a Logo-like language\tab 86\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 18\tab 89\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Inside grDemo\tab 89\par Views\tab 90\par Positioning views\tab 90\par Drawing views\emdash the DRAW: method\tab 93\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 19\tab 95\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Windows\tab 95\par The grWind class\tab 96\par dWind\tab 96\par Controls\tab 97\par GrDemo scroll bars\tab 98\par Scroll bar actions\tab 98\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 20\tab 101\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Menus\tab 101\par Running the program\tab 102\par In summary\tab 103\par \pard\plain \s233\ri360\sb440\keepn\tqdec\tx4320 \b\f20 Lesson 21\tab 105\par \pard\plain \s232\fi-360\li720\ri360\tqdec\tldot\tx4320 \f20 Installing an application\tab 105\par Where to go from here\tab 109\par \pard\plain \f20 \sect \sectd \sbkodd\pgnrestart\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Introduction\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Introduction\par \pard\plain \s3\qj\sb160 \f20 Mops is an object-oriented programming system, derived from the Neon language developed by Charles Duff and sold by Kriya, Inc.  Kriya have discontinued support for Neon, and have released all the source code into the public domain, retaining only the ownership of the name Neon.\par \pard \s3\qj\sb160 Mops is a complete re-implementation of Neon, with many additional enhancements.  It is also in the public domain.\par \pard \s3\qj\sb160 The name Mops could well be an acronym for "Mike's Object-oriented Programming System" but since I feel the computing world has enough acronyms already, I wouldn't want to be too dogmatic about this.  Hence we spell Mops as Mops, not MOPS.\par \pard \s3\qj\sb160 My hope is that over a period of time Mops users will, by sharing their developments, contribute to the ongoing Mops effort.  As a one-man, very part time operation, I can't hope by myself to compete with all the commercial outfits producing gigantic, all-singing, all-dancing development systems for the Mac.  I would be happy to concentrate on the low-level implementation of the Mops nucleus and basic system code.\par \pard \s3\qj\sb160 In this introduction, we will introduce you to some basic concepts of Mops and its terminology.  In the process, you'll see what a Mops program looks like, and how it differs from most other programming languages.  We'll also take you on a guided tour of the Mops system. \par \pard\plain \s254\sb240\keepn \b\f21 Before you start\par \pard\plain \s3\qj\sb160 \f20 The first thing you should do, if you haven't done it already, is install the full Mops system.  What you have so far is the application "Mops" itself, and a lot of source files.  "Mops" is just the "nucleus" or "kernel" of the full system.  To generate the full system, you have to use the nucleus to compile the source files.  This is quite easy\emdash just follow the step-by-step instructions below.\par \pard \s3\qj\sb160 (The reason for this procedure, by the way, is to reduce the size of the total package as much as possible, by not having to include all the compiled binary files.)\par \pard \s3\qj\sb160 Right, here we go.  First start up the nucleus application "Mops".  You should get a window appearing on the screen with no menus.  The window will be showing a message telling you that it is only the nucleus, and that you should now compile the system by typing\par \pard\plain \s2\li720 \b\f22\fs20 load base <ENTER>\par \pard\plain \s3\qj\sb160 \f20 and look at the Readme.1st file, or the intro chapter of the manual.   That's exactly what you're doing\emdash so far so good!\par \pard \s3\qj\sb160 This window is just a very rudimentary one (it can't be moved or anything).  Its only purpose is to allow the full Mops system to be compiled.  Once this is done, Mops will have a proper interface.\par \pard \s3\qj\sb160 There will be a ">" prompt, and an "underscore" cursor, ready for you to type something.  So now go ahead and type\par \pard\plain \s2\li720 \b\f22\fs20 load base\par \pard\plain \s3\qj\sb160 \f20 (followed by the ENTER key)\par \pard \s3\qj\sb160 This will do the first stage of the compilation.  {\b Note that Mops commands are terminated by <ENTER>, and that <ENTER> is not the same as <RETURN>!  }Many Mac programs treat these two keys as equivalent, but Mops doesn't.  Once you've used Mops for a while you'll come to appreciate the usefulness of this feature.\par \pard \s3\qj\sb160 As lines you type to the Mops window are normally terminated by ENTER, we'll assume this from now on.\par The compilation will take a couple of minutes.  If no errors come up, you'll get a message saying that interim.dic has been saved, and the ">" prompt again.\par \pard \s3\qj\sb160 interim.dic is the partial dictionary that has just been compiled.  It will be in the "Mops \'c4" folder.\par \pard \s3\qj\sb160 If something goes wrong in the next stages, you can get back to this point by double-clicking on interim.dic, without having to go back to the bare nucleus.\par \pard \s3\qj\sb160 Now, to compile the rest of the dictionary, type\par \pard\plain \s2\li720 \b\f22\fs20 // sys.ld\par \pard\plain \s3\qj\sb160 \f20 and everything else should be compiled.  It only takes a couple of minutes on most Macs.  The names of the different files will appear on the screen as they are being compiled.  If everything goes OK, at the end of the compilation you'll get the following message, which should be self-explanatory:\par \pard \s3\qj\sb160 The Mops system is compiled.  Now save the dictionary, by typing e.g.\par \pard\plain \s2\li720 \b\f22\fs20 save Mops.dic\par \pard\plain \s3\qj\sb160 \f20 then type bye to quit, and after that you'll be able to fire up the newly-compiled dictionary.\par So do what it says\emdash save the full dictionary by typing\par \pard\plain \s2\li720 \b\f22\fs20 save Mops.dic\par \pard\plain \s3\qj\sb160 \f20 and then quit by typing\par \pard\plain \s2\li720 \b\f22\fs20 bye\par \pard\plain \s3\qj\sb160 \f20 Then after that, you can then fire up the "proper" Mops system by double-clicking on Mops.dic.\par Finally, if you use floating point, you can compile it by firing up Mops.dic and typing\par \pard\plain \s2\li720 \b\f22\fs20 // floating point \par \pard\plain \s3\qj\sb160 \f20 and when it's compiled, save with\par \pard\plain \s2\li720 \b\f22\fs20 save MopsFP.dic\par \pard\plain \s3\qj\sb160 \f20 After this, you should be able to fire up either the standard or floating point system by double-clicking on the dictionary image Mops.dic or MopsFP.dic.\par \pard\plain \s254\sb240\keepn \b\f21 Backup\par \pard\plain \s3\qj\sb160 \f20 We can't emphasize enough the importance of backup.  Assuming you are using a hard disk, you should keep it regularly backed up.  With programming, especially, system crashes are commonplace!  But these shouldn't worry you, if your disk is regularly backed up.\par It would also be good to keep an extra backup of the original Mops distribution, whether it was on disk or downloaded from an on-line service.  Then, if you somehow destroy anything in the Mops system, you can easily get back to a working system.\par \pard\plain \s254\sb240\keepn \b\f21 Using an editor\par \pard\plain \s3\qj\sb160 \f20 Mops does not have a built-in editor, but works in close cooperation with Quick Edit, which was developed by Doug Hoffman especially for Mops, and is included here in the "Quick Edit \'c4" folder.  If both Mops and QE are running, they communicate via Apple Events to perform a number of useful functions.  From Mops, you can ask QE to open a particular source file, and this will also happen automatically when an error occurs.  From QE, you can send text to be interpreted by Mops, or request that Mops locate a source file which QE then opens.  QE also incorporates an on-line Mops glossary.  So we do recommend you give QE a try.\par \pard \s3\qj\sb160 To use the on-line glossary, just highlight a word, and choose Reference under the Special menu, or hit command-3.\~\~Also, in the Glossary window, start typing the name of the word you want to look up, and you'll be taken there.  You'll find further instructions for using QE in the Readme file in the "Quick Edit \'c4" folder.\par \pard\plain \s254\sb240\keepn \b\f21 Mops\emdash an object-oriented language\par \pard\plain \s3\qj\sb160 \f20 In Mops, much programming is done by sending {\ul messages} to {\ul objects}.  A Mops object can be a simulation of any real-world object you're familiar with: a rectangle, a Macin\-tosh window, an artist's canvas, a bank account.  When a Mops program runs, a relatively small list of instructions route program execution through the framework of objects, and the objects come to life:  a rectangle draws itself on the screen; a window appears; a moused-controlled brush paints on an artist's canvas; a bank account monitors income and payments.\par \pard \s3\qj\sb160 Mops, itself, includes many pre-defined types of object.  With this pre-existing framework, you can create complex objects as simply as typing two words.  Let's do that right now, so you can get a taste of what Mops has in store for you.  This is just a demonstra\-tion, not a lesson.  So type along with us, and observe what happens without trying to remember each step.\par \pard \s3\qj\sb160 Open the Mops \'c4 folder.  Locate the Mops.dic icon and double-click it.  In a moment, the Mops window appears.  We'll explain the win\-dow's contents in detail in Lesson 1 of tutorial, but for now, create a rectangle object\emdash called "box"\emdash in memory by typing:\par \pard\plain \s2\li720 \b\f22\fs20 rect box\par \pard\plain \s3\qj\sb160 \f20 (Remember to hit <ENTER> at the end.)\par \pard \s3\qj\sb160 We need to tell box where on the screen it should appear, and how big it should be.  The rectangle frame\-work inside Mops wants these instructions in the form of screen coordinates for two opposite corners, the top left and bottom right.  We'll choose 20, 10 for the top left, and 200, 100 for the bottom right.  Put these figures into box's memory by typing the following line, making sure you observe the spacing between elements and the colon:\par \pard\plain \s2\li720 \b\f22\fs20 20 10 100 50 put: box\par \pard\plain \s3\qj\sb160 \f20 This line is called a {\ul message}, which we just sent to box.  Now we want to send messages to box so that it will draw itself on the screen.  First, however, it will need a window to draw itself in.  To set up a window object\emdash named "ww"\emdash in memory, type:\par \pard\plain \s2\li720 \b\f22\fs20 window ww\par \pard\plain \s3\qj\sb160 \f20 Macintosh windows need a lot of information before they can be placed on the screen, including the rectangular limits of the window, the title of the window, the type of window, whether it is to be visible, and whether it has a close box.  Even then, the Macintosh Toolbox requires much more information, which Mops automatically supplies.  Some of the Mops classes, including Window, have test or example methods that display an instance of that class, with typical values.  To see the window you just created, type the following message:\par \pard\plain \s2\li720 \b\f22\fs20 test: ww\par \pard\plain \s3\qj\sb160\keepn \f20 Your screen should now look something like this:\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw450\pich299 13e500000000012b01c21101a10064000c574f524400000000012b01c201000a00000000012b01c298003a000c0007013601c8000c0007013601c800000000012a01c1000002c700040060c800040040c80006fe0000c0cb00070300000180cb00201400000100001f33000001f0331800060c00c0001c60fd00043318ccc630e5001f1400000ee000180300000180301800060000c0003260fd000333180c06e400231f00001ff00018331e000181f33c00060c71e000307c3c666000333ccccf31e1c0e700231300001fc000183333000183331800060cc8c00038fe660860003318ccc6333320e700231300001fc0001e33330001e3331800060ce0c0001cfe660860003318ccc6333380e700231300001ff00018333f000183331800060c70c0000efe660860003318ccc633f1c0e700231300001ff000183330000183331800060c38c00006fe660860003318ccc63300e0e700231300000fe000183331000183331800060c98c00026fe660840003318ccc6331260e700231f000006c00018331e0001f1f30c0007cc7060001c663c7f80001e0cccc331e1c0e70002c70002c70002c70002c70002c70007007fcaff0180003a0200007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe003a0200007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe001f010000fdfffd00fdfffd00fdfffd00fdfffd00fdfffd00fdfffd00fdfffd002d010000feff00f6fd00feff00f6fd00feff00f6fd00feff00f6fd00feff00f6fd00feff00f6fd00feff00f6fd002d010000feff00dcfd00feff00dcfd00feff00dcfd00feff00dcfd00feff00dcfd00feff00dcfd00feff00dcfd0039010001feff00f8fe000001feff00f8fe000001feff00f8fe000001feff00f8fe000001feff00f8fe000001feff00f8fe000001feff00f8fd0039010007feff00c0fe000007feff00c0fe000007feff00c0fe000007feff00c0fe000007feff00c0fe000007feff00c0fe000007feff00c0fd003901000ffeff00c0fe00000ffeff00c0fe00000ffeff00c0fe00000ffeff00c0fe00000ffeff00c0fe00000ffeff00c0fe00000ffeff00c0fd003901001ffeff00c0fe00001ffeff00c0fe00001ffeff00c0fe00001ffeff00c0fe00001ffeff00c0fe00001ffeff00c0fe00001ffeff00c0fd003204001ffffffcfd00031ffffffcfd00031ffffffcfd00031ffffffcfd00031ffffffcfd00031ffffffcfd00031ffffffcfc003204003ffffffcfd00033ffffffcfd00033ffffffcfd00033ffffffcfd00033ffffffcfd00033ffffffcfd00033ffffffcfc000801007fcbff018000060200fff0ca00060201fff0ca00060201fff0ca00060207fff0ca000b020ffff0e100010660ec000a021ffff0e1000006eb0011023ffff0e600073fe1e3e1c03e6380ed000f027ffff0e600fd330320666640ed000e027ffff0e600fd3302806666ec000f027ffff0e600fe330331c06666ec000f027ffff0e600fe330330e06666ec0010027ffff0e600fe330032fe660040ed0011027ffff0e600073331e3e1c63e6380ed000a027ffff0e4000003e8000a027ffff0e4000003e80006027ffff0ca0006027ffff0ca0007007fcaff01800007007fcaff01800006027ffff8ca0006027ffff8ca000e067ffff801c20002fc000020d4000e067ffe1802220002fc000020d400110d7ffe1802071e72420001cf3c7220d500110d7ffe1801c2228a8000022aa22220d500110d7ffe1800222283800003eaa22220d500110d7ffe18022226824000020aa22220d500110d7fe01801c19a7a220001eabc19e0d5000c027fe018f90002200020d5000c027fe018f900022001c0d50006027fe018ca0006027fe018ca0006027fc018ca0006027fc018ca0006027f8018ca0006027f8018ca0006027f0018ca0006027f0018ca0006027e0018ca0006027c0018ca000602700018ca000602400018ca000602000018ca000602000018ca000602000018ca000602000018ca000602000018ca000602000018ca000602000018ca000e02000018f800001fe9ff00f8ed000e02000018f8000010e900000ced000e02000038f8000010e900000ced000e02000078f8000010e900000ced001802000078f8000217effefaff00f0fd00001ff8ff00eced0017020000f8f80002100802f900033f000060f700000ced0019020000f8f8000217e802faff05f00c0000601ff8ff00eced0017020000f8f80002100802f900030c3c38f0f700000ced0019020001f8f8000217e802faff05f00c6664601ff8ff00eced0017020007f8f80002100802f900030c667060f700000ced001902000ff8f8000217e802faff05f00c7e38601ff8ff00eced001702001ff8f80002100802f900030c601c60f700000ced001902001ff8f8000217e802faff05f00c624c601ff8ff00eced001702003ff8f80002100802f900030c3c3830f700000ced001802007ff8f8000217effefaff00f0fd00001ff8ff00eced000e0200fff8f8000010e900000ced000e0201fff8f8000010e900000ced000e0201fff8f8000010e900000ced000e0207fff8f800001fe9ff00fced0010020ffff8f8000010eb000204000ced0010021ffff8f8000010eb000204000ced0010023ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffff8f8000010eb000204000ced0010027ffe18f8000010eb000204000ced0010027ffe18f8000010eb000204000ced0010027ffe18f8000010eb000204000ced0010027ffe18f8000010eb000204000ced0010027ffe18f8000010eb000204000ced0010027fe018f8000010eb000204000ced0010027fe018f8000010eb000204000ced0010027fe018f8000010eb000204000ced0010027fe018f8000010eb000204000ced0010027fe018f8000010eb000204000ced0010027fc018f8000010eb000204000ced0010027fc018f8000010eb000204000ced0010027f8018f8000010eb000204000ced0010027f8018f8000010eb000204000ced0010027f0018f8000010eb000204000ced0010027f0018f8000010eb000204000ced0010027e0018f8000010eb000204000ced0010027c0018f8000010eb000204000ced001002700018f8000010eb000204000ced001002400018f8000010eb000204000ced001002000018f8000010eb000204000ced001002000018f8000010eb000204000ced001302000018fb0003018c0010eb000204000ced001202000018fa0002500010eb000204000ced001202000018fa0002200010eb000204000ced001202000018fa0002200010eb000204000ced001202000018fa0002200010eb000204000ced001202000018fa0002200010eb000204000ced001502000018fa0002200010eb000204000cef00017fff1202000038fa0002200010eb000204000ced001202000078fa0002200010eb000204000ced00150200007ffaff02dffff0eb000204000fefff01800012020000f0fa0002200010eb000204000ced0012020000f0fa0002200010eb000204000ced0012020000f0fa0002200010eb000204000ced0012020001f0fa0002200010eb000204000ced0012020007f0fa0002500010eb000204000ced001302000ff0fb0003018c0010eb000204000ced001002001ff0f8000010eb000204000ced001002001ff0f8000010eb000204000ced001002003ff0f8000010eb000204000ced001002007ff0f8000010eb000204000ced00100200fff0f8000010eb000204000ced00100201fff0f8000010eb000204000ced00100201fff0f8000010eb000204000ced00100207fff0f8000010eb000204000ced0010020ffff0f8000010eb000204000ced0010021ffff0f8000010eb000204000ced0010023ffff0f8000010eb000204000ced0010027ffff0f8000010eb000204000ced0010027ffff0f8000010eb000204000ced0010027ffff0f8000010eb000204000ced0010027ffff0f8000010eb000204000ced0010027ffff0f8000010eb000204000ced0010027ffff0f8000010eb000204000ced0010027ffff0f8000010eb000204000ced0010027ffff0f8000010eb000204000ced0010027ffff0f8000010eb000204000ced0016037ffff078fe0005400004400410eb000204000ced0017037ffff044fc000304000410eb000204000cef00017fff160c7ffff044e39e0045803c438e10eb000204000ced0016087ffff0791455004640fe440010eb000204000ced00160c7ffff045145500444044440410eb000204000ced00160c7ffff045145500444044440410eb000204000ced00160c7ffe1044e3950044403c43c310eb000204000ced0010027ffe10f8000010eb000204000ced0010027ffe10f8000010eb000204000ced000e027ffe10f800001fe9ff00fced0010027ffe10f8000010eb000204000ced0015057fe010784004fd0002400010eb000204000ced0015057fe010440004fd0002400010eb000204fe0ced00160c7fe0104443ce3d638e00e38030eb000204820ced00160c7fe01044440445945100444010eb00020483eced00160c7fe01044438445141f00444010eb000204822ced00160c7fc0104440444d141000444010eb000204822ced00160c7fc0107847833513cf00338010eb000204822ced0010027f8010f8000010eb000204fe2ced0010027f8010f8000010eb000204202ced0010027f0010f8000010eb000204202ced0010027f0010f8000010eb000204202ced0016077e00107c01001004fe00010210eb0002043feced0016077c00101001001004fe00010410eb000204000ced00140c70001010e38f10078e3de0085fe9ff00fced001402400010fe11061004514510086fe9ff00fced001e02000010fe110c10045f45100845101145045f04f80004010f111044e8001e120000101111131004504d10044510114d045008f800040201111448e8001f1300001010e0cd10044f35e00244e01e3503cf1040f9000407ce10e39fe8001102000010fb000001fd000310000040d9001102000010fb000001fd000310000380d9000602000010ca000902000010cc00017fff1e0300001040fe00070100404000400080fe000010f80004038e7ce38ee8001d0300001040fe000601004040004001fd000008f800040451051411e8001e1300003040f58f38f38078438e48021e4563ce0440f8000351041791e8001d1200007041165145010044445150021145945104f700039108244ee8001e120000704114117ce10044445070021145045f04f80004010f104451e8001e120000f04134114011004444504801114d045008f800040201108451e8001f130000f07cd40f3de0c078438f44009e3503cf1040f9000407ce11f38ee80010050000f0000001f9000310000040d90010050001f000000ef9000310000380d90006020007f0ca000602000ff0ca000a06001ff000000401ce000a06001ff000000401ce000c08003ff058e38e01e391d0000c08007ff065144401144ad0000c0800fff041f404011444d0000c0801fff041040401144ad0000c0801fff040f3c301e391d000060207fff0ca0006020ffff0ca0006021ffff0ca0006023ffff0ca00160c7ffff038e00238000471c03e70fe0002400040da00160c7ffff045100644000c8a202088fe0002400040da0018147ffff00510024400048a203c88001e44e10078e440dc0018147ffff00910024400048a2002880011444000451280dc0017137ffff01110024400048a20028800114440004511db0018147ffff02110024400048a20228800114c4000451280dc0018147ffff07ce00238000471c01c70001e34310078e440dc000a027ffff0f6000010d6000d027ffff0f6000010d800017fff06027ffff0ca0006027ffff0ca0009057ffff0004001cd0009057ffff0000001cd000d097ffff054458f39501554d1000d097ffff054465145501554d1000d097ffe1054445145501554d1000d097ffe1054445145501554d1000d097ffe1028444f38a00a28d10006027ffe10ca0006027ffe10ca000a027fe010fb000080d1000a027fe010fb000080d1000d057fe010100004fe000080d1000d057fe010100004fe000080d1000d097fe01038e3ce10055580d1000d097fc01011140400055580d1000d097fc01011f38400055580d1000d097f801011004400055580d1000d097f80100cf78310028a80d1000a027f0010fb000080d1000a027f0010fb000080d10006027e0010ca0006027c0010ca000602700010ca000602400010ca000602000010ca000602000010ca000602000010ca000602000010ca000602000010ca000602000010ca000602000010ca000602000010ca000602000010ca000602000030ca000602000070ca000602000070ca0009020000f0cc00015b6d09020000f0cc00016db609020000f0cc000136db09020001f0cc00015b6d09020007f0cc00016db60902000ff0cc000136db0902001ff0cc00015b6d0902001ff0cc00016db60902003ff0cc000136db0902007ff0cc00015b6d090200fff0cc00016db6090201fff0cc000136db090201fff0cc00015b6d090207fff0cc00016db609020ffff0cc000136db09021ffff0cc00015b6d09023ffff0cc00016db609027ffff0cc000136db09027ffff0cc00015b6d05c900016db6ff}}\par \pard\plain \s3\qj\sb160 \f20 You will be able to resize and drag ww around the screen as for any Mac window.  But if you type keys while ww is in front, nothing will happen\emdash this is simply because we haven't told ww what to do with keys.  So move ww out of the way, and click on the Mops window so you can type further commands.  Resize the Mops window if necessary so that ww is still visible.\par \pard \s3\qj\sb160 Now type:\par \pard\plain \s2\li720 \b\f22\fs20 set: ww  draw: box\par \pard\plain \s3\qj\sb160 \f20 The message "set: ww" tells the system that drawing is now to take place in ww (but without bringing it to the front).  Box should now appear in ww, and your screen should look something like this (of course you might have put ww in a different place):\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw414\pich307\picscaled 2437000000000133019e1101a10064000c574f5244000000000133019e01000a000000000133019e98003400040003013601a000040003013601a0000000000132019d000002cd0002cd0002cd000c0007e2ff00eff6ff00f0fa00040007ce00040006ce00070304000006d10007030400000cd10020fe0011080000f99800000f8198c0003060060000e3fd00050198c6663180ec001ffe0011770000c01800000c0180c000300006000193fd00040198c06030eb0022fe001cff8000c198f0000c0f99e00030638f000183e1e333000199e666798f0eed0024fe0011fe0000c19998000c1998c0003066460001c3fe3307000198c666319999ee00000722fe0011fe0000f19998000f1998c0003067060000e3fe3307000198c66631999ced0022fe0011ff8000c199f8000c1998c000306386000073fe3307000198c666319f8eed0021fe0010ff8000c19980000c1998c0003061c60000fd3307000198c666319807ed0022fe00107f0000c19988000c1998c0003064c60001fe330832000198c666319893ed0022fe001c360000c198f0000f8f9860003e63830000e331e3fc0000f06666198f0eed0002cd0004ce00000702cd0002cd0002cd00060007cfff00f82f02000003fdff0380000003fdff0380000003fdff0380000003fdff0380000003fdff0380000003fdff0480000003f82902000003fdfffe000003fdfffe000003fdfffe000003fdfffe000003fdfffe000003fdfffe000103f83502000007feff00f8fe000007feff00f8fe000007feff00f8fe000007feff00f8fe000007feff00f8fe000007feff00f8fe000107f83502000007feff00b0fe000007feff00b0fe000007feff00b0fe000007feff00b0fe000007feff00b0fe000007feff00b0fe000107f83506000007fffffee0fe000407fffffee0fe000407fffffee0fe000407fffffee0fe000407fffffee0fe000407fffffee0fe000107f82001007fe9ff000ffeff00c0fe00000ffeff00c0fe00000ffeff00c0fe00010ff80b010040ea000001e8ff00f80c010040ea000101c0e90000380c010040ea000101c0e90000381601005ffaff0080fa000001fcff03effefdc0e900003813010040f400011980fb0003082201c0e90000381f01005ffaff0080fc0002180001fcff03e822fdc0f70003fc000180f70000381f010040f90006ff878f8700f98efb0003082201c0f7000330000180f70000382001005ffaff0080fdcc0381999901fcff03e822fdc0f7000330f0e3c0f70000381e010040f900fecc03ce019998fb0003082201c0f7000331999180f70000382101005ffaff0080fecc04c701999801fcff03efe2fdc0f700033199c180f70000381e010040f900fecc03c3819998fb0003080201c0f7000331f8e180f7000038210100dffaff0080fecc00c9fe990001fcff03e802fdc0f7000331807180f70000381f0101c0f90006ccc78f8718f98efb0003080201c0f7000331893180f7000030200107dffaff038000000cfd000001fcff03effefdc0f7000330f0e0c0f7000030100107c0f700000cf5000101c0e90000300c0107c0ea000101c0e90000300c0107c0ea000101c0e90000300a0007e8ff00c0e90000300b0007eaff018001e8ff00f00f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb0002100030170507e007080008fc000080f500028001c0eb0002100030170507e008880008fc000080f500028001c0eb00021000301a0c07e0081c79c90800073cf1c880f600028001c0eb00021000301a0c07e007088a2a000008aa888880f600028001c0eb00021000301a0c07e000888a0e00000faa888880f600028001c0eb00021000301a0c07e008889a090000082a888880f600028001c0eb00021000301a0c07e0070669e8880007aaf06780f600028001c0eb0002100030150107e0f90002800080f60002c001c0eb00021000301a0107e0f900018007f500048001c00003f8ff00fcf70002100038150107e0eb00048001c00002f8000004f70002100030150107e0eb00048001c00002f8000004f70002100030150107e0eb00048001c00002f8000004f70002100030150107e0eb00048001c00002f8000004f70002100037150107e0eb00048001c00002f8000004f70002100037150107e0eb00048001c00002f8000004f70002100030150107e0eb00048001c00002f8000004f70002100037150107e0eb00048001c00002f8000004f70002100030150107e0eb00048001c00002f8000004f70002100030150107e0eb00048001c00002f8000004f70002100030150107e0eb00048001c00002f8000004f70002100030150107e0eb00048001c00002f8000004f70002100030150107e0eb00048001c00002f8000004f70002100030150107e0eb00048001c00002f8000004f70002100030150107e0eb00048001c00002f8000004f70002100030150107e0eb00048001c00002f8000004f70002100030150107e0eb00048001c00002f8000004f7000210003015010660eb00048001c00002f8000004f7000210003815010460eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003815010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00002f8000004f7000210003015010060eb00048001c00003f8ff00fcf700021000300f010060eb00028001c0eb00021000300f010060eb00028001c0eb00021000300f010060eb00028001c0eb00021000300f010060eb00028001c0eb00021000300f010060eb00028001c0eb00021000300f010060eb00028001c0eb00021000300f0100e0eb00028001c0eb00021000300f0101e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000370f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300c0107e0eb00018001e8ff00f00f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000370f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f0107e0eb00028001c0eb00021000300f010660eb00028001c0eb00021000300f010460eb00028001c0eb00021000370f010060eb00028001c0eb00021000300f010060eb00028001c0eb00021000300f010060eb00028001c0eb00021000300f010060eb00028001c0eb00021000300f01007febff02c001c0eb00021000380f010040eb00028001c0eb00021000380c010040eb00018001e8ff00f80b010040eb0002ffffbfe8ff22010040eb0002800181feff00ecfe000001feff00ecfe000001feff00ecfe000101f822010040eb0002800181feff00b8fe000001feff00b8fe000001feff00b8fe000101f822010040eb0002818183feff00f0fe000003feff00f0fe000003feff00f0fe000103f822010040eb000282418ffeff0080fe00000ffeff0080fe00000ffeff0080fe00010ff822010040eb000284219ffeff0080fe00001ffeff0080fe00001ffeff0080fe00011ff822010040eb00028811bffeff0080fe00003ffeff0080fe00003ffeff0080fe00013ff8290b0041e0000001000011001040f500059009bffffff8fd00033ffffff8fd00033ffffff8fd00013ff82602004110fc0002100010f40001bc3dfeff00f8fd00037ffffff8fd00037ffffff8fd00017ff82b0f0041138e78011600f10e3843963d6444f900018421feff00f0fd00feff00f0fd00feff00f0fd0001fff8300f0041e451540119011111104459459440f900018421feff00fcfe000001feff00fcfe000001feff00fcfe000201fff8300f00411451540111011110104451450440f900018421feff00f8fe000003feff00f8fe000003feff00f8fe000203fff8300f004114515401110111101044514d0440f9000187e1feff00f0fe000003feff00f0fe000003feff00f0fe000203ffff300f0041138e54011100f10f0c43913503c4f900018001feff00e0fe00000ffeff00e0fe00000ffeff00e0fe00020ffff826010040f4000040f900018001feff00c0fe00001ffeff00c0fe00001ffeff00c0fe00021ffff825010040f500010380f900fdff01fec0fe00043ffffffec0fe00043ffffffec0fe00023ffff822010040eb0001a223feff0080fe00007ffeff0080fe00007ffeff0080fe00027ffff81d010040eb00018889fefffe000001fdfffe000001fdfffe000301fffff832040041e10010fe000301000040fe0002c04044fb0004a223fffffcfe000001feff00fcfe000001feff00fcfe000301fffff8320400c1100010fe000901000040000001004004fb00048889fffff8fe000001feff00f8fe000001feff00f8fe000301fffff8341c01c1110f38f58e38038e00e39e00e38078478f3ce0163d63a223ffffc0fe000001feff00c0fe000001feff00c0fe000001feff351c07c1111011165144011100445101110044445141101945948889ffffc0fe000001feff00c0fe000001feff00c0fe000301fffff8321b07c1110e1114507c011100445101110044445139f0104514a223fffefd000301fffffefd000301fffffefd000301fffff8321b07c111011134504001110044510111004444530500104d148889ffdcfd000301ffffdcfd000301ffffdcfd000301ffffd8321b07c1e11e0cd44f3c00ce00339e00e10044478d78f0103513a223fff8fd000301fffff8fd000301fffff8fd000301fffff8230107c0f7000010f600038889ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe0240107c0f7000010f7000403a223ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe01f0107c0eb00038889ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe01f0107c0eb0003a223ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe72c0607c1f004004010fe000008fb000040fb00038889ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe02c0607c04004004010fe000010fb000020fb0003a223ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe02f1107c0438e3c401e38f78021638079158f3811fb00038889ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe02c0107c0fe440c40114514402194404516514410fb0002a223fcfc000201fffcfc000201fffcfc000301fffc002c0107c0fe440c40117d14402114404514117c10fb00028889fcfc000201fffcfc000201fffcfc000301fffc002c1107c044444c40114134401114404534114020fb0002a223fcfc000227fffcfc000227fffcfc000327fffc002c1107c043833440113cd78009138078d40f3c41fb00028889fcfc00020ffffcfc00020ffffcfc00030ffffc00260107c0fb000004fd0002400001f90002a223fcfc00023ffffcfc00023ffffcfc00033ffffc00260107c0fb000004fd000240000ef900028889c0fc00027fffc0fc00027fffc0fc00037fffc0001c0107c0eb0002a223c0fc0002ffffc0fc0002ffffc0fc0003ffffc0001f0107c0eb0002ffffc0fd000301ffffc0fd000301ffffc0fd000401ffffc0002d0107c1fd000604010100010002fd000040fb0002c003c0fd000301ffffc0fd000301ffffc0fd000401ffffc0002d0107c1fd000604010100010004fd000020fb0002c003c0fd000301ffffc0fd000301ffffc0fd000401ffffc0002c1107c103d63ce3ce01e10e39200879158f3811fb0002c00380fd00feff0080fd00feff0080fd00feff0180002c1107c104594514040111114540084516514410fb0002c00380fd00feff0080fd00feff0080fd00feff018000281107c1045045f38401111141c0084514117c10fb0002c00380fd00fefffc00fefffc00feff0100002e1107c104d04500440111114120044534114020fb0002c00380fe000001fefffd000001fefffd000001feff010000301107c1f3503cf78301e10e3d100278d40f3c41fb0002c00380fe000303fffffefd000303fffffefd000503fffffe0000290407c0000004f90002400001f90002c00380fe00030ffffffefd00030ffffffefd00050ffffffe00002b0407c0000038f9000240000ef90009c003800000019ffffffcfe0004019ffffffcfe0006019ffffffc0000220107c0eb0005c0038000000ffeff00f8fe00000ffeff00f8fe00000ffeff02f80000220107c0eb0005c0038000003ffeff00e0fe00003ffeff00e0fe00003ffeff02e00000260507c000001004ef0005c0038000007ffeff0080fe00007ffeff0080fe00007ffeff028000001f0507c000001004ef0004c003800001fdfffe000001fdfffe000001fdfffe00270707c1638e38078e44f10004c003800007feff00fefe000007feff00fefe000007feff00fefe00270707c1945110045128f10004ffff800007feff00fefe000007feff00fefe000007feff00fefe002707064107d010045110f10004888980003ffeff00fefe00003ffeff00fefe00003ffeff00fefe0022070441041010045128f10003a2238000fdff00c0fe00fdff00c0fe00fdff00c0fe002007004103cf0c078e44f1000388898001fdfffe000001fdfffe000001fdfffd0020010040eb0003a2238007feff00f8fe000007feff00f8fe000007feff00f8fd0022010040eb00038889801ffeff00e0fe00001ffeff00e0fe00001ffeff00e0fe00001822010040eb0003a223803ffeff00e0fe00003ffeff00e0fe00003ffeff00e0fe00003822010040eb00038889807ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe0000782c100040e38008e00238e01f380c6000400040fa0002a22380fdff00e0fe00fdff00e0fe00fdff00e0fe0000f82c100041144019100645101044028000400040fa0002888980fdff00c0fe00fdff00c0fe00fdff00c0fe0000f833120040144009100245101e44011e44e10078e440fc0002a22381feff00fefe000001feff00fefe000001feff00fefe000101f8331200402440091002451001440111444000451280fc0002888981feff00ecfe000001feff00ecfe000001feff00ecfe000101f83211004044400910024510014401114440004511fb0002a22381feff00b8fe000001feff00b8fe000001feff00b8fe000101f83312004084400910024510114401114c4000451280fc0002888983feff00f0fe000003feff00f0fe000003feff00f0fe000103f833120041f38008e00238e00e38011e34310078e440fc0002a2238ffeff0080fe00000ffeff0080fe00000ffeff0080fe00010ff827010040f800010110f6000288899ffeff0080fe00001ffeff0080fe00001ffeff0080fe00011ff827010040f800010110f60002a223bffeff0080fe00003ffeff0080fe00003ffeff0080fe00013ff823010040f8000001f500058889bffffff8fd00033ffffff8fd00033ffffff8fd00013ff823010040f8000001f50001a223feff00f8fd00037ffffff8fd00037ffffff8fd00017ff824040040010004fb000001f500018889feff00f0fd00feff00f0fd00feff00f0fd0001fff829040040000004fb000001f50001a223feff00fcfe000001feff00fcfe000001feff00fcfe000201fff82c0b004151163ce5405550000001f500018889feff00f8fe000003feff00f8fe000003feff00f8fe000203fff82d0c00415119451540555000000280f60001a223feff00f0fe000003feff00f0fe000003feff00f0fe000203fff82d0c00415111451540555000000c60f600018889feff00e0fe00000ffeff00e0fe00000ffeff00e0fe00020ffff82908004151114515405550f20001a223feff00c0fe00001ffeff00c0fe00001ffeff00c0fe00021ffff829080040a1113ce28028a0f200058889fffffec0fe00043ffffffec0fe00043ffffffec0fe00023ffff822010040eb0001a223feff0080fe00007ffeff0080fe00007ffeff0080fe00027ffff81d010040eb00018889fefffe000001fdfffe000001fdfffe000301fffff822010040eb0004a223fffffcfe000001feff00fcfe000001feff00fcfe000301fffff8220100c0eb00048889fffff8fe000001feff00f8fe000001feff00f8fe000301fffff8250401c0400010ee0004a223ffffc0fe000001feff00c0fe000001feff00c0fe000301fffff8250407c0400010ee00048889ffffc0fe000001feff00c0fe000001feff00c0fe000301fffff8250707c0e38f38401554f10003a223fffefd000301fffffefd000301fffffefd000301fffff8250707c0445010001554f100038889ffdcfd000301ffffdcfd000301ffffdcfd000301ffffd8250707c047ce10001554f10003a223fff8fd000301fffff8fd000301fffff8fd000301fffff8250707c0440110001554f100038889ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe0250707c033de0c400a28f10003a223ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe01f0107c0eb00038889ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe01f0107c0eb0003a223ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe01f0107c0eb00038889ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe01f0107c0eb0003a223ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe0290307c00004fd000010fe000010f600038889ffe0fd000301ffffe0fd000301ffffe0fd000301ffffe0260307c00004fd000010fe000010f60002a223fcfc000201fffcfc000201fffcfc000301fffc00290e07c0f38e10055500f58f54401e3910f800028889fcfc000201fffcfc000201fffcfc000301fffc00290e07c1044400055501165154001144a0f80002a223fcfc000227fffcfc000227fffcfc000327fffc00290e07c0e7c40005550114115400114440f800028889fcfc00020ffffcfc00020ffffcfc00030ffffc00290e07c0140400055501141354001144a0f80002a223fcfc00023ffffcfc00023ffffcfc00033ffffc00290e07c1e3c310028a00f40d28401e3910f800028889c0fc00027fffc0fc00027fffc0fc00037fffc0001c0107c0eb0002a223c0fc0002ffffc0fc0002ffffc0fc0003ffffc0001f0107c0eb00028889c0fd000301ffffc0fd000301ffffc0fd000401ffffc0001f0107c0eb0002a223c0fd000301ffffc0fd000301ffffc0fd000401ffffc0001f0107c0eb00028889c0fd000301ffffc0fd000301ffffc0fd000401ffffc0001c0107c0eb0002a22380fd00feff0080fd00feff0080fd00feff0180001c0107c0eb0002888980fd00feff0080fd00feff0080fd00feff018000180107c0eb0002a22380fd00fefffc00fefffc00feff0100001e0107c0eb0002888980fe000001fefffd000001fefffd000001feff010000200107c0eb0002a22380fe000303fffffefd000303fffffefd000503fffffe0000200107c0eb0002888980fe00030ffffffefd00030ffffffefd00050ffffffe0000220107c0eb0009a223800000019ffffffcfe0004019ffffffcfe0006019ffffffc0000220107c0eb000588898000000ffeff00f8fe00000ffeff00f8fe00000ffeff02f80000220107c0eb0005a2238000003ffeff00e0fe00003ffeff00e0fe00003ffeff02e00000220107c0eb000588898000007ffeff0080fe00007ffeff0080fe00007ffeff028000001b0107c0eb0004ffff800001fdfffe000001fdfffe000001fdfffe00210107c0eb00048001800007feff00fefe000007feff00fefe000007feff00fefe00210107c0eb00048001800007feff00fefe000007feff00fefe000007feff00fefe0021010640eb000487e180003ffeff00fefe00003ffeff00fefe00003ffeff00fefe001c010440eb000384218000fdff00c0fe00fdff00c0fe00fdff00c0fe001a010040eb000384218001fdfffe000001fdfffe000001fdfffd0020010040eb000384218007feff00f8fe000007feff00f8fe000007feff00f8fd0022010040eb0003bc3d801ffeff00e0fe00001ffeff00e0fe00001ffeff00e0fe00001f22010040eb00039009803ffeff00e0fe00003ffeff00e0fe00003ffeff00e0fe00003822010040eb00038811807ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe0000781d010040eb0002842180fdff00e0fe00fdff00e0fe00fdff00e0fe0000f81d010040eb0002824180fdff00c0fe00fdff00c0fe00fdff00c0fe0000f820010040eb00fe81feff00fefe000001feff00fefe000001feff00fefe000101f822010040eb0002800181feff00ecfe000001feff00ecfe000001feff00ecfe000101f822010040eb0002800181feff00b8fe000001feff00b8fe000001feff00b8fe000101f82001007fe9ff0083feff00f0fe000003feff00f0fe000003feff00f0fe000103f828050060007fffe2f12204400080018ffeff0080fe00000ffeff0080fe00000ffeff0080fe00010ff82805006040600048f18804c04080019ffeff0080fe00001ffeff0080fe00001ffeff0080fe00011ff828050060c0600062f1220440609fc1bffeff0080fe00003ffeff0080fe00003ffeff0080fe00013ff82505006140600048f18807c0509041bffffff8fd00033ffffff8fd00033ffffff8fd00013ff8250500627c600062f1220347c8907dfeff00f8fd00037ffffff8fd00037ffffff8fd00017ff82305006404600048f18803c4049045feff00f0fd00feff00f0fd00feff00f0fd0001fff82805006804600062f1220344029045feff00fcfe000001feff00fcfe000001feff00fcfe000201fff82805006804600048f18803c4029045feff00f8fe000003feff00f8fe000003feff00f8fe000203fff82805006404600062f1220344049fc5feff00f0fe000003feff00f0fe000003feff00f0fe000203fff8280500627c600048f18803c7c88405feff00e0fe00000ffeff00e0fe00000ffeff00e0fe00020ffff82805006140600062f1220340508405feff00c0fe00001ffeff00c0fe00001ffeff00c0fe00021ffff828050060c0600048f18807c0608405fffffec0fe00043ffffffec0fe00043ffffffec0fe00023ffff82805006040600062f12203404087fdfeff0080fe00007ffeff0080fe00007ffeff0080fe00027ffff823050060007fffc8f18803c0008001fefffe000001fdfffe000001fdfffe000301fffff81e01007fe7ff00fcfe000001feff00fcfe000001feff00fcfe000301fffff81d0000e6ff00f8fe000001feff00f8fe000001feff00f8fe000301fffff8350001feff00fefe000001feff00fefe000001feff00fefe000001feff00c0fe000001feff00c0fe000001feff00c0fe000301fffff8350007feff00fcfe000007feff00fcfe000007feff00fcfe000007feff00c0fe000001feff00c0fe000001feff00c0fe000301fffff8320007feff00f0fe000007feff00f0fe000007feff00f0fe000307fffffefd000301fffffefd000301fffffefd000301fffff8320007feff00e0fe000007feff00e0fe000007feff00e0fe000307ffffdcfd000301ffffdcfd000301ffffdcfd000301ffffd82c0007fefffd000007fefffd000007fefffd000307fffff8fd000301fffff8fd000301fffff8fd000301fffff82c0007fefffd000007fefffd000007fefffd000307ffffe0fd000301ffffe0fd000301ffffe0fd000301ffffe02f0307fffff8fd000307fffff8fd000307fffff8fd000307ffffe0fd000301ffffe0fd000301ffffe0fd000301ffffe02f0307ffff70fd000307ffff70fd000307ffff70fd000307ffffe0fd000301ffffe0fd000301ffffe0fd000301ffffe02f0307ffffe0fd000307ffffe0fd000307ffffe0fd000307ffffe0fd000301ffffe0fd000301ffffe0fd000301ffffe0ff}}\par \pard\plain \s3\qj\sb160 \f20 When you are finished experimenting, select Quit from the File menu, or type\par \pard\plain \s2\li720 \b\f22\fs20 bye\par \pard\plain \s3\qj\sb160 \f20 to quit Mops.\par \pard\plain \s254\sb240\keepn \b\f21 Private data\par \pard\plain \s3\qj\sb160 \f20 The values you assigned to "box" didn't just disappear after the rectangle appeared on the screen.  A key element of Mops is that the parameters you plug into an object (like the opposite corner points of box) won't be disturbed, even if you were to create a new rectangle, called "square" and assign it entirely different values.  You could create a hundred different rectangles with a hundred different names, locations, and sizes, and each rectangle object would hoard its own parameters as {\ul private} {\ul data}.  Both an object and its private data stay in memory until called upon.\par \pard\plain \s254\sb240\keepn \b\f21 A threaded language\par \pard\plain \s3\qj\sb160 \f20 Even though a Mops statement like "draw: box" is rather simple, it is referencing several other statements (called definitions) that have been predefined for you in the Mops dictionary (which is contained in Mops.dic).  When the statement "draw: box" is encountered, a chain reaction takes place inside the com\-puter, as one definition reaches back for previous definitions, which, in turn, reach back for further defini\-tions, until they reach Mops' primeval definitions at the very core\emdash kernel\emdash of the language.  And yet, far from being cumbersome and slow, Mops is performing these self references in machine language\emdash the fastest possible method of accessing information stored in memory.  This "reaching through" memory for all connections to a given definition is why Mops is called a "threaded language." \par \pard\plain \s254\sb240\keepn \b\f21 The Mops dictionary\par \pard\plain \s3\qj\sb160 \f20 You can think of the "definitions" we've been discussing so far as if they were definitions in a dictionary of any language.  The words are called {\ul Mops} {\ul words}, and you can always look up their definitions in the Mops Glossary, which is part of the Quick Edit editor.\par \pard \s3\qj\sb160 The Mops language is a complete, interactive dictionary of predefined Mops words.  When you double-click Mops.dic, the Mops dictionary is loaded into memory.  When you write a Mops program, you essentially add definitions of your own Mops words to the kernel (the new definitions apply only to the particular program you're writing.  For other programs you'll usually start with a fresh copy of the basic dictionary).  \par \pard \s3\qj\sb160 Unlike most procedural languages, which lock you into its vocabulary of step-by-step instructions, Mops lets you define one word to do the work of dozens of words.  The ability to create new commands as you create your program is called {\ul extensibility}, and you will find that many of the Mops words you define in your first few programs will be reusable in other programs.  This will help you reduce development time for succeeding projects and free up time for further exploration of the vast richness of the Macintosh environ\-ment.\par \pard \s3\qj\sb160 Mops comes with a large number of finished building blocks, called {\ul predefined} {\ul classes}.  As we'll see in the Tutorial, a class defines a type of object.  You have already used two of these classes: Class Rect and Class Window.  You will be using these and other predefined classes while learning Mops and later in writing your own programs.\par \pard\plain \s254\sb240\keepn \b\f21 Developing stand-alone applications\par \pard\plain \s3\qj\sb160 \f20 Mops can be used to produce stand-alone double-clickable applications, whose users won't need to concern themselves with what language the application was written in.  These users won't have or need access to the Mops dictionary and interpreter.  Instruc\-tions for this procedure are given in the Tutorial.\par \pard\plain \s254\sb240\keepn \b\f21 What your Mops system contains\par \pard\plain \s3\qj\sb160 \f20 Once you have installed the Mops system as described above, you will find several folders containing Mops files.  They are:\par \trowd \trgaph80\trleft-80 \clshdng0\cellx2440\clshdng0\cellx8560\pard\plain \sb120\intbl \f20 Mops \'c4 \cell \pard \sb120\intbl Essential files including:\line * The Mops kernel (Mops).\line * An image of a Mops dictionary with many of the predefined classes already loaded (Mops.dic).\cell \pard \intbl \row \trowd \trgaph80\trleft-80 \clshdng0\cellx2440\clshdng0\cellx8560\pard \sb120\intbl Mops source\cell \pard \sb120\intbl All the Mops source code.  There are various other folders inside here, as follows:\cell \pard \intbl \row \pard \sb120\intbl Nuc source\cell \pard \sb120\intbl Source files for the Mops nucleus (Mops itself). The listing and macros are in McAssembly format.\cell \pard \intbl \row \pard \sb120\intbl System source\cell \pard \sb120\intbl Source code for the basic Mops classes and other support code.\cell \pard \intbl \row \pard \sb120\intbl Toolbox classes\cell \pard \sb120\intbl Source code for Mops classes that interact with the Mac Toolbox.\cell \pard \intbl \row \pard \sb120\intbl Module source\cell \pard \sb120\intbl Source code for the Mops modules.\cell \pard \intbl \row \pard \sb120\intbl Asm source\cell \pard \sb120\intbl Source code for the Mops 68000 assembler.\cell \pard \intbl \row \trowd \trgaph80\trleft-80 \clshdng0\cellx2440\clshdng0\cellx8560\pard \sb120\intbl Demo folder\cell \pard \sb120\intbl Source files for demonstration programs used in the tutorial.\cell \pard \intbl \row \pard\plain \s3\qj\sb160 \f20 Most of the source code files in System, Toolbox, and Demo folders are provided not only for added documentation, but also if you want to recompile a modified version of Mops. A study of that code, along with the tutorial, will help you master the powers of Mops.\par Mops.dic (or MopsFP.dic)  is the predominant file you will be opening, just as you did earlier in this introduction. It contains the majority of the Mops words and predefined classes on which you will build programs.\par \pard\plain \s254\sb240\keepn \b\f21 The Bomb box\par \pard\plain \s3\qj\sb160 \f20 In the course of your experimenting with Mops, you will inevitably\emdash and perhaps unknowingly\emdash issue a command that the Mac doesn't understand.  While many such errors will bring an error message to the screen (each is explained in Appendix A), other will summon the system error box, sometimes called the "Bomb Box" because of the icon it displays.  Alternatively, if you have Macsbug installed, you might find that Macsbug has been entered and its display is on the screen.  If this happens, you will possibly be able to warm start back to Mops by typing {\b\f22\fs20 G 1E4 <return>}.  If you land straight back in Macsbug you'll have to reboot, by typing {\b\f22\fs20 RS <return>}.\par \pard \s3\qj\sb160 If you reboot, this will completely reset the computer, erasing from memory whatever you were working on.  It is a good idea, therefore, to save your work often\emdash a guideline you should follow in all your computer work.\par \pard \s3\qj\sb160 There will be other occasions when the computer will appear to "lock up."  It will be unresponsive to your keyboard or mouse actions.  In this situation you'll have to reset the machine to cause it to reboot.  Many Mac models have a Reset button which will do this.  Other models (e.g. IIsi) don't use a button, but use the command-control-power on key combination.  If the computer appears frozen, press the Reset button or the key combination, and this will function the same as turning your Mac off and on again.\par \pard \s3\qj\sb160 If you get the Bomb Box on the screen or lock up the computer, don't despair.  It happens to the most expe\-rienced Macintosh programmers (it happens to me a lot!).  Do your best to remember what you did to cause the problem and try to work out how to fix it.\par \pard\plain \s254\sb240\keepn \b\f21 Internet and Web info for Mops\par \pard\plain \s3\qj\sb160 \f20 If you have internet access, you'll find Mops discussion in the group comp.lang.forth.mac.  Feel free to dive in there.  Also note that I post a FAQ (frequently asked questions) list there every month or so.  See if you can read the latest version of that before emailing me with a problem, since a lot of questions people ask me are already answered there.  But feel free to email me with compliments at any time!!\par \pard \s3\qj\sb160 There's a Mops web page at <URL:http://www.netaxs.com/~jayfar/mops.html>.  This has links to the FAQ and the latest Mops version.\par \pard \s3\qj\sb160 For ftp, the latest version should be at:  taygeta.oc.nps.navy.mil, directory  pub/Forth/Mops\par \pard \s3\qj\sb160 Finally, if you do have to email me with a problem, remember to tell me what version you have!  My email address is  mikeh@zeta.org.au.\par \pard \s3\qj\sb160 \par \pard \s3\qj\sb160 Now let's move on with the Tutorial, and I hope you find you enjoy Mops.\par \pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 1\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 1\par \pard\plain \s254\sb240\keepn \b\f21 How to start up Mops\par \pard\plain \s3\qj\sb160 \f20 First, a reminder\emdash if you haven't done this already, you will need to compile up the full Mops system from the source.  The instructions for doing this are in the Intro, and also in the Readme.1st file.  The reason for this procedure is to reduce the size of the total package as much as possible, by not having to include all the compiled binary files.  So if you haven't already done so, please read the instructions and do what they say.\par \pard \s3\qj\sb160 To start Mops, if the "Mops \'c4" folder is not open, double-click its icon.  Double-click the icon labeled Mops.dic.  After a few seconds, the {\ul Mops} {\ul window} will appear on the screen, as in Figure\~I-1.  \par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw467\pich329\picscaled 134d00000000016902011101a10064000c574f5244000000000169020101000a0000000001690201980040000000000168020000000000016802000000000001680200000002c1000e007fe3ff00fef5ff00c0ef000004040070c200040060c200070340000060c5000703400000c0c5001ffe001180000f99800000f8198c0003060060000e30fd0004198c666318df001f1400000770000c01800000c0180c0003000060001930fd0003198c0603de00231f00000ff8000c198f0000c0f99e00030638f000183e1e333000199e666798f0e0e100231300000fe0000c19998000c1998c0003066460001cfe33083000198c6663199990e100231300000fe0000f19998000f1998c0003067060000efe33083000198c66631999c0e100231300000ff8000c199f8000c1998c00030638600007fe33083000198c666319f8e0e100231300000ff8000c19980000c1998c0003061c600003fe33083000198c6663198070e1002313000007f0000c19988000c1998c0003064c600013fe33082000198c6663198930e100231f00000360000c198f0000f8f9860003e63830000e331e3fc0000f06666198f0e0e10002c10002c10002c10002c10002c10004007fc2ff410200003ffeff00f8fe00003ffeff00f8fe00003ffeff00f8fe00003ffeff00f8fe00003ffeff00f8fe00003ffeff00f8fe00003ffeff00f8fe00009ffeff01f80006001fc3ff0080060010c30000c0060010c30000c0060010c30000c0110017e7ff00e0f900007feaff03f7ff7ec00e0010e100010660e80003041100c0140017e7ff00e0fc00030600007feaff03f4117eff140010e600073fe1e3e1c03e6380e90003041100c0150017e7ff00e0fd3304206666407feaff03f4117ec0110010e600fd3302806666e80003041100c0160017e7ff00e0fe330531c06666007feaff03f7f17ec0120010e600fe330330e06666e80003040100c01b0017efff01fd7ffbff00e0fe330032fe6601407feaff03f4017ec0190010ef00010180fa00073331e3e1c63e6380e90003040100c0190017efff01fddffbff03e0000003fc00007feaff03f7ff7ec00f0010ef000101e0f8000003e10000c00b0010ef000101f0d70000c00b0010ef000101f8d70000c00b007fefff01fdfdd7ff00c00d007fefff01fdfed9ff02c000c00d0078ef000101f0d900024000c00d0078ef000101b0d900024000c015047801c20002fc000020f900010118d900024000c014047802220002fc000020f8000018d900024000c0170b7802071e72420001cf3c7220f900000cd900024000ff170b7801c2228a8000022aa22220f900000cd900024000c0130b7800222283800003eaa22220d000024000c0130b78022226824000020aa22220d000024000c0130b7801c19a7a220001eabc19e0d000024000c00e0078f90002200020d000024000c00e0078f900022001c0d000024000c1080078c500024000c2080078c500024000c0080078c500024000c1080078c500024000c0080078c500024000c2080078c500024000c1080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000ff080078c500024000c0080078c500024000ff080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080058c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000ff080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080018c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000ff080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000ff080078c500024000c0080078c500024000ff080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080078c500024000c0080058c500024000c008001fc5ff02c000c0080010c500024000c0080010c500024000c0080010c500027fffc0080010c500024000c0080010c500024000c0080010c5000240c0c0080010c500024120c0080010c500024210c0080010c500024408c0080010c500024804c0080010c500025e1ec0080010c500024210c0080010c500024210c0080010c500024210c0080010c5000243f0c0080010c500024000c0080010c500024000c0080010c500027fffc0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c01a011078fe0005400004400410f20004038e39f7cee300024000c017017044fc0002040004f100040451410411e300024000c01d0e7044e39e0045803c438e10e58f5911f500034179e791e300024000c01d0670791455004640fe44041116516510f500038244104ee300024000c01e0e704514550044404444041114514110f600040104441051e300024000c01e0e704514550044404444041114534110f600040208451451e300024000c01e0e7044e3950044403c43c310e44d40f1f6000407df38e38ee300024000e00c0070f4000010d300024000c10c0070f40000e0d300024000c1080070c500024000e1080070c500024000c41e0370784004fd0002400010fe0002301011f700030e7df7cee300024000c01e0370440004fd0002400010fe0002401001f7000310410051e300024000c0261e704443ce3d638e00e38038e78038e01e11e3cf38058f58f38400001e79e051e300024000c0261e7044440445945100444011144044401111145044065165144000001104108ee300024000c0261e7044438445141f00444011144044401111144e7c04114517c0000011041111e300024000c02617704440444d14100044401114404440111114c14004134514fe000311451111e300024000c0261e707847833513cf0033800ce78038401111e35e3c040d44f3c400000e38e10ee300024000c0100070f7000004f6000010dc00024000c0100070f7000004f60000e0dc00024000c0080070c500024000c0080070c500024000c01d05707c01001004fe000002fb000010f80004038e38e38ee300024000c01d05701001001004fe000004fb000008f800040451451451e300024000c020117010e38f10078e3de00858e01e4563ce0440f8000351451451e300024000c01f0070fe110c10045145100865101145945104f700039145138ee300024000c0200070fe110c10045f45100845101145045f04f80004010f3cf451e300024000c02010701111131004504d10044510114d045008f800040201041451e300024000c021117010e0cd10044f35e00244e01e3503cf1040f9000407ce38e38ee300024000c0130070fb000001fd000310000040d400024000c0130070fb000001fd000310000380d400024000c0080070c500024000c0080070c500024000c020017040fe00070100404000400080fe000010f80004038e38e382e300024000c01f017040fe000601004040004001fd000008f800040451451446e300024000c020117040f58f38f38078438e48021e4563ce0440f800035144104ae300024000c020105041165145010044445150021145945104f800040191442092e300024000c01f10104114117ce10044445070021145045f04f700035144411fe300024000c02010104134114011004444504801114d045008f800040451448202e300024000c02111107cd40f3de0c078438f44009e3503cf1040f90004038e39f7c2e300024000c0120310000001f9000310000040d400024000c012031000000ef9000310000380d400024000c009011080c600024000c009011080c600024000c009011080c600024000c009011080c600024000c009011080c600024000c009011080c600024000c009011080c600024000c009011080c600024000c009011080c600024000c009011080c600024000c009011080c600024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080050c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080010c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500024000c0080070c500027fffc0080070c500024000c0080070c500024000c0080070c5000243f0c0080070c500024210c0080070c500024210c0080070c500024210c0080070c500025e1ec0080070c500024804ff080070c500024408c0080050c500024210c0080010c500024120c0080010c5000240c0c0080010c500024000c0080010c500024000c006001fc3ff00c00e0418001ffff8cb8804a0004000c00e041810180012cb220420204000c00e041830180018cb8804a0304fe0c00e041850180012cb220420284820c00e04189f180018cb8804a3e4483ec00d041901180012ca2203024822c00e041a01180018cb8804a2014822c00d041a01180012ca2203014822ff0e041901180018cb8804a2024fe2ff0e04189f180012cb220423e44202c00e041850180018cb8804a0284202c00e041830180012cb220420304202c00e041810180018cb8804a02043fec00e0418001ffff2cb220420004000c006001fc3ff00c006000fc3ff00c01c01007ffefffd00067fffff0000401ee90001080ff0000404000c0080240000feff00fefd00feff0300004002f8000080fb000004fa00010801f0000404000c0080380000feff00fcfd00feff1400004e023e7e10f18df810f7c10c40600000010002f90008013180000180c00060fd000080fd000404000c00803a0003feff00f8fe000003feff0f00004a0211221048d888311541040020fd000002fa00097e6f1b00000241200020fd000080fd000404000c00803d0007feff00f0fe000007feff1400004a0211202844a8801101021cc72c36cb3b19a1fa000f06e51519e3804021662318e60d19cc70fe000404000c00803d000ffeff00b0fe00000ffeff1400004e021e38284488e010e10224482815244124d1fa000f0dc91124940080408924a50906a49280fe000404000c00803d001ffeff00e0fe00001ffeff14000041c211207c44888010110224463015e4312491fa000f0ed11124930100808f279ccf04a49e60fe000404000c0080ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-1\par \pard\plain \s3\qj\sb160 \f20 As well as the Apple menu, you will see five menu titles.  You won't be using all of the menus right away, but ac\-quaint yourself now with the contents of each menu.\par \pard \s3\qj\sb160 The Apple menu contains the usual items.  The "about Mops" item causes the current version number of Mops to appear.  The File menu is much like the File menu in other applications, but with a special item (Load), which you'll use later for loading text files containing your program code.\par \pard \s3\qj\sb160 The Edit menu has the usual items\emdash cut, copy, paste and clear.  These can be used in the Mops window.\par \pard \s3\qj\sb160 The remaining menus, List, Show and Utilities, contain many operations that will be useful in the writing and de\-bugging of Mops programs.  These operations are detailed in Part II of this manual.\par \pard\plain \s254\sb240\keepn \b\f21 The Mops window\par \pard\plain \s3\qj\sb160 \f20 For now, ignore the top part of the Mops window.  In the lower part, you will see some informa\-tion about how much memory is available in different areas\emdash we'll be describing these values later.\par Below these lines, you will see a flashing cursor, as you might see in a word processor or text editor.  Type something, and you will see that this window is indeed a text editing window.  You may type and edit text here, as in any text editor.\par \pard\plain \s254\sb240\keepn \b\f21 The ENTER key\par \pard\plain \s3\qj\sb160 \f20 There is one important difference however, which we have already seen in the Introduction, and that is with the use of the Enter key.  In most text editors, Enter is treated the same as Return.  In Mops, however, Enter causes Mops commands to be executed.  We'll try this now.\par \pard \s3\qj\sb160 We said earlier that Mops behaves like a dictionary.  In other words, when you opened Mops.dic just now, the Mac automatically loaded the basic Mops vocabulary into its memory.  Each time you type a word\emdash any group of text characters\emdash and press Enter, Mops searches through its dic\-tionary for that word and carries out whatever instructions are associated with it.  If the word you type is not in the current Mops dictionary, a message appears on the screen to advise you that Mops could not find the word.  We'll try it in a moment.\par If you're familiar with another computer language, note that in Mops, as in other Forths, we use the word "word" in a different way to normal computer terminology.  A Mops "word" is any group of text characters, terminated by white space (a space, tab or carriage return).  In C you might say "if(a>b)foo(bar);" but in Mops that would be one word, because it contained no white space.  Characters which are punctuation or special characters in other languages can be part of a Mops word, since the only thing that terminates a word is a white space character.\par \pard \s3\qj\sb160 Now we'll demonstrate the difference between the Return and Enter keys.\par First type someone's name and press Return\par \pard\plain \s2\li720 \b\f22\fs20 michael <RETURN>\par \pard\plain \s3\qj\sb160 \f20 The line just sits there in the Mops window, exactly as if you'd typed it into a text editor.  Nothing else happens.  Now try it again, but this time use Enter:\par \pard\plain \s2\li720 \b\f22\fs20 michael <ENTER>\par \par \pard\plain \s8\li720 \f22\fs20 Error # -13 : undefined word\par qwqwqw\par       ^\par Current object:  TW    Class:  \par Stack: empty\par Return stack:  Depth 42 \par  9511662  $9122EE ?NOTFOUND   \par  9502140  $90FDBC NUMBER   \par  9522950  $914F06 INTERPRET   \par \pard\plain \s3\qj\sb160 \f20 A few things happened here.  Since you used Enter, Mops tried to interpret "michael" as a com\-mand.  The message coming back from Mops indicated that the name you typed in was unde\-fined.  This means that the name was not found in the dictionary\emdash in that split second, Mops compared the name against over 1100 words in the Mops dictionary.  Mops would also have beeped, indicating that something was wrong.\par \pard \s3\qj\sb160 And finally, the flashing cursor appears below the message lines, indicating that Mops is waiting for you to type another command.\par \pard \s3\qj\sb160 Now try typing the number 999, and then type Enter.  This time no message will appear from Mops\emdash it has simply accepted the number you typed in.  Where is it?  It has been placed on a {\ul stack}.  You'll be able to see it in the upper part of the Mops window, which is a display of the stack:\par \pard\plain \s8\li720 \f22\fs20 Stack:  depth 1\par 999\par \pard\plain \s3\qj\sb160 \f20 Now type the number 888 and type Enter.  You will see that it is placed {\ul on top of} the 999:\par \pard\plain \s8\li720 \f22\fs20 Stack:  depth 2\par 888\par 999\par \pard\plain \s3\qj\sb160 \f20 The stack depth is now two, since there are two numbers there.\par \pard \s3\qj\sb160 You can now change the {\ul numeric} {\ul base} that Mops is using.  Watch what happens when you change the base from decimal (the base that Mops starts in) to hexadecimal (hex for short).  Type\par \pard\plain \s2\li720 \b\f22\fs20 hex <ENTER>\par \pard\plain \s3\qj\sb160 \f20 The stack display should change to\par \pard\plain \s8\li720 \f22\fs20 Stack:  depth 2\par 378\par 3E7\par \pard\plain \s3\qj\sb160 \f20 The numbers on the stack didn't actually change, but are now being displayed in hex instead of decimal.  (If you are not very familiar with hex numbers, we give a fuller description in lesson 13.)  To change back to decimal, simply type\par \pard\plain \s2\li720 \b\f22\fs20 decimal <ENTER>\par \pard\plain \s3\qj\sb160 \f20 Now try the same thing, typing HEX and DECIMAL in upper case.  The results should be exactly the same.  That's because Mops makes no distinction between upper and lower case let\-ters when it comes to words in its dictionary.  Internally, everything is converted to upper case.  \par Now type an undefined word again.  The error message lines will again appear, but also notice that the stack becomes empty.  This is another part of the Mops error handling\emdash the stack is emp\-tied on an error.\par \pard\plain \s15\qc\sb720 \f20 End of lesson 1\par \pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 2\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 2\par \pard\plain \s254\sb240\keepn \b\f21 More about the stack\par \pard\plain \s3\qj\sb160 \f20 Type the numbers 7, 4 and 1 on one line with a space between them, thus:\par \pard\plain \s2\li720 \b\f22\fs20 7 4 1  <ENTER>{\plain \f22\fs20 \par }\pard\plain \s3\qj\sb160 \f20 After you press Enter, the stack display should now appear thus:\par \pard\plain \s8\li720 \f22\fs20 Stack:  depth 3\par 1\par 4\par 7\par \pard\plain \s3\qj\sb160 \f20 The space you typed between the three digits told Mops that you intended those three digits to be three different numbers.  (You can equally well use two or more spaces, or the tab key.)  If you had typed 741 instead, then the single number 741 would have been put on the stack.  Understanding the way these numbers are entered and stored on the stack is of utmost impor\-tance at this stage of learn\-ing Mops.\par \pard \s3\qj\sb160 The best way to demonstrate how a stack works is to summon the often-cited analogy of the springloaded pile of dishes you encounter in a cafeteria line.  If you place one plate on the spring, it is obviously the first one that will come off the top.  But if you place a second plate on top of the first, the weight of the second plate pushes the first one down one step, and the second plate is the one that will be picked up by the next customer in line.  In other words, the last one put on the stack is the first one to be taken off the stack.\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw329\pich76 072700000000007a01491101a10064000c574f524400000000007a014901000a00000000007a014998002a008b00a6010401f6008b00a8010401f00000000000790148000002d7000ade000678811f3c0287000ade0006448104200fc8800ade0006448284200500800bdf00070c448284381f81000bdf00077c788444200a02000ce0000803f84087c4200004000ce000081fc0408444200008000ce00008fe0040f4443c000f8007e1000103f0f90008e20002801f80f90007e20001c0fef8000bf8000001ec0001f7f0f8001a0a1e2047cf00a0800000018ffaff03fe180006f80001ff80f8001b0a1120410803f180000001c4fa88048c2000011ffaff01fcfcf7001b0a1120a1080140807fffffe2fa4404484000008cfa440148fcf7001b0a1120a10e07e0807fffffe1fa22043040000086fa220130fef7001c0b1e211108028080000001c091fb11042040000083fa11012040f7001c0b1021f108000080000001807ffbff04c040000081fa8801c040f7001a0a10211108000080000001bff9ff034000009ffaff01fc40f7001a06103d110f000080fe0000b5f955034000008afa22012840f70011f700f9aa04ab40000085fa110110fef70012f70000b5f9550340000082fa8801a0fcf70011f700f9aa04ab40000081fa440140fcf70013f70000bff9ff0340000080faff0280ff80f80016f70002802ea0fd0005ba80400000bff9ff01f7f0f80016f70002802060fd00048180400000f9aa02abc0fef80017f70002802060fd00058180400000b5f95502c01f80f90017f70002802fa0fd0004be80400000f9aa03ab4003f0f90017f700028031a0fd0005c680400000b5f955024000fef9001df70002802ea0fd0005ba80400000bff9ff0a40001fc078811f3c02820021f70002802060fd00078180400000802fa0fd000cbe80400003f8448104200fc60021f70002802060fd000781804000008031a0fd000cc6804000007c4482842005020021f70002802fa0fd0007be80400000802ea0fd000cba804000000c448284381f820021f700028031a0fd0007c6804000008031a0fd0002c68040fe0006788444200a020021f70002802ea0fd0007ba80400000802ea0fd0002ba8040fe00064087c42000020021f70002802060fd00078180400000802060fd0002818040fe00064084442000020021f70002802060fd00078180400000802060fd0002818040fe000640f4443c00020019f70002802fa0fd0007be80400000802fa0fd0002be8040f70019f700028031a0fd0007c6804000008031a0fd0002c68040f70019f70002802ea0fd0007ba80400000802ea0fd0002ba8040f70019f70002802060fd00078180400000802060fd0002818040f70019f70002802060fd00078180400000802060fd0002818040f70019f70002802fa0fd0007be80400000802fa0fd0002be8040f70019f700028031a0fd0007c6804000008031a0fd0002c68040f70019f70002802ea0fd0007ba80400000802ea0fd0002ba8040f70019f70002802060fd00078180400000802060fd0002818040f70019f70002802060fd00078180400000802060fd0002818040f70019f70002802fa0fd0007be80400000802fa0fd0002be8040f70019f700028031a0fd0007c6804000008031a0fd0002c68040f70019f70002802ea0fd0007ba80400000802ea0fd0002ba8040f70019f70002802060fd00078180400000802060fd0002818040f70019f70002802060fd00078180400000802060fd0002818040f70019f70002802fa0fd0007be80400000802fa0fd0002be8040f70019f700028031a0fd0007c6804000008031a0fd0002c68040f70019f70002802ea0fd0007ba80400000802ea0fd0002ba8040f70019f70002802060fd00078180400000802060fd0002818040f70019f70002802060fd00078180400000802060fd0002818040f70011f700007ff9ff038000007ff9ff0080f70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d70002d7000fee00020ff8c0fc000310003fc0f6000fee00020ff8c0fc000330003fc0f6000eee00010618fb0003700030c0f6000eee00010618fb000370003180f60010ee000a0601c3fb9cfe3e00300003f50010ee000a0601c7fb9cff7f00300006f50011ee000b07c0c6318c63630030000f80f60011ee000b07c0c6318c606300307f0fc0f60011ee000b0600c6318c607f00307f00c0f60011ee000b0600c6318c607f00300000c0f60011ee000b0600c6318c606000300000c0f60011ee000b0600c6318c606300300030c0f60011ee000b0f01e7f1fef07f0078003fc6f60011ee000b0f01e3f0fef03e0078001f86f60006eb000030ee0007ec00010630ee0007ec000107f0ee0007ec000103e0ee0002d700ff}}\par \pard\plain \s3\qj\sb160 \f20 You can see that this principle applies to the Mops stack, since the number 7, which you entered first, is at the bottom of the stack, while the number 1, which is the most recent entry, is at the top.\par \pard \s3\qj\sb160 How can you remove numbers from the stack?  One way is to use the Mops word that does the reverse of what you did when you entered a number\emdash it takes a number off the stack, and "types" it in the lower part of the screen, at the flashing cursor position.  That word is a simple period (.), called "dot."  Type this now.\par \pard\plain \s2\li720 \b\f22\fs20 .  <ENTER>\par \pard\plain \s8\li720 \f22\fs20 1\par \pard\plain \s3\qj\sb160 \f20 What happened here was that the dot (type to screen) command pulled the 1 off the top of the stack and "typed" it.  The stack display will show that two numbers are still on the stack.  In other words, whenever you perform a dot operation on a number in the stack, the number is removed from the stack and "typed"\emdash that is, displayed in the current window.  If the Mops win\-dow is the current window, as it is here, any number "typed" will appear at the cursor position, just as if you had typed it at the keyboard.\par \pard \s3\qj\sb160 To get the remaining numbers off the stack, you need to issue two more dot commands.  Just as you could put two different numbers onto the stack by typing a space between them on one line, so you can issue multiple commands on one line, provided you put at least one space between each command.  If you fail to put the required space there, Mops thinks that the string of charac\-ters is a single Mops word\emdash perhaps a word that Mops cannot find in its dictionary.  In Mops, one or more spaces or tabs are separators between words (which means, of course, that you can't have a Mops word with a space or tab in it).\par \pard \s3\qj\sb160 To bring the cursor to the left margin, where it will be less confusing, simply press Return once.  Remember that this won't try to execute anything\emdash it will just start you on a new line in the Mops window.  Now type two periods, with a space in between, and press Enter:\par \pard\plain \s2\li720 \b\f22\fs20 . .  <ENTER>\par \pard\plain \s8\li720 \f22\fs20 4 7\par \pard\plain \s3\qj\sb160 \f20 Mops has now printed the two remaining numbers in the order in which they came off the stack.  Remember that the 7 was at the bottom of the stack; it was therefore the last number off the stack, and was displayed on the screen as the final item before the Mops prompt reappeared.  Multiple dot commands, as you see, leave a trail of numbers off the top of the stack from left to right across the screen.  And notice, too, that nothing remains in the stack when the last dot command has been executed.\par Mops also has a word, .s (dot s), that displays a list of all numbers on the stack without removing them.  This can be useful during the running of a program, since you may not want to stop the program to see the stack displayed at the top of the window.  Also, there may be more items on the stack than can fit in the display.  The stack can hold far more items than we have room to display at the top of the window, but if you use .s, {\ul all} the stack items will be typed in the lower part of the window.\par \pard \s3\qj\sb160 To see how it works, place the same three numbers on the stack (don't forget the spaces):\par \pard\plain \s2\li720 \b\f22\fs20 7 4 1   <ENTER>\par \pard\plain \s3\qj\sb160 \f20 And when you type .s, your screen will look similar to this:\par \pard\plain \s2\li720 \b\f22\fs20 .s  <ENTER>\par \pard\plain \s8\li720 \f22\fs20 Stack:  Depth 3 \par        1  $     1    \par        4  $     4    \par        7  $     7    \par \pard\plain \s3\qj\sb160 \f20 The numbers to the left of the dollar sign are the decimal values, while the numbers to the right are the hexadecimal values.  The dollar sign in this list is a hex indicator.  In this case, it happens that the stack numbers in both bases are the same.  Note, too, that the three numbers are still on the stack.  The regular dot command displays and removes them while .s simply takes a snapshot of them.\par \pard \s3\qj\sb160 Experiment with the operation of the stack by putting numbers on the stack, viewing them with the .s opera\-tion, and taking them off by printing them to the screen, either one at a time or in a series.  As an added shortcut, you can use the CR command, which is short for "carriage return," after a dot command.  If you type a "CR" as a command after one or more dot commands (remember to type a space between the last pe\-riod and the CR), the Mops prompt returns to the left margin of the next line.  For example:\par \pard\plain \s2\li720 \b\f22\fs20 1 10 100  <ENTER>\par . . . CR  <ENTER>\par {\plain \f22\fs20 100 10 1\par }\pard\plain \s3\qj\sb160 \f20 If you accidentally issue one more dot command than you have entries on the stack, Mops will send you a message (along with the alert beep) that the stack is empty.  Try it.  No harm will occur.\par \pard \s3\qj\sb160 The stack is also called the parameter stack, because a good many operations in Mops require that one or more values be present on the stack before the operation can be performed.  These values, in computer jargon, are called {\ul parameters}, and they are said to be {\ul passed}, or handed to, an operation.  Actually, the operation looks to the stack for the number(s) it needs, and pulls them off.\par \pard \s3\qj\sb160 You saw a glimpse in the last section of how parameters work, when the parameter stack held values that were to be printed to the screen.  The parameter stack, in other words, is a kind of holding box for values that many operations rely on.  This concept will become clearer as we now discuss how Mops performs arithmetic.\par \pard\plain \s254\sb240\keepn \b\f21 Arithmetic and the stack\par \pard\plain \s3\qj\sb160 \f20 If you've ever used a Hewlett-Packard calculator, you are already familiar with keying in two values and then pressing the key that bears the symbol of the desired operation, such as + for addition or * for multipli\-cation.  You're actually utilizing a stack-type computer when you do this.\par \pard \s3\qj\sb160 For those who have never touched an HP machine, the steps to add 2 and 7 go like this.  First press the 2 key.  The 2 is placed on the top of the stack.  Then press the Enter key.  This pushes the 2 one cell deeper into the HP calculator's stack, a place in the calculator's memory where val\-ues are temporarily held until they are needed for an operation.  Then press the 7 key, which places the 7 on the top of the stack.  Finally, press the + key, which reads each value from the stack (first the 7, then the 2) and adds them.  The answer, 9, appears both in the display and on the top of the stack, ready for further operations, if desired.\par \pard \s3\qj\sb160 Mops works very much the same way.\par \pard \s3\qj\sb160 The step-by-step approach to add two numbers would be to put each number on the stack one at a time, and then press the + key as follows.  (Remember to type Enter at the end of each line so that Mops will interpret these lines as commands.  We'll assume this from now on, without say\-ing so.)\par \pard\plain \s2\li720 \b\f22\fs20 7\par 2\par +\par .\par {\plain \f22\fs20 9} cr\par \pard\plain \s3\qj\sb160 \f20 Let's follow what happened here.  You should already understand how the stack counter incre\-ments each time you type a number and press Enter.  In the third line, you type the operation, the + sign for addition.  When you press Enter, the computer calculates the sum for you.  Mops stores the sum on the stack\emdash you will see one value, 9, on the stack at this point.  Note, too, that the original numbers were taken off the stack by the addition operation.  To type out the contents of the stack, and the result of your addition, you must issue the dot command.\par \pard \s3\qj\sb160 Mops lets you perform all these manipulations in a simpler form\emdash as a single line of instructions, with at least one space between each element.  Here's how it looks:\par \pard\plain \s2\li720 \b\f22\fs20 7 2 + . cr\par \pard\plain \s8\li720 \f22\fs20 9\par \pard\plain \s3\qj\sb160 \f20 The line of instructions contains the same commands as the step-by-step method, but is much easier to type in.  The only thing you miss along the way is a step-by-step view of the stack.  But after all, it's the answer that should be important, not the momentary contents of the stack.\par \pard\plain \s15\qc\sb720 \f20 {\fs0 End of lesson 2\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 3\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 3\par \pard\plain \s254\sb240\keepn \b\f21 Stack notation\par \pard\plain \s3\qj\sb160 \f20 Before we go further, you should become acquainted with a special notation that tells someone who's read\-ing your program listing what's happening on the stack before and after a command.  The format is: \par \pard\plain \s8\li720 \f22\fs20 ( before -- after )\par \pard\plain \s3\qj\sb160 \f20 The arrangement of values on the stack is shown both before and after the operation (note the space between the opening parenthesis and the start of the description).  The actual operation is implied by the double-hy\-phen.  Therefore, in an addition operation\emdash just the + operation, not the extra stuff to display it and move the Mops prompt\emdash you have two numbers on the stack before the operation, and you end up with a single number, the sum of those numbers, on the stack after the operation.  That is, you start with n1 and n2 on the stack and end with the sum on the stack.  The stack notation looks like this:\par \pard\plain \s8\li720 \f22\fs20 ( n1 n2 -- sum )\par \pard\plain \s3\qj\sb160 \f20 This, therefore, is the description for the addition operation.  \par For the dot command, the description is:\par \pard\plain \s8\li720 \f22\fs20 ( n -- )\par \pard\plain \s3\qj\sb160 \f20 because this command takes the topmost value from the stack and displays it on the screen.  The value is removed from the stack in the process, leaving no trace of it after the operation.\par \pard \s3\qj\sb160 In the CR command, there is nothing happening to values in the stack.  It simply moves the prompt to the left margin of the next line.  Because no stack operations are involved, the CR commands notation, then, is:\par \pard\plain \s8\li720 \f22\fs20 ( -- )\par \pard\plain \s3\qj\sb160 \f20 The definition of every Mops word you define in a program should be accompanied by its stack notation.  (Our convention is that we may omit the stack notation if it is ( -- ), but only in this sit\-uation.)  Thumb through the Glossary in Part IV of this manual to see how we have noted the stack actions of all the words in the Mops dictionary.  While the notation will at first help you learn how Mops words work, it will also help you later when you start writing programs in an editor.  The words and numbers in parentheses (with at least one space after the opening paren\-thesis) are not compiled into the program, so they won't add one byte to the size of your final program.  The notations are there to aid you in tracing your program if you run into a snafu dur\-ing program development.  All in all, the stack notation is a handy shortcut to docu\-menting your programs.\par \pard \s3\qj\sb160 Note: Since anything in parentheses (i.e., starting with an open parenthesis followed by one or more spaces) is ignored by Mops, you don't have to type stack notation for words you define at the Mops prompt.  Stack notation is strictly an aid for reading source code.  In this tutorial, we often show the stack notation for words you define.  The notation is presented to help you better understand the definition and show you how your definitions should look once you begin writing your own programs in an editor.\par \pard \s3\qj\sb160 Here are Mops stack descriptions of the four basic arithmetic operations:\par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 +\tab ( n1 n2 -- sum )\tab Adds n1+n2 and leaves the sum on the stack.\par - \tab ( n1 n2 -- diff )\tab Subtracts n1-n2 and leaves the difference on the stack.\par *\tab ( n1 n2 -- prod )\tab Multiplies n1*n2 and leaves the product on the stack.\par /\tab ( n1 n2 -- quot )\tab Divides n1/n2 and leaves the quotient on the stack.\par \pard\plain \s3\qj\sb160 \f20 To newcomers, the stack order\emdash the way in which numbers come out in the reverse order\emdash may be con\-fusing when it comes to subtraction and division, because in those operations, the order of the numbers is critical.  If you want to subtract 4 from 10, you want to make sure that those numbers come out of the stack in the correct order for the subtraction operation to work on them.  Fortunately, Mops saves you from per\-forming all kinds of mental gymnastics in the process.  \par \pard \s3\qj\sb160 In the kind of arithmetic notation you learned in school, you write the problem like this:\par \pard\plain \s2\li720 \b\f22\fs20 10 - 4\par \pard\plain \s3\qj\sb160 \f20 and get the desired answer, 6.  In Mops arithmetic, the order of the numbers going on the stack is the same.  All you do is move the operation sign to the right.  The problem becomes:\par \pard\plain \s2\li720 \b\f22\fs20 10 4 -\par \pard\plain \s3\qj\sb160 \f20 The same goes for division.  The formula for dividing 200 by 25  changes from\par \pard\plain \s2\li720 \b\f22\fs20 200 / 25    {\plain \b\f20 to}    200 25 /\par \pard\plain \s3\qj\sb160 \f20 The four basic arithmetic operations are usable only on {\ul integers}, that is, whole numbers like -2, 0, 3, -453, and 1002.  Numbers with digits to the right of the decimal don't count.  Don't worry, however, because Mops has plenty of ways to handle all kinds of numbers, as you'll see later on.\par Experiment using the four simple arithmetic operations.  Place one, two, three, and four integers (or more if you like) in the stack to understand how the operations make use of the numbers in the stack.  Try them out now, and pay special attention to answers to division problems.  \par \pard \s3\qj\sb160 Everything should have worked well, except when you divided numbers that were not even mul\-tiples of each other.  For example, if you divide 10 by 3, the Mops answer is 3.  \par \pard\plain \s2\li720 \b\f22\fs20 10 3 / . CR\par \pard\plain \s8\li720 \f22\fs20 3\par \pard\plain \s3\qj\sb160 \f20 When you use the divide operation (/) in Mops, the remainder is lost forever.  But Mops has two other oper\-ations that take care of the remainder for you.  \par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 /MOD\tab ( n1 n2 -- rem quot )\tab Divides n1 by n2 and then places the quotient and remainder on the stack.\par MOD\tab ( n1 n2  -- rem )\tab Divides n1 by n2 and then places only the remainder on the stack.\par \pard\plain \s3\qj\sb160 \f20 Try out the 10-divided-by-3 example again, but this time using the /MOD operation instead of straight divi\-sion (Remember! Mops does not distinguish between upper and lower case).\par \pard\plain \s2\li720 \b\f22\fs20 10 3 /mod . . cr\par \pard\plain \s8\li720 \f22\fs20 3 1\par \pard\plain \s3\qj\sb160 \f20 Notice now that both the quotient (3) and remainder (1) were returned to the stack (and subse\-quently printed out by two dot commands).  Notice also the order of the two answers as they came out of the stack and how the order compares with the order of the /MOD stack notation above.  The rightmost value in the stack defi\-nition, the quotient, was on the top of the stack and was therefore the first one to be printed out on the dis\-play.\par \pard \s3\qj\sb160 Division involving negative numbers can be done in two different ways.  In Mops we use the convention used by the Macintosh hardware, namely "towards zero" division.  If the exact quo\-tient isn't an integer, the quotient that the division operation gives will be the next integer to\-wards zero.  For example, -10 divided by 7 will give a quotient of -1, with a remainder of -3.  The remainder will always have the same sign as the dividend (the first operand), unless it is zero.\par \pard\plain \s254\sb240\keepn \b\f21 Mastering postfix notation\par \pard\plain \s3\qj\sb160 \f20 If you're not particularly well versed in this reverse notation, called {\ul postfix} {\ul notation}, then it is important to recognize that complex math formulas need to be analyzed before they can be entered into Mops's postfix, integer arithmetic environment.  For example, you may find yourself confronted with having to include the following formula in a Mops program:\par \pard\plain \s8\li720 \f22\fs20 {\ul 1.25 * 12 * 50}\par \pard \s8\li720       10\par \pard\plain \s3\qj\sb160 \f20 If so, then Mops's integer arithmetic might seem like a stumbling block, and its postfix notation may seem worthless.  But call upon simple algebra to convert everything to integers, and break up the complex for\-mula into the same steps you would use to solve it with a pencil and paper.  The Mops equivalent of this formula is:\par \pard\plain \s8\li720 \f22\fs20 5 12 50 * * 40 /\par \pard\plain \s3\qj\sb160 \f20 It's worth following what happens to the stack during a complex formula like this.  First of all, to make the 1.25 an integer, multiply it and the denominator by four.  Then put all three numbers to be multiplied into the stack.  The first multiplication operation multiplies the topmost two num\-bers (50 times 12) leaving the result (600) on the stack.  That leaves 600 on the top of the stack, and 5 below it.  The second multiplication operation multiplies the two numbers remaining on the stack (600 times 5) and leaves the result (3000) on the stack.  This result is the dividend (numerator) of the division about to take place. Now it's time to put the divisor (40) on top of the stack.  Then the final operation, the division, divides the two numbers in the stack.  \par \pard \s3\qj\sb160 Don't be discouraged by all this concern over the stack.  You'll learn in a later lesson that Mops provides you with two powerful tools\emdash named input parameters and local variables\emdash that let you substitute readily identifiable names for the values on the stack and use them at will.  The stack will become almost invisible to you.  It is important, however, to understand the stack fundamen\-tals just the same.{\fs0 \par }\pard\plain \s15\qc\sb720 \f20 {\fs0 End of lesson 3\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 4\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 4\par \pard\plain \s254\sb240\keepn \b\f21 Mops and OOP\par \pard\plain \s3\qj\sb160 \f20 Armed with a basic knowledge of Mops's stack, you're now ready for an introduction to the lan\-guage's real power: its OOP (object-oriented programming) nature.\par OOP is such a popular topic these days, that a long introduction is probably unnecessary, so this introduction will be slightly briefer than in earlier versions of this manual.\par \pard \s3\qj\sb160 The primary terms to concern yourself with at this point are:\par \pard\plain \s8\li720 \f22\fs20 CLASS\par METHOD\par OBJECT\par MESSAGE\par SELECTOR\par \pard\plain \s3\qj\sb160 \f20 To help you visualize the "big picture" of an object oriented system and what the relationships are among all the parts, we'll use an analogy.\par \pard\plain \s254\sb240\keepn \b\f21 Methods and Inheritance\par \pard\plain \s3\qj\sb160 \f20 Let's say you want to hire an accountant to prepare your income tax return.  As a {\ul class} of profes\-sionals, all accountants have a certain basic knowledge about accounting and manipulating fig\-ures.  It is their funda\-mental job to adhere to generally accepted accounting principles when working on the financial records of a client.  The {\ul methods} they all use include calculating fig\-ures, cross-footing entries, checking calculations a second time, placing parentheses around neg\-ative numbers in a ledger, and so on.\par But within that universe of all accountants, there are specialists.  Some devote themselves to cor\-porate tax work, others to accounting for self-employed professionals, such as doctors.  No mat\-ter what the specialty, each shares the same fundamental knowledge of accounting as their col\-leagues in other specialties.  That is, by virtue of being related to the {\ul class} of accountants in gen\-eral, they {\ul inherit} many of the characteristics of all accountants.  Most of their {\ul methods} may even be the same, such as double-checking figures, using paren\-theses, and the like.  \par \pard \s3\qj\sb160 But some of their methods may be different.  For example, one kind of accountant may specialize in han\-dling financial records for corporations whose annual sales are in excess of $5 million.  Another subgroup may do all kinds of accounting work, but its methods involve calculating the final tax form on a computer instead of calculating and writing entries by hand.  In the case of each of these subgroups, their predominant methods are the same, but with minor variations in certain methods.  Therefore, while each subgroup\emdash {\ul subclass}\emdash of specialty accountants is a class unto itself, each retains many ties to the larger class of all ac\-countants.  \par \pard \s3\qj\sb160 A yet smaller segment of a subclass of accountants, however, can have its own special methods.  For exam\-ple, there could be a small subclass (actually a subclass of a subclass) of computerized accountants who bring a portable computer along and perform the work only at the client's place of business.  But even this sub-subclass can trace its methods back through all levels of the {\ul class} {\ul hierarchy}, which might look like the one in Figure\~I-2.\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw443\pich190 0df20000000000bf019c1101a10064000c574f52440000000000bf019c01000a0000000000bf019c9800340000000000be01a00000000000be019b0000000000be019b000102cd0002cd0002cd0002cd0002cd0002cd000aef000007f4ff00c0ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee0013ef00040400c73806fd0005180006000040ee0013ef00040400c31806fd0005180006000040ee0014ef000e0401e3180f1c71c6cf3ce3cf380040ee0014ef000e0401e3180f36db66cd99b3666c0040ee0014ef000e0403331819b0c366cd98f366380040ee0014ef000e0403f3181fb0c366cd99b3660c0040ee0014ef000e0403331819b6db66cd99b3666c0040ee0014ef000e04033318199c71c3cd8cf363380040ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee000aef000004f4000040ee000aef000007f4ff00c0ee0006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e70006e8000018e7000afa00000fddff00f0fa000afa00000fddff00f0fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa0012fa00000cf6000030f6000006f5000030fa00170000f6ff01c007f7ff02fe003ff7ff01f001f6ff01800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f600018000330700800000f800019cfd000440040001e0fd000706000002002000c0fe0008030000c000100101e0fe00070c00030000608000320700800000c000000cfd00044004000330fd000706000002002000c0fe0008030000c00010010330fe00000cfd0002608000350800800000c1c7f38c6cfe002740040003038f9e38f9cf380002002001e38e38d9e79c79e700100103038fe3c6de71f73e71e08000350800800000f366d98c6cfe00274004000306ce1b6ce3666c0002002001e6db6cd9b3366ccd8010010306cdb366ccd9c306db608000350800800000c1e6d98c6cfe00274004000306cc1b6cc1e67c000200200336186cd9b31e6cc70010010306cdb366ccf9830cfb608000350800800000c366d98c6cfe00274004000306cc1b6cc366600002002003f6186cd9b3366cc18010010306cdb366ccc18318c3608000350800800000c366d98c6cfe00274004000336cc1b6cc3666c000200200336db6cd9b3366ccd8010010336cdb366ccd98330db608000350800800000c1e6d98c3cfe002740040001e38c1e38c1e3380002002003338e3879b19e6c6700100101e38db3c3c671833e71e0800024010080fb00000cfe00014004fd000018fc0002020020f700011001fe000003fa0001800024010080fb000038fe00014004fd000018fc0002020020f700011001fe000003fa0001800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f6000180002d010080fe00007efb000340040030fd0006c0003000020020fd000070fc000310010006fd0006180006000080002d010080fe000018fb000340040030fd0006c0003000020020fd0000c0fc000310010006fd00061800060000800033010080fe0002187330fd000e40040078e38e3679e71e79c0020020fe000201e71ffd000e1001000f1c71c6cf3ce3cf3800800032010080fe000218d9e0fd000e40040079b6db366ccd9b3360020020fd0001cd9cfd000e1001000f36db66cd99b3666c00800032010080fe00021878c0fd000e400400cd861b366cc79b31c0020020fd0001cd98fd000e10010019b0c366cd98f3663800800032010080fe000218d8c0fd000e400400fd861b366ccd9b3060020020fd0001cd98fd000e1001001fb0c366cd99b3660c00800032010080fe000218d9e0fd000e400400cdb6db366ccd9b3360020020fd0001cd98fd000e10010019b6db66cd99b3666c00800032010080fe0002187b30fd000e400400cce38e1e6c679b19c0020020fd0001c718fd000e100100199c71c3cd8cf3633800800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f6000180001b010080f700044004000018fa0002020020f700011001f6000180002c02008018fd001f6000180000400400003c7e00019ce300000200203e0000e00003000007001001f6000180002b02008018fd00176000180000400400007e6000000c60000002002033000180fd000303001001f6000180002d2600803c71c71b3cf38f3ce00040040180786007f38c671c78020020333e73ce38e71c78e31c1001f6000180002d2600803cdb6d9b3666cd99b000400400c0387c06d98c63366c0200203338d99b6db3366db3361001f6000180002d26008066c30d9b3663cd98e000400400601c0606d98c63366c0200203e30d99f38e3366cf31c1001f6000180002d2600807ec30d9b3666cd983000400400c01e0606d98c63366c0200203030d9980c33366db3061001f6000180002d26008066db6d9b3666cd99b000400401807e6606d98c63366c0200203030d99b6db3366db3361001f6000180002d2600806671c70f3633cd8ce000400400003c3c06d98c631c6c0200203030718e38e31c6cf31c1001f6000180001b010080f700044004000018fa0002020020f700011001f60001800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f60001800018010080f700014004f70002020020f700011001f600018000170000f6ff01c007f7ff02fe003ff7ff01f001f6ff01800006d5000018fa0006d5000018fa0006d5000018fa0006d5000018fa0006d5000018fa0006d5000018fa0006d5000018fa0006d5000018fa0006d5000018fa0006d5000018fa0006d5000018fa0006d5000018fa0006d5000018fa0006d5000018fa0007da00f6ff01c00009da000080f70001400009da000080f70001400009da000080f70001400009da000080f70001400009da000080f70001400010da000780003e00018030e0fe0001400010da00078000330001803060fe0001400010da000c80003338fbce3c63800000400010da000c8000336ce19b3666c00000400010da000c80003e6cc18f3667cf8000400010da00078000306cc19b3666fe0001400010da000c8000306cc19b3666c00000400010da000c80003038c0cf3c63800000400009da000080f70001400009da000080f70001400009da000080f70001400009da000080f70001400009da000080f70001400010da000180f0fe000706000180003040000fda00018198fe000006fd000230400010da000c8181c7f1e36f38fb9f38f0400010da000c818366d9b3666ce1836db0400010da000c818366d9b3667cc1867db0400010da000c818366d9b36660c18c61b0400010da000c819b66d9b3666cc1986db0400010da000c80f1c6d9e1e338c19f38f040000dda00048000000180fb000140000dda00048000000180fb0001400009da000080f70001400009da000080f70001400009da000080f7000140000fda00018003fd00060c0003000040000fda00018003fd00060c00030000400010da000c80078e38e3679e71e79c00400010da000c80079b6db366ccd9b33600400010da000c800cd861b366cc79b31c00400010da000c800fd861b366ccd9b30600400010da000c800cdb6db366ccd9b33600400010da000c800cce38e1e6c679b19c00400009da000080f70001400009da000080f70001400009da000080f70001400009da000080f70001400009da000080f70001400009da000080f70001400009da000080f70001400007da00f6ff01c00002cd0002cd0002cd0002cd0002cd0002cd0002cd00ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-2\par \pard\plain \s254\sb240\keepn \b\f21 Objects and Messages\par \pard\plain \s3\qj\sb160 \f20 So far, we've been talking only about classes of accountants, not the actual people who do the work.  The accountant you select to do your taxes, say his name is John, would fall into one of the subclasses that best meets your particular tax needs.  For the sake of this example, let's say that John is a member of the class of accountants that works with family tax planning and tax return preparation.  In other words, John is an "instance", or an actual, physical example\emdash an {\ul object}\emdash of the class of family tax accountants.  When you summon John to do your taxes, he automatically brings with him the ability to perform all the accounting and tax preparation meth\-ods that belong to the specialty subclass he belongs to, as well as all the methods he inherits by belonging to a hierarchy of accountant classes.  He may not have to summon absolutely every method for your tax job, but they're in his background just the same (see Figure\~I-3).\par \pard \s3\qj\sb160 To get John going on your tax return, you give him the appropriate instructions, including all the figures he needs and the final go ahead.  In other words, you give him the {\ul message}, "prepare the tax return based on my figures."\par \pard \s3\qj\sb160 When John receives this message, he knows that the figures you provide are the parameters to be passed to the methods he will be using to calculate your taxes.  He also knows, according to the methods in his back\-ground, that "prepare the tax return" means he should do certain things, like organize the figures, obtain copies of each tax form necessary, and so on.  The "prepare the tax return" part of the message is a {\ul selector} in that it tells John what method\emdash of the many methods in his background\emdash to proceed with first.  Even within that very first method he performs, some of the individual steps, such as organizing the figures, may be inherited from the superclass of all accountants.  One or more of those steps, however, may be unique to his subclass of family tax preparers.\par \pard \s3\qj\sb160 Now, let's say that at the office you are responsible for hiring an accountant to do the company tax return.  Because John is a specialist in family tax planning, you wouldn't want to select him.  Instead, you hire Marvin, because he comes from a class of corporate tax accountants.\par \pard \s3\qj\sb160 To Marvin, you give almost the same message: "prepare the tax return based on the corporate figures."  Marvin receives the same message as John, but because the methods in Marvin's class are not identical to John's, a different process takes place in the preparation of the return.  Some of Marvin's steps may be the same as John's, because they share the same steps with all accoun\-tants, but others will be unique to Mar\-vin's subclass.  And the corporate figures you give Marvin, even though many will have the same names as the personal figures (income, medical expenses, tax credits, interest deductions), they will in no way be mixed between returns.  Only your fami\-ly's figures will be in John's return; only the corporate figures will be in Marvin's.  Despite John's and Marvin's common heritage of accounting methods, they work com\-pletely independently of each other.\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw422\pich388 195800000000018501661101a10064000c574f5244000000000185016601000a000000000185016698002e000000000184016800000000018401650000000001840165000102d30002d30002d30002d30002d30002d30002d30002d30002d30002d30002d30002d30002d30002d30008ec000001ecfffe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0019ec000f0100f380000018e7018300300000f803fc000001fe0017ec000901019980000018630180fd0000ccfb000001fe001bec00150101818e38e03c6301873371e3c0cce71e3ce0000001fe001bec00150101819b6db03c6301833331b6c0f9b31b6db0000001fe001bec00150101818f38e0666301831e31b6c0cdf31b6ce0000001fe001bec00150101819b0c307e6301831e31b6c0cd831b6c30000001fe001bec00150101999b6db0666301830c31b6c0cdb31b6db0000001fe001bec00150100f18f38e0666301f30c31b3c0f8e31b3ce0000001fe0012ec000001f50000c0fe00000cfe000001fe0013ec000001f600010380fe000038fe000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0010ec00060100c300c6000cf3000001fe0010ec00060100e700c6000cf3000001fe0011ec00070100ff39e78e3ce0f4000001fe0011ec00070100db6cc6db6db3f4000001fe0011ec00070100c37cc6db6ce0f4000001fe0011ec00070100c360c6db6c30f4000001fe0011ec00070100c36cc6db6db0f4000001fe0011ec00070100c33866ce3ce3f4000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0013ec00090100000f800001800063f6000001fe0012ec00040100000cc0fd000060f6000001fe0015ec000b0100000cce38f38f9cf71c78f8000001fe0015ec000b0100000cdb6cd98e3663366cf8000001fe0015ec000b0100000f9f38d98c1e63366cf8000001fe0015ec000b0100000f180cd98c3663366cf8000001fe0015ec000b0100000d9b6cd98c3663366cf8000001fe0015ec000b0100000cce38f18c1e331c6cf8000001fe000eec000001fc0000c0f3000001fe000eec000001fc0000c0f3000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0018ec00030100000ffe00070c00e000038000c0fb000001fe0018ec000e010000198000000c018000060000c0fb000001fe0018ec000e010000181c71f38f03ce3e0f38e3c0fb000001fe0018ec000e0100000f36d9c6cd819b38066db6c0fb000001fe0018ec000e01000001be79860d819b30066db6c0fb000001fe0018ec000e01000001b0d9860d819b30066db6c0fb000001fe0018ec000e01000019b6d986cd819b30066db6c0fb000001fe0018ec000e0100000f1c79838d818e300638e3c0fb000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000dec00030100000cf0000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000dec00030100000cf0000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0008ec000001ecfffe0006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40008ec000001ecfffe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0019ec00090100f3800000018e700cfd000230000cfd000001fe0019ec00090101998000000186300cfd000230000cfd000001fe001bec00110101818e38e003c6301e38e38d9e79c79e70fe000001fe001bec00110101819b6db003c6301e6db6cd9b3366ccd8fe000001fe001bec00110101818f38e0066630336186cd9b31e6cc70fe000001fe001bec00110101819b0c3007e6303f6186cd9b3366cc18fe000001fe001bec00110101999b6db0066630336db6cd9b3366ccd8fe000001fe001bec00110100f18f38e00666303338e3879b19e6c670fe000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0010ec00060100c300c6000cf3000001fe0010ec00060100e700c6000cf3000001fe0011ec00070100ff39e78e3ce0f4000001fe0011ec00070100db6cc6db6db3f4000001fe0011ec00070100c37cc6db6ce0f4000001fe0011ec00070100c360c6db6c30f4000001fe0011ec00070100c36cc6db6db0f4000001fe0011ec00070100c33866ce3ce3f4000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0015ec000601000198000c38fd00013003f9000001fe0014ec000601000198000060fc000003f9000001fe0017ec000d010000f1c7dcf3607ce38e71e79cfa000001fe0017ec000d010000f3670c636071b6db31b336fa000001fe0017ec000d010000f3e60c636061f61f31b31cfa000001fe0017ec000d01000063060c636061861831b306fa000001fe0017ec000d01000063660c636061b6db31b336fa000001fe0017ec000d01000061c60c61e060e38e31e19cfa000001fe0013ec000001fb000060fe00010180f9000001fe0014ec000001fc000101c0fe00010180f9000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0017ec000d010000f000061c00060000c00ec0fa000001fe0016ec000c010000d800060c00060000c018f9000001fe001bec0011010000cce3678c71c78e38d83dc79b3e71c0fe000001fe001bec0011010000cdb366ccdb66db6cf018cd9b38db60fe000001fe001bec0011010000cdb366ccfb06df60e018cd9b30f9c0fe000001fe001bec0011010000cdb366ccc306d860e018cd9b30c060fe000001fe001bec0011010000d9b366ccdb66db6cf018cd9b30db60fe000001fe001bec0011010000f0e1e78c71c6ce38d818c78f3071c0fe000001fe000fec000001f500010180fb000001fe000eec000001f5000007fa000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe001aec0009010000f99ce0000180f8fe00030c1e031efd000001fe001aec0009010000c00c60000180c0fe00031c330733fd000001fe001aec0010010000c38c6038dbc0c1c7cfe00c330f33fd000001fe001aec0010010000f18c606cd980f3670db00c331b33fd000001fe0019ec000d010000c18c606cd980c3660db00cfe33fd000001fe001aec0010010000c18c606cd980c3660db00c333fb3fd000001fe001aec0010010000c18c606cd980c3660db00c330333fd000001fe001aec0010010000c18c603878c0c1c60db00c1e031efd000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0016ec0008010000f99ce0000180fd000030fa000001fe0016ec0008010000c00c60000180fd000030fa000001fe0019ec000f010000c38c6038dbc0e38f9e0079ccc0fc000001fe0019ec000f010000f18c606cd981b6ce1b00336780fc000001fe0018ec000e010000c18c606cd98186cc1b0031e3fb000001fe0018ec000e010000c18c606cd98186cc1b003363fb000001fe0019ec000f010000c18c606cd981b6cc1b00336780fc000001fe0019ec000f010000c18c603878c0e38c1e3019ecc0fc000001fe000eec000001f7000018f8000001fe000eec000001f7000018f8000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000dec000301000060f0000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000dec000301000060f0000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0008ec000001ecfffe0006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40006e100000cf40008ec000001ecfffe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe001aec000c010079c0000001f0000338000cfd000430000c0001fe001aec000c0100ccc000000180000018000cfd000430000c0001fe001bec00150100c0c71c7001838fe718d81e38e38d9e79c79e7001fe001bec00150100c0cdb6d801e6cdb318d81e6db6cd9b3366ccd801fe001bec00150100c0c79c700183cdb318d8336186cd9b31e6cc7001fe001bec00150100c0cd86180186cdb318d83f6186cd9b3366cc1801fe001bec00150100cccdb6d80186cdb318d8336db6cd9b3366ccd801fe001bec0015010078c79c700183cdb318783338e3879b19e6c67001fe000eec000001f7000018f8000001fe000eec000001f7000070f8000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0010ec000601006180630006f3000001fe0010ec000601007380630006f3000001fe0011ec000701007f9cf3c71e70f4000001fe0012ec000801006db6636db6d980f5000001fe0011ec0007010061be636db670f4000001fe0011ec0007010061b0636db618f4000001fe0011ec0007010061b6636db6d8f4000001fe0012ec00080100619c33671e7180f5000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0019ec00030100007cfd00010380fe000301c600c6fd000001fe0018ec000301000066fd00010180fd0002c600c0fd000001fe001bec00150100006671f38e3c7180e38f1c6ccf39ee38f0000001fe001bec001501000066d9c6db36d981b6cdb66cc66cc66cd8000001fe001bec00150100007cf9839b36798186cd9c6cc63cc66cd8000001fe001bec001501000060c180db36d98186cd866cc66cc66cd8000001fe001bec001501000060d986db36d981b6cdb66cc66cc66cd8000001fe001bec00150100006071838e367980e38d9c3cc33c6638d8000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0010fe00f3ff00fcfe000001ed000001fe001202000003f3000003fe000001ed000001fe001d02000004f200068000000100007cfc00000cfe00010180fb000001fe001d02000008f2000640000001000066fc00000cfe00010180fb000001fe002202000010f20014200000010000667ce3c71f381e73303e73cd9f3c70fe000001fe002202000010f200142000000100006671b36d9c6c0cd9e038d98d9c36d8fe000001fe002202000020f200181000000100007c61f367987c0c78c030f98d9836701f1f0001fe002202000020f200141000000100006061836d98600cd8c030c18d983618fe000001fe002202000020f200141000000100006061b36d986c0cd9e030d98d9836d8fe000001fe002d0900002003e00006700018fd0018600018001000000100006060e3c79838067b303070c7983670fe000001fe00200300002003fe0002300018fd00076000180010000001fd000003f2000001fe00211500002003071fce31b03c71c71b3cf38f3c0010000001fd000003f2000001fe001d1500002003cd9b6631b03cdb6d9b3666cd980010000001ed000001fe001d1500002003079b6631b066c30d9b3663cd980010000001ed000001fe001d15000020030d9b6631b07ec30d9b3666cd980010000001ed000001fe002d15000020030d9b6631b066db6d9b3666cd980010000001fe00007cfd00010380fe000301c600c6fe000001fe002c1500002003079b6630f06671c70f3633cd8c0010000001fe000066fd00010180fd0002c600c0fe000001fe002602000020fc000030f8000310000001fe00116671f38e3c7180e38f1c6ccf39ee38f00001fe002602000020fc0000e0f8000310000001fe001166d9c6db36d981b6cdb66cc66cc66cd80001fe002202000020f2000310000001fe00117cf9839b36798186cd9c6cc63cc66cd80001fe002202000020f2000310000001fe001160c180db36d98186cd866cc66cc66cd80001fe002202000020f2000310000001fe001160d986db36d981b6cdb66cc66cc66cd80001fe002702000020fb00016018fa000310000001fe00116071838e367980e38d9c3cc33c6638d80001fe001602000020fb00016018fa000310000001ed000001fe001702000020fb0002671e3cfb000310000001ed000001fe001702000020fb00026d9b36fb000310000001ed000001fe001702000020fb00026d9b36fb000310000001ed000001fe001802000020fc0003066d9b36fb000310000001ed000001fe002502000020fc0003066d9b36fb000310000001fe0003cc00061cfd0002180180fb000001fe002402000020fc000303c71b36fb000310000001fe0003cc000030fc00010180fb000001fe001f02000020f2000310000001fe000a78e3ee79b03e71c738f3cefb000001fe001f02000020f2000310000001fe000a79b38631b038db6d98d99bfb000001fe001f02000020f2000310000001fe000a79f30631b030fb0f98d98efb000001fe001f02000020f2000310000001fe000a31830631b030c30c18d983fb000001fe001f02000020f2000310000001fe000a31b30631b030db6d98d99bfb000001fe001f02000010f2000320000001fe000a30e30630f03071c718f0cefb000001fe001902000010f2000320000001fa000030fd0000c0fa000001fe001902000008f2000340000001fa0000e0fd0000c0fa000001fe001102000004f2000380000001ed000001fe001202000003f3000003fe000001ed000001fe0010fe00f3ff00fcfe000001ed000001fe0018ec000001fe000a7800030e00030000600760fb000001fe0017ec000001fe00096c00030600030000600cfa000001fe001bec000001fe00116671b3c638e3c71c6c1ee3cd9f38e0000001fe001bec000001fe001166d9b3666db36db6780c66cd9c6db0000001fe001bec000001fe001166d9b3667d836fb0700c66cd987ce0000001fe001bec000001fe001166d9b36661836c30700c66cd986030000001fe001bec000001fe00116cd9b3666db36db6780c66cd986db0000001fe001bec000001fe00117870f3c638e3671c6c0c63c79838e0000001fe000eec000001f30000c0fc000001fe000fec000001f400010380fc000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe001bec000001fe00067cce700000c07cfe0003060f018ffe000001fe001bec000001fe00066006300000c060fe00070e19839980000001fe001bec000001fe001161c6301c6de060e3e7f00619879980000001fe001bec000001fe001178c630366cc079b386d806198d9980000001fe001bec000001fe001160c630366cc061b306d80619999980000001fe001bec000001fe001160c630366cc061b306d806199fd980000001fe001bec000001fe001160c630366cc061b306d80619819980000001fe001bec000001fe000d60c6301c3c6060e306d8060f018ffe000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000dec000301000060f0000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000dec000301000060f0000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe000aec000001ed000001fe0008ec000001ecfffe0002d30002d30002d30002d30002d30002d30002d30002d300ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-3\par \pard\plain \s3\qj\sb160 \f20 The same would be true if you hired a colleague of John's class to prepare your mother's tax return.  If his name is Percival, you can give Percival the same message and your mother's fig\-ures, and there would be no interference among the three returns you have in the works.  \par \pard \s3\qj\sb160 If this accountant example were a true object oriented system, the class of all accountants would, itself, be based on another, all-encompassing superclass\emdash something like "all living beings."  In other words, there must be a primeval class from which all classes are derived, and all the primeval methods apply down the line, as long as they haven't been modified by a subclass.  Therefore, even though John doesn't think about it, he breathes, his heart beats regularly, he seeks nutrition periodically, and so on.  If you send the mes\-sage, "John, hold your breath for 15 seconds," the method for breathing would not be found in either of the accountant classes to which John belongs, but rather in the primeval class of living beings.  It's possible, nonetheless, for John to reach back through the hierarchy of classes to that primeval class and make a change to the method that controls his breathing.\par \pard \s3\qj\sb160 {\ul Classes} and {\ul subclasses} are defined by the {\ul methods} that dictate how an object is to behave.  A subclass in\-herits all the methods of its superclass, and adds to or modifies the superclass' list of methods, if necessary.  An {\ul object} is a singular {\ul instance} of a class or subclass.  An object is capa\-ble of performing all operations specified by methods in its class and its superclass.\par \pard \s3\qj\sb160 For an object to do any work, it requires that a {\ul message} be sent to it.  The message must contain a {\ul selector}, which the object matches with one of its possible methods.  Any data (parameters) passed to the object in\-side the message remain the private property of that object.\par \pard \s3\qj\sb160 In Figure\~I-4, when we send the message, "John, prepare tax return with my figures," John matches the selector "prepare tax return" with the methods in Class Family Accountants.  This method is, in turn, de\-fined by a method from its own class (e.g., Personal Consultation) and by methods that the subclass inherits from its superclass (e.g., Verify Receipts, Doublecheck Figures, and Fill Out Form 1040), as shown in Figure\~I-4.\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw418\pich376 1c8c00000000018601a21101a10064000c574f524400000000018601a201000a00000000018601a298003600000000018501a800000000018501a100000000018501a1000102cb0002cb0002cb0002cb0008e800ecff0080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa0019e8000f8079c000000c7380c1801800007c0180fc000080fa0016e8000880ccc000000c3180c0fd000066fa000080fa001be8001180c0c71c701e3180c399b8f1e066738f1e70fe000080fa001be8001180c0cdb6d81e3180c19998db607cd98db6d8fe000080fa001be8001180c0c79c70333180c18f18db6066f98db670fe000080fa001be8001180c0cd86183f3180c18f18db6066c18db618fe000080fa001be8001180cccdb6d8333180c18618db6066d98db6d8fe000080fa001be800118078c79c70333180f98618d9e07c718d9e70fe000080fa0012e8000080f6000060fe000006fd000080fa0013e8000080f7000101c0fe00001cfd000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000fe80005806180630006f2000080fa000fe80005807380630006f2000080fa0010e80006807f9cf3c71e70f3000080fa0011e80007806db6636db6d980f4000080fa0010e800068061be636db670f3000080fa0010e800068061b0636db618f3000080fa0010e800068061b6636db6d8f3000080fa0011e8000780619c33671e7180f4000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa0013e80009800007c00000c0003180f6000080fa0011e8000380000660fd000030f5000080fa0014e8000a800006671c79c7ce7b8e3cf7000080fa0014e8000a8000066db66cc71b319b36f7000080fa0014e8000a800007cf9c6cc60f319b36f7000080fa0014e8000a8000078c066cc61b319b36f7000080fa0014e8000a800006cdb66cc61b319b36f7000080fa0014e8000a800006671c78c60f198e36f7000080fa000ee8000080fd000060f2000080fa000ee8000080fd000060f2000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa0017e8000d8000078000000600700001c00060fa000080fa0017e8000d80000cc000000600c00003000060fa000080fa0017e8000d80000c0e38f9c781e71f079c71e0fa000080fa0017e8000d8000079b6ce366c0cd9c0336db60fa000080fa0017e8000d800000df3cc306c0cd980336db60fa000080fa0017e8000d800000d86cc306c0cd980336db60fa000080fa0017e8000d80000cdb6cc366c0cd980336db60fa000080fa0017e8000d8000078e3cc1c6c0c718031c71e0fa000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ce80002800006ef000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ce80002800006ef000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa0008e800ecff0080fa0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0006de000006ef0008e800ecff0080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa0018e800028079c0fe0002c73806fd0002180006fc000080fa0018e8000280ccc0fe0002c31806fd0002180006fc000080fa001ae8001080c0c71c7001e3180f1c71c6cf3ce3cf38fd000080fa001ae8001080c0cdb6d801e3180f36db66cd99b3666cfd000080fa001ae8001080c0c79c7003331819b0c366cd98f36638fd000080fa001ae8001080c0cd861803f3181fb0c366cd99b3660cfd000080fa001ae8001080cccdb6d803331819b6db66cd99b3666cfd000080fa001ae800108078c79c70033318199c71c3cd8cf36338fd000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000fe80005806180630006f2000080fa000fe80005807380630006f2000080fa0010e80006807f9cf3c71e70f3000080fa0011e80007806db6636db6d980f4000080fa0010e800068061be636db670f3000080fa0010e800068061b0636db618f3000080fa0010e800068061b6636db6d8f3000080fa0011e8000780619c33671e7180f4000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa0015e800058000cc00061cfd0002180180f9000080fa0016e800058000cc000030fc00030180000cfb000080fa0018e8000e800078e3ee79b03e71c738f3ce003cfb000080fa0018e8000e800079b38631b038db6d98d99b00fcfb000080fa0017e8000d800079f30631b030fb0f98d98e03f9ff00c0fb0017e8000d800031830631b030c30c18d98303f9ff00c0fb0019e8000e800031b30631b030db6d98d99b00fcfb000180c0fb0019e8000e800030e30630f03071c718f0ce003cfb000180c0fb0016e8000080fc000030fd0003c000000cfb000180c0fb0013e8000080fc0000e0fd0000c0f8000180c0fb000be8000080ed000180c0fb000be8000080ed000180c0fb000be8000080ed000180c0fb0017e8000c80007800030e00030000600760f9000180c0fb001ae8000b80006c00030600030000600cfc00050180000080c0fb001ce8001680006671b3c638e3c71c6c1ee3cd9f38e00780000080c0fb001ce80016800066d9b3666db36db6780c66cd9c6db01f80000080c0fb001be80011800066d9b3667d836fb0700c66cd987ce07ffcff00e0fc001be80011800066d9b36661836c30700c66cd9860307ffcff00e0fc001de8001780006cd9b3666db36db6780c66cd986db01f80000080c060fc001de8001780007870f3c638e3671c6c0c63c79838e00780000080c060fc0014e8000080f50000c0fe00060180000080c060fc0011e8000080f600010380fa000280c060fc000ce8000080ed000280c060fc000ce8000080ed000280c060fc000ce8000080ed000280c060fc001de8000880007cce700000c07cfe0005060f018f000cfe000280c060fc001de8000880006006300000c060fe00050e198399803cfe000280c060fc001de80011800061c6301c6de060e3e7f00619879980fcfe000280c060fc001ae80010800078c630366cc079b386d806198d9983faff00f0fd001ae80010800060c630366cc061b306d80619999983faff00f0fd001ee80011800060c630366cc061b306d806199fd980fcfe000380c06030fd001ee80011800060c630366cc061b306d806198199803cfe000380c06030fd001ee80011800060c6301c3c6060e306d8060f018f000cfe000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd0018e8000780007cce700000c0fd000018f9000380c06030fd0018e8000780006006300000c0fd000018f9000380c06030fd001be8000e800061c6301c6de071c7cf003ce660fb000380c06030fd001be8000e800078c630366cc0db670d8019b3c0fb000380c06030fd001be8000e800060c630366cc0c3660d8018f180fb000380c06030fd001be8000e800060c630366cc0c3660d8019b180fb000380c06030fd001be8000e800060c630366cc0db660d8019b3c0fb000380c06030fd001be8000e800060c6301c3c6071c60f180cf660fb000380c06030fd0011e8000080f800000cf7000380c06030fd0011e8000080f800000cf7000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000fe80002800030ef000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000fe80002800030ef000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000be800ecff0380c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000cde000006f60002c06030fd000be800ecff0380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd001de80002803ce0fe0005f800019c0006fd0008180006000080c06030fd001de80002806660fe0005c000000c0006fd0008180006000080c06030fd001ee800188060638e3800c1c7f38c6c0f1c71c6cf3ce3cf380080c06030fd001ee80018806066db6c00f366d98c6c0f36db66cd99b3666c0080c06030fd001ee80018806063ce3800c1e6d98c6c19b0c366cd98f366380080c06030fd001ee80018806066c30c00c366d98c6c1fb0c366cd99b3660c0080c06030fd001ee80018806666db6c00c366d98c6c19b6db66cd99b3666c0080c06030fd001ee80018803c63ce3800c1e6d98c3c199c71c3cd8cf363380080c06030fd0011e8000080f800000cf7000380c06030fd0011e8000080f8000038f7000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd0012e800058030c0318003f2000380c06030fd0012e800058039c0318003f2000380c06030fd0013e80006803fce79e38f38f3000380c06030fd0014e800078036db31b6db6cc0f4000380c06030fd0013e800068030df31b6db38f3000380c06030fd0013e800068030d831b6db0cf3000380c06030fd0013e800068030db31b6db6cf3000380c06030fd0014e800078030ce19b38f38c0f4000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd000de8000080ed000380c06030fd001ce8000280003efd000101c0fd0002e30063fe0005180080c06030fd001be80002800033fc0000c0fd0002630060fe0005780080c06030fd001ee8001880003338f9c71e38c071c78e36679cf71c7801f80080c06030fd001ee800188000336ce36d9b6cc0db66db36633663366c07fff880c06030fd001ee8001880003e7cc1cd9b3cc0c366ce36631e63366c07fff880c06030fd001ee8001880003060c06d9b6cc0c366c336633663366c01f81880c06030fd001ee800188000306cc36d9b6cc0db66db36633663366c00781880c06030fd001ee8001880003038c1c71b3cc071c6ce1e619e331c6c00181880c06030fd000ee8000080ee00041880c06030fd000ee8000080ee00041880c06030fd000ee8000080ee00041880c06030fd0016fb00007ff4ff00fefd000080ee00041880c06030fd0018fc00010180f400010180fe000080ee00041880c06030fd0020fc000002f2000040fe000280003efc000006fd0000c0fb00041880c06030fd0020fc000004f2000020fe0002800033fc000006fd0000c0fb00041880c06030fd0026fc000008f2000010fe00108000333e71e38f9c0f39981f39e6cf9e38fe00041880c06030fd0026fc000008f2000010fe001080003338d9b6ce36066cf01c6cc6ce1b6cfe00041880c06030fd0026fc000010f2000008fe001880003e30f9b3cc3e063c60187cc6cc1b380f8f801880c06030fd0026fc000010f2000008fe001080003030c1b6cc30066c601860c6cc1b0cfe00041880c06030fd0026fc000010f2000008fe001080003030d9b6cc36066cf0186cc6cc1b6cfe00041880c06030fd0031fc00071001f0000338000cfd000430000c0008fe00108000303071e3cc1c033d98183863cc1b38fe00041880c06030fd0026fc0007100180000018000cfd000430000c0008fe000080fe00010180f300041880c06030fd0027fc00101001838fe718d81e38e38d9e79c79e0008fe000080fe00010180f300041880c06030fd0022fc00101001e6cdb318d81e6db6cd9b3366cc0008fe000080ee00041880c06030fd0022fc0010100183cdb318d8336186cd9b31e6cc0008fe000080ee00041880c06030fd0022fc0010100186cdb318d83f6186cd9b3366cc0008fe000080ee00041880c06030fd0030fc0010100186cdb318d8336db6cd9b3366cc0008fe00038006003efd000101c0fd0002e30063fe00041880c06030fd002ffc0010100183cdb318783338e3879b19e6c60008fe000380078033fc0000c0fd0002630060fe00041880c06030fd002afc000010fc000018f8000008fe00188007e03338f9c71e38c071c78e36679cf71c78001880c06030fd0028fc000010fc000070f800000ffcff16f8336ce36d9b6cc0db66db36633663366c001880c06030fd0024fc000010f200000ffcff16f83e7cc1cd9b3cc0c366ce36631e63366c7ff880c06030fd0026fc000010f2000008fe00188007e03060c06d9b6cc0c366c336633663366c7ff880c06030fd0026fc000010f2000008fe0018800780306cc36d9b6cc0db66db36633663366c000080c06030fd002bfc000010fb0001300cfa000008fe00188006003038c1c71b3cc071c6ce1e619e331c6c000080c06030fd001afc000010fb0001300cfa000008fe000080ed000380c06030fd001bfc000010fb0002338f1efb000008fe000080ed000380c06030fd001bfc000010fb000236cd9bfb000008fe000080ed000380c06030fd001bfc000010fb000236cd9bfb000008fe000080ed000380c06030fd001cfc000010fc00030336cd9bfb000008fe000080ed000380c06030fd0028fc000010fc00030336cd9bfb000008fe00068000006600030efd00020c00c0fa000380c06030fd0026fc000010fc000301e38d9bfb000008fe000680000066000018fb0000c0fa000380c06030fd0022fc000010f2000008fe000d8000003c71f73cd81f38e39c79e7fa000380c06030fd0023fc000010f2000008fe000e8000003cd9c318d81c6db6cc6ccd80fb000380c06030fd0022fc000010f2000008fe000e8000003cf98318d8187d87cc6cc701faff02c06030fd0022fc000010f2000008fe000e80000018c18318d81861860c6cc181faff02c06030fd0023fc000010f2000008fe000e80000018d98318d8186db6cc6ccd80fb000380006030fd0022fc000008f2000010fe000d80000018718318781838e38c7867fa000380006030fd001dfc000008f2000010fe000080fb000018fd000060f9000380006030fd001dfc000004f2000020fe000080fb000070fd000060f9000380006030fd0015fc000002f2000040fe000080ed000380006030fd0017fc00010180f400010180fe000080ed000380006030fd0015fb00007ff4ff00fefd000080ed000380006030fd0022fa000040f6000002fc000d8000003c000187000180003003b0fa000380006030fd0021fa000040f6000002fc000c80000036000183000180003006f9000380006030fd0026fa000040f6000002fc00118000003338d9e31c71e38e360f71e6cf9c70fe000380006030fd0026fa000040f6000002fc0011800000336cd9b336d9b6db3c063366ce36d8fe000380006030fd002bfa00064000030c001f30fc000002fc0012800000336cd9b33ec1b7d838063366cc3e707ffdff01e030fd002afa00054000039c0018fb000002fc0012800000336cd9b330c1b61838063366cc30187ffdff01e030fd002efa000c400003fcd81871e6cf9c700002fc0011800000366cd9b336d9b6db3c063366cc36d8fe000380000030fd002efa000c4000036cd81e3366ce36d80002fc00118000003c3879e31c71b38e360631e3cc1c70fe000380000030fd0021fa000c4000030cd8183366cc3e700002fc000080f4000060fb000380000030fd0022fa000c4000030cd8183366cc30180002fc000080f5000101c0fb000380000030fd001dfa000c4000030cd8183366cc36d80002fc000080ed000380000030fd001dfa000c4000030c781831e3cc1c700002fc000080ed000380000030fd001cfa000040fe000318000060fd000002fc000080ed000380000030fd002dfa000040fe0003700001c0fd000002fc00098000003e67380000603efe0004030780c780fe000380000030fd0026fa000040f6000002fc000980000030031800006030fe0004070cc1ccc0fe000380000030fd0026fa000040f6000002fc001180000030e3180e36f03071f3f8030cc3ccc0fe000380000030fd0024fa000040f6000002fc00128000003c63181b36603cd9c36c030cc6ccc03ffcff00f0fd0024fa000040f6000002fc00128000003063181b366030d9836c030cccccc03ffcff00f0fd0023fa00007ff6ff00fefc00118000003063181b366030d9836c030ccfecc0fe000080fa001be800118000003063181b366030d9836c030cc0ccc0fe000080fa001be800118000003063180e1e303071836c030780c780fe000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ce80002800030ef000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ce80002800030ef000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa000ae8000080ed000080fa0008e800ecff0080fa0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb00ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-4\par \pard\plain \s3\qj\sb160 \f20 When you send the same selector to Percival, but with your mother's figures, Percival follows the same procedures as John, but never sees your figures, which John has to himself (see Figure\~I-5).\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw421\pich429 20300000000001b901851101a10064000c574f52440000000001b9018501000a0000000001b901859800320000000001b801880000000001b801840000000001b80184000102cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf000aec00000fedff00f8fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa0019ec000208079cfe0009c7380c1801800007c018fc000008fa0017ec0002080cccfe0002c3180cfd00010660fb000008fa001bec0011080c0c71c701e3180c399b8f1e066738f1e7fe000008fa001bec0015080c0cdb6d81e3180c19998db607cd98db6d80000008fa001bec0011080c0c79c70333180c18f18db6066f98db67fe000008fa001bec0015080c0cd86183f3180c18f18db6066c18db6180000008fa001bec0015080cccdb6d8333180c18618db6066d98db6d80000008fa001bec001108078c79c70333180f98618d9e07c718d9e7fe000008fa0012ec000008f6000006fd000060fe000008fa0013ec000008f600001cfe000101c0fe000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa0010ec000608061806300060f3000008fa0010ec000608073806300060f3000008fa0010ec00060807f9cf3c71e7f3000008fa0011ec00070806db6636db6d98f4000008fa0010ec000608061be636db67f3000008fa0011ec000708061b0636db6180f4000008fa0011ec000708061b6636db6d80f4000008fa0011ec0007080619c33671e718f4000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa0013ec00090800007c00000c000318f6000008fa0011ec000308000066fd000003f5000008fa0015ec000b0800006671c79c7ce7b8e3c0f8000008fa0015ec000b08000066db66cc71b319b360f8000008fa0015ec000b0800007cf9c6cc60f319b360f8000008fa0015ec000b08000078c066cc61b319b360f8000008fa0015ec000b0800006cdb66cc61b319b360f8000008fa0015ec000b0800006671c78c60f198e360f8000008fa000eec000008fd000006f2000008fa000eec000008fd000006f2000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa0017ec000308000078fe0006600700001c0006fa000008fa0017ec0003080000ccfe0006600c0000300006fa000008fa0017ec000d080000c0e38f9c781e71f079c71efa000008fa0017ec000d08000079b6ce366c0cd9c0336db6fa000008fa0017ec000d0800000df3cc306c0cd980336db6fa000008fa0017ec000d0800000d86cc306c0cd980336db6fa000008fa0017ec000d080000cdb6cc366c0cd980336db6fa000008fa0017ec000d08000078e3cc1c6c0c718031c71efa000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000dec000308000060f0000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000dec000308000060f0000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec00000fedff00f8fa0006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f00006e1000060f0000aec00000fedff00f8fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa001aec000208079cfe00030c738060fe000301800060fd000008fa001aec0002080cccfe00030c318060fe000301800060fd000008fa001bec0011080c0c71c7001e3180f1c71c6cf3ce3cf380fe000008fa001bec0011080c0cdb6d801e3180f36db66cd99b3666c0fe000008fa001bec0011080c0c79c7003331819b0c366cd98f366380fe000008fa001bec0011080c0cd861803f3181fb0c366cd99b3660c0fe000008fa001bec0011080cccdb6d803331819b6db66cd99b3666c0fe000008fa001bec001108078c79c70033318199c71c3cd8cf363380fe000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa0010ec000608061806300060f3000008fa0010ec000608073806300060f3000008fa0010ec00060807f9cf3c71e7f3000008fa0011ec00070806db6636db6d98f4000008fa0010ec000608061be636db67f3000008fa0011ec000708061b0636db6180f4000008fa0011ec000708061b6636db6d80f4000008fa0011ec0007080619c33671e718f4000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa000aec000008ed000008fa0016ec000608000cc00061c0fe0002018018f9000008fa0016ec000508000cc00003fb0003180000c0fc000008fa0019ec000f0800078e3ee79b03e71c738f3ce003c0fc000008fa0019ec000f0800079b38631b038db6d98d99b00fc0fc000008fa0018ec000e0800079f30631b030fb0f98d98e03ffaff00fcfb0018ec000e0800031830631b030c30c18d98303ffaff00fcfb001aec000f0800031b30631b030db6d98d99b00fc0fc0001080cfb001aec000f0800030e30630f03071c718f0ce003c0fc0001080cfb0017ec000008fc000003fd00000cfe0000c0fc0001080cfb0013ec000008fc00000efd00000cf80001080cfb000bec000008ed0001080cfb000bec000008ed0001080cfb000bec000008ed0001080cfb0017ec000c080007800030e0003000060076f90001080cfb001aec000c080006c00030600030000600c0fc0004180000080cfb001cec0016080006671b3c638e3c71c6c1ee3cd9f38e00780000080cfb001cec00160800066d9b3666db36db6780c66cd9c6db01f80000080cfb001bec00110800066d9b3667d836fb0700c66cd987ce07fcff00fefc001bec00110800066d9b36661836c30700c66cd9860307fcff00fefc001dec0017080006cd9b3666db36db6780c66cd986db01f80000080c06fc001dec0017080007870f3c638e3671c6c0c63c79838e00780000080c06fc0013ec000008f500000cfd0005180000080c06fc0010ec000008f5000038fa0002080c06fc000cec000008ed0002080c06fc000cec000008ed0002080c06fc000cec000008ed0002080c06fc001dec0009080007cce700000c07c0fe000a60f018f000c00000080c06fc001cec0008080006006300000c06fd000ae198399803c00000080c06fc001dec00170800061c6301c6de060e3e7f00619879980fc00000080c06fc0019ec00110800078c630366cc079b386d806198d9983ffafffd0019ec00110800060c630366cc061b306d80619999983ffafffd001eec00180800060c630366cc061b306d806199fd980fc00000080c0603fd001eec00180800060c630366cc061b306d806198199803c00000080c0603fd001eec00180800060c6301c3c6060e306d8060f018f000c00000080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd0019ec0007080007cce700000cfd00010180fa0003080c0603fd0019ec0007080006006300000cfd00010180fa0003080c0603fd001bec000e0800061c6301c6de071c7cf003ce66fb0003080c0603fd001bec000e0800078c630366cc0db670d8019b3cfb0003080c0603fd001bec000e0800060c630366cc0c3660d8018f18fb0003080c0603fd001bec000e0800060c630366cc0c3660d8019b18fb0003080c0603fd001bec000e0800060c630366cc0db660d8019b3cfb0003080c0603fd001bec000e0800060c6301c3c6071c60f180cf66fb0003080c0603fd0011ec000008f70000c0f80003080c0603fd0011ec000008f70000c0f80003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000fec0002080003ef0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000fec0002080003ef0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec00000fedff03f80c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000ce1000060f700020c0603fd000dec00000fedff03f80c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd001eec00020803cefe00060f800019c00060fe00080180006000080c0603fd001eec0002080666fe00000cfe0002c00060fe00080180006000080c0603fd001eec001808060638e3800c1c7f38c6c0f1c71c6cf3ce3cf380080c0603fd001eec00180806066db6c00f366d98c6c0f36db66cd99b3666c0080c0603fd001eec00180806063ce3800c1e6d98c6c19b0c366cd98f366380080c0603fd001eec00180806066c30c00c366d98c6c1fb0c366cd99b3660c0080c0603fd001eec00180806666db6c00c366d98c6c19b6db66cd99b3666c0080c0603fd001eec00180803c63ce3800c1e6d98c3c199c71c3cd8cf363380080c0603fd0011ec000008f70000c0f80003080c0603fd0012ec000008f800010380f80003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd0013ec000608030c03180030f30003080c0603fd0013ec000608039c03180030f30003080c0603fd0014ec00070803fce79e38f380f40003080c0603fd0014ec000708036db31b6db6ccf40003080c0603fd0014ec000708030df31b6db380f40003080c0603fd0014ec000708030d831b6db0c0f40003080c0603fd0014ec000708030db31b6db6c0f40003080c0603fd0014ec000708030ce19b38f38cf40003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd000dec000008ed0003080c0603fd001cec0003080003e0fd00001cfd000b0e30063000000180080c0603fd001cec000308000330fd00000cfd0002063006fe00050780080c0603fd001eec0018080003338f9c71e38c071c78e36679cf71c7801f80080c0603fd001eec001808000336ce36d9b6cc0db66db36633663366c07fff880c0603fd001eec0018080003e7cc1cd9b3cc0c366ce36631e63366c07fff880c0603fd001eec0018080003060c06d9b6cc0c366c336633663366c01f81880c0603fd001eec001808000306cc36d9b6cc0db66db36633663366c00781880c0603fd001eec0018080003038c1c71b3cc071c6ce1e619e331c6c00181880c0603fd000eec000008ee000401880c0603fd000eec000008ee000401880c0603fd000eec000008ee000401880c0603fd001602000007f3ff00e0fe000008ee000401880c0603fd001602000018f3000018fe000008ee000401880c0603fd002102000020f3000004fe0003080003e0fc000060fe00000cfb000401880c0603fd002102000040f3000002fe000308000330fc000060fe00000cfb000401880c0603fd002602000080f3000001fe001808000333e71e38f9c0f39981f39e6cf9e380000001880c0603fd002602000080f3000001fe0018080003338d9b6ce36066cf01c6cc6ce1b6c0000001880c0603fd0024010001f1001b800000080003e30f9b3cc3e063c60187cc6cc1b380f8f801880c0603fd0024010001f1001b800000080003030c1b6cc30066c601860c6cc1b0c0000001880c0603fd0024010001f1001b800000080003030d9b6cc36066cf0186cc6cc1b6c0000001880c0603fd0031090001001f0000338000c0fe0020030000c00080000008000303071e3cc1c033d98183863cc1b380000001880c0603fd002509000100180000018000c0fe0008030000c00080000008fd000018f3000401880c0603fd0025150001001838fe718d81e38e38d9e79c79e00080000008fd000018f3000401880c0603fd0021150001001e6cdb318d81e6db6cd9b3366cc00080000008ee000401880c0603fd002115000100183cdb318d8336186cd9b31e6cc00080000008ee000401880c0603fd002115000100186cdb318d83f6186cd9b3366cc00080000008ee000401880c0603fd002f19000100186cdb318d8336db6cd9b3366cc00080000008000003e0fd00001cfd000a0e300630000001880c0603fd002f19000100183cdb318783338e3879b19e6c60008000000800000330fd00000cfd0002063006fe000401880c0603fd0029010001fc00010180f8001b80000008000003338f9c71e38c071c78e36679cf71c78001880c0603fd0028010001fc000007f7001b8000000800000336ce36d9b6cc0db66db36633663366c001880c0603fd0024010001f1001b80000008000003e7cc1cd9b3cc0c366ce36631e63366c7ff880c0603fd0024010001f1001b80000008000003060c06d9b6cc0c366c336633663366c7ff880c0603fd0024010001f1001b8000000800000306cc36d9b6cc0db66db36633663366c000080c0603fd002a010001fb00020300c0fa001b80000008000003038c1c71b3cc071c6ce1e619e331c6c000080c0603fd0019010001fb00020300c0fa000380000008ed0003080c0603fd001a010001fb00030338f1e0fb000380000008ed0003080c0603fd001a010001fb0003036cd9b0fb000380000008ed0003080c0603fd001a010001fb0003036cd9b0fb000380000008ed0003080c0603fd001a010001fb0003336cd9b0fb000380000008ed0003080c0603fd0026010001fb0003336cd9b0fb000a80000008000006600030e0fd0001c00cfa0003080c0603fd0025010001fb00031e38d9b0fb000a8000000800000660000180fc00000cfa0003080c0603fd0021010001f1001180000008000003c71f73cd81f38e39c79e70fb0003080c0603fd0021010001f1001180000008000003cd9c318d81c6db6cc6ccd8fb0003080c0603fd0021010001f1001280000008000003cf98318d8187d87cc6cc701ffbff02fc0603fd0021010001f100128000000800fc018c18318d81861860c6cc181ffbff02fc0603fd0021010001f1001180000008007c018d98318d8186db6cc6ccd8fb000308000603fd002302000080f3000001fe000e08003c018718318781838e38c78670fb000308000603fd002002000080f3000001fe000208007cfd00010180fe000006f9000308000603fd001f02000040f3000002fe00020800ecfd000007fd000006f9000308000603fd001702000020f3000004fe00020801c4ef000308000603fd001702000018f3000018fe0002080380ef000308000603fd001602000007f3ff00e0fe00010807ee000308000603fd0022fe000004f5000020fd000d080e0003c000187000180003003bfa000308000603fd0022fe000004f5000020fd000d081c000360001830001800030060fa000308000603fd0026fe000004f5000020fd001108380003338d9e31c71e38e360f71e6cf9c7fe000308000603fd0026fe000004f5000020fd00180870000336cd9b336d9b6db3c063366ce36d80000008000603fd002bfe000604000030c001f3fb000020fd001208e0000336cd9b33ec1b7d838063366cc3e707fdff01fe03fd002bfe000604000039c00180fb000020fd001209c0000336cd9b330c1b61838063366cc30187fdff01fe03fd002ffe000d0400003fcd81871e6cf9c7000020fd00180b80000366cd9b336d9b6db3c063366cc36d80000008000003fd002ffe000d04000036cd81e3366ce36d800020fd00110f000003c3879e31c71b38e360631e3cc1c7fe000308000003fd0022fe000d04000030cd8183366cc3e7000020fd00000ef4000006fb000308000003fd0022fe000d04000030cd8183366cc301800020fd00001cf400001cfb000308000003fd001efe000d04000030cd8183366cc36d800020fd000038ed000308000003fd001efe000d04000030c781831e3cc1c7000020fd000078ed000308000003fd001cfe000004fe000301800006fc000020fd0000e8ed000308000003fd002efe000004fe00030700001cfc000020fe000b01c8000003e67380000603e0fe000330780c78fe000308000003fd0026fe000004f5000020fe000a0388000003003180000603fd000370cc1cccfe000308000003fd0027fe000004f5000020fe001207080000030e3180e36f03071f3f8030cc3cccfe000308000003fd0023fe000004f5000020fe00130e08000003c63181b36603cd9c36c030cc6ccc03fbfffd0023fe000004f5000020fe000f1c08000003063181b366030d9836c030fecc0003fbfffd0024fe000007f5ff00e0fe00123808000003063181b366030d9836c030ccfeccfe000008fa001ced00127008000003063181b366030d9836c030cc0cccfe000008fa001ced0012e008000003063180e1e303071836c030780c78fe000008fa000cee000201c008ed000008fa000cee0002038008ed000008fa000cee0002070008ed000008fa000cee00020e0008ed000008fa000cee00021c0008ed000008fa000cee0002380008ed000008fa000cee0002700008ed000008fa000cee0002e00008ed000008fa000fef000501c000080003ef000008fa0011fe00001ff3ff0383800008ed000008fa0011fe000060f3000367000008ed000008fa0011fe000080f300031e000008ed000008fa001302000001f200050c0000080003ef000008fa001102000002f2000304000008ed000008fa001102000002f2000304000008ed000008fa001102000004f2000302000008ed000008fa001102000004f2000302000008ed000008fa001102000004f2000302000008ed000008fa001c09000004007c0000ce0003fd00070c00030002000008ed000008fa001c0900000400600000060003fd00070c00030002000008ed000008fa001d150000040060e3f9c636078e38e3679e71e78002000008ed000008fa001d150000040079b36cc636079b6db366ccd9b30002000008ed000008fa001d150000040060f36cc6360cd861b366cc79b3000200000fedff00f8fa0016120000040061b36cc6360fd861b366ccd9b30002e20016120000040061b36cc6360cdb6db366ccd9b30002e20016120000040060f36cc61e0cce38e1e6c679b18002e2000e02000004fc000006f8000002e2000e02000004fc00001cf8000002e2000a02000004f2000002e2000a02000004f2000002e2000a02000004f2000002e2001402000004fd00060f8000018000e0fd000002e2001302000004fd00010cc0fd000060fd000002e2001402000004fd00060cce3e73999c60fd000002e2001402000004fd00060cdb38d999b660fd000002e2001402000004fd00060f9f30c18f1e60fd000002e2001402000004fd00060c1830c18f3660fd000002e2001402000004fd00060c1b30d9863660fd000002e2001402000004fd00060c0e3071861e60fd000002e2000a02000004f2000002e2000a02000004f2000002e2000a02000004f2000002e2000a02000004f2000002e2000a02000004f2000002e2000a02000002f2000004e2000a02000002f2000004e2000a02000001f2000008e2000afe000080f3000010e2000afe000060f3000060e2000afe00001ff3ff0080e2000afd000010f5000080e1000afd000010f5000080e1000afd000010f5000080e1000afd000010f5000080e10011fd000710030c0000c003e6fc000080e10010fd000610039c0000c003fb000080e10013fd000d1003fce3f80e030e3cd9f38e0080e10013fd000d10036db36c1b03c66cd9c6db0080e10013fd000d10030db36c0e03066cd987ce0080e10013fd000d10030db36c0303066cd986030080e10013fd000d10030db36c1b03066cd986db0080e10013fd000d10030ce36c0e03063c79838e0080e1000efd000010fa00000cfd000080e1000efd000010fa000038fd000080e1000afd000010f5000080e1000afd000010f5000080e1000afd000010f5000080e1000afd000010f5000080e1000afd00001ff5ff0080e10002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf00ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-5\par \pard\plain \s15\qc\sb720 \f20 {\fs0 End of lesson 4\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 5\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 5\par \pard\plain \s254\sb240\keepn \b\f21 Mapping class-object relationships\par \pard\plain \s3\qj\sb160 \f20 An object oriented language like Mops builds programs around the same kinds of relationships as portrayed in the accountant metaphor.  Class definitions play a central role in the structure of a program.  As such, the most important early step in planning a Mops program is to visualize what the main objects\emdash the actors\emdash in your program will be doing.  Because the Macintosh is capable of recreating on-screen metaphors for so many different real-world objects\emdash a bank book, an artist's canvas, a calendar\emdash it is best to devise classes of Mops objects that bear a be\-havioral resemblance to the real-world items.  Once you've determined what the program's classes will be, it's time to start writing the program by defining those classes with methods.  Then create objects of those classes.  Finally, write the messages to those objects that set the pro\-gram in motion.\par \pard \s3\qj\sb160 Let's take the first steps in applying class-object relationships to a Mops program by defining a class that is capable of drawing rectangle objects on the screen.  At the same time, you'll also be introduced to the way Mops programs really look.  Pay particular attention to the physical struc\-ture of program listings\emdash indentions, spacings, capitalizations, and the like.  While Mops is pretty loose about how you make your pro\-grams look, the ways prescribed hereafter will help make your code more readable.  Also consult chapters 3, 5, and 6 in Part II,  for in-depth discus\-sions of this and related topics.\par \pard\plain \s254\sb240\keepn \b\f21 Defining a class\par \pard\plain \s3\qj\sb160 \f20 As you may have noticed in the accountant class metaphor, each class was defined by what amounts to a se\-ries of behavioral rules or procedures that are to be followed whenever an object of that class is called into action.  Defining a class, then, entails establishing those rules and pro\-cedures: the methods.\par \pard \s3\qj\sb160 Most classes also have information\emdash data\emdash associated with an object of the class.  For example, the class of Family Accountants can dictate that every accountant of its class should be paid for his work.  Every family accountant (John and Percival, for instance) carries with him a figure for his hourly rate.  The class definition merely states, "Thou shalt have an hourly rate."  When the objects are created, the rate is plugged into that variable.  Importantly, John and Percival can have entirely different hourly rates, because they hoard their own data to the exclusion of other objects in the same class.  One of their methods would retrieve the rate, multiply it by the num\-ber of hours spent on your taxes, and send you the bill.\par \pard \s3\qj\sb160 Let's see what it's like to build a Mops class called Rect, which will define all the procedures for creating rectangle objects.  \par \pard \s3\qj\sb160 In the Macintosh environment, a rectangle is defined by two points on the screen: the locations of the top left and bottom right corners of the rectangle.  In other words, for every instance of a rectangle on the screen, an object of class Rect will need numbers to fill in these two variables.  These variables, then, are called {\ul in\-stance} {\ul variables} (ivars, for short).  They are the holding places in an object's definition for the requisite data\emdash the two points\emdash required before a rectangle can be drawn.\par \pard \s3\qj\sb160 The class definition up to this point looks like this:\par \pard\plain \s8\li720 \f22\fs20 :class  RECT  super\{ object \}\par           point     TopLeft\par           point     BotRight\par \pard\plain \s3\qj\sb160 \f20 Notice several things.  First of all, the beginning of a class definition is :class (pronounced "colon class"), with no space between the colon and the word "class".  There is at least one space or a tab between :class and the name of the class.  We have put RECT in capitals to make it stand out, since this is where it is defined.  However, this is not necessary, since upper and lower case are treated the same by Mops.  You can use whatever style of formatting you prefer.\par \pard \s3\qj\sb160 On the same line as the name of the class is a reference to the superclass from which the class Rectangle is derived.  This reference takes the form of the word super\{ (no space between super and \{ ), then the name of the superclass, then a \}.  These three items are separated by spaces or tabs, as for all Mops words.  (We will see later that it is possible for a class to have more than one superclass\emdash this is called {\ul multiple inheritance}.  We won't go into the details of this now, ex\-cept to say that if there is more than one superclass, these are put one after the other before the \}, again separated by spaces or tabs.)\par Although in this example the superclass name is "Object", this should not be confused with the general use of the word object, as it is applied in the Mops system, where it refers to all objects generally.  In this one special case, "Object" is a class.  This may seem a little confusing, but it is actually because we do use the word "object" in a general way, that we have named this special class "Object".  This is because all classes in Mops can trace their inheritance to class Object.  Thus, class Object defines the behavior appropriate to {\ul all} Mops objects.  This is why the name "Object" is appropriate for this class.\par \pard \s3\qj\sb160 By its inheritance, then, class Rect has at its disposal all the methods defined in class Object.  If you are interested, you could check the source code listing for class Object (located on the Mops disk as the source file labeled Object) to see what methods are defined in class Object.\par \pard \s3\qj\sb160 The instance variables tell Mops to reserve memory space in the data area of any object created from this class.  The amount of space to be reserved is determined by the characteristics of the instance variables\emdash which are, themselves, defined by other classes.  Here, the instance variables (ivars) are named TopLeft and BotRight, both belonging to the class Point.  It would not be pos\-sible to create ivars TopLeft and BotRight in class Rect if class Point had not been previously defined\emdash however, class Point is one of Mops's many predefined classes.  \par \pard \s3\qj\sb160 (For procedural language buffs, a key to understanding the object orientation of Mops is that as you follow the threads through the dictionary in the next few steps, you are not watching straight execution steps.  Rather, you are building a framework that will reside in memory as a kind of potential energy that is released only when a message is sent sometime later in the program.)\par \pard \s3\qj\sb160 To understand what the rules and procedures are for the Point objects (TopLeft and BotRight) created inside class Rectangle, you can look up the Mops source code for the class Point (located in the QD source file in the "Toolbox classes" folder).  The class definition looks like this:\par \pard\plain \s8\li720 \f22\fs20 :class  POINT\tab super\{ object \}\par record\par \{\tab int  Y\tab \tab \\ Vertical coordinate\par \tab int  X\tab \tab \\ Horizontal coordinate\par \}\par \par :m GET:\tab \tab get: X  get: Y   ;m\par :m PUT:\tab \tab put: Y  put: X   ;m\par \par ;class\par \pard\plain \s3\qj\sb160 \f20 We'll explain all of this shortly, but the main thing to notice first of all is that this class, itself, uses two more ivars, X and Y of class Int (integer).  They spec\-ify the data area inside any object of class Point.  In other words, any object created from class Point will need two integers to fill the cells reserved for data.  Class Point was designed in this way so that two values, representing a coordinate point, would be conveniently coupled together whenever a Point object was cre\-ated.  \par \pard \s3\qj\sb160 Notice, too, that we've started adding plain English comments about the code as a way of {\ul documenting} the program.  There are three ways of specifying comments in Mops:\par \pard\plain \s8\li720 \f22\fs20 ( this kind comment continues to a )\par \par \\ This is another comment, which extends to the end of the line\par \par (* This kind of comment\par can go over several line,\par     (* and can be nested *)\par *)\par \pard\plain \s3\qj\sb160 \f20 Note that (, \\, (* and *) are Mops words, and so must be followed by a white space character.  Thus if you had\par \pard\plain \s8\li720 \f22\fs20 (this isn't a comment)\par \pard\plain \s3\qj\sb160 \f20 Mops would try to recognize a word "(this", and wouldn't treat this line as a comment.\par \pard \s3\qj\sb160 We'll come back to the rest of the statements in this class Point in a moment.  First, we must search once more, but this time for the class definition of class Int, because the data of class Point consists of ivars Y and X that have the characteristics of class Int.  Class Int is defined in the file Struct in the Mops \'c4 folder.\par \pard\plain \s8\li720 \f22\fs20 :class\tab INT\tab super\{ object \}\par \par \tab 2 bytes data\par \par :m PUT:\tab inline\{ obj w!\}  ^base w!  ;m\par \par ;class\par \pard\plain \s3\qj\sb160 \f20 class Int is another one of Mops's predefined classes.  It states, first of all, that its superclass, like many in Mops, is class Object.  Next, it states that two bytes (16 bits) of data are set aside for each value whenever an integer object is created.  The third line is a method of this class (preceded by :m and ended by ;m).  The message inside this method definition stores an integer in a special area of memory (don't worry now about details of this method definition for now). \par \pard \s3\qj\sb160 Going back to the class Point definition, the method in its fourth line is a single instruction for Mops to store {\ul both} the X and Y coordinates in memory.  Therefore, every time one of the ivars (TopLeft or BotRight) is given two numbers for an X,Y coordinate, the entire coordinate is stored by one PUT: mes\-sage.\par Returning at last to class Rect, then, the list of two instance variables for this class means that an object of class Rect holds reserved space for all the data needed by the two instance variables.  And, as you've seen, the two instance variables will require a total of four integers to signify the opposite corners of the rectan\-gle's boundary.\par \pard \s3\qj\sb160 Next in the class Rect definition come two methods:\par \pard\plain \s8\li720 \f22\fs20 :class  RECT  super\{ object \}\par \par           point     TopLeft\par           point     BotRight\par \par :m PUT:  ( l t r b -- )   put: BotRight  put: TopLeft  ;m\par :m DRAW: ( l t r b -- )   addr: self   call FrameRect  ;m\par \par ;class\par \pard\plain \s3\qj\sb160 \f20 As detailed in the stack notation, the first method, put:, requires four integers on the stack (here signified by the letters l, t, r, and b) before an object executes it.  The first two integers (the ones on the top of the stack) are put into the object's BotRight reserved cells as soon as the put: BotRight message finds the defi\-nition of the put: method in BotRight's class, class Point.  The second two integers are placed in the object's TopLeft cells as the result of the put: TopLeft mes\-sage in this put: method.  In other words, when an object of class Rect receives a message con\-sisting of the put: selector, the object searches its own class for the corresponding methods def\-inition.  The method sends messages of its own to objects of other classes, and so on back through a chain of classes and objects until a method is reached that is defined purely in Mops words (as in the put: method in class Int).  All the actions taken by this series of messages affect only the private data of the Rect object that received the message.\par \pard \s3\qj\sb160 The second method, draw:, calls a Macintosh Toolbox routine, named FrameRect, to draw the rectangle according to coordinates currently in the data cells of the object being drawn.  The data, of course, must be in the proper order that FrameRect expects.  FrameRect and most other Toolbox calls seek the address of an object's data.  This is obtained by the addr: self message in the draw: method.  This address is then passed to the Toolbox call.\par \pard \s3\qj\sb160 What we have so far, however,  won't work properly if we try using the draw: method.  This is because by declaring topLeft and botRight as we did, we have made them proper Mops objects.  The problem with this is that Mops objects have 8 bytes of extra information at the start, which Mops uses to keep track of certain things including the class of the object.  However the Toolbox doesn't know anything about Mops objects, and just expects 2 bytes each for topLeft and botRight, with no extra bytes present.  Accordingly we have to have a way of omitting this extra information, and we do this with the record \{ ... \} syntax, as follows:\par \pard\plain \s8\li720 \f22\fs20 :class  RECT  super\{ object \}\par \par record\par \{\tab point\tab TopLeft\par \tab point\tab BotRight\par \}\par \par :m PUT:  ( l t r b -- )   put: BotRight  put: TopLeft  ;m\par :m DRAW: ( l t r b -- )   addr: self   call FrameRect  ;m\par \par ;class\par \pard\plain \s3\qj\sb160 \f20  Any ivars declared as part of a record won't carry any extra information.  This will limit some of the things you can do with these particular ivars, as you might expect, since Mops doesn't have the extra information available.  But as we'll see, this isn't a very serious restriction.\par \pard \s3\qj\sb160 To end the class definition, use ;class (pronounced "semicolon class").\par \pard \s3\qj\sb160 Finally, you can format your class definitions (and all your code for that matter) however you like, as long as at least one space or tab separates Mops words.  The formatting we use here in the Manual and in the Mops source code is quite readable, so we recommend something like it.  Plenty of white space and comments are always a good idea, as it will greatly help anybody elsewho has to read your code and understand it (and you yourself for that matter, in a few weeks' time when it's no longer fresh in your mind).  But in the end the choice is up to you.\par \pard\plain \s15\qc\sb720 \f20 End of lesson 5\par \pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 6\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 6\par \pard\plain \s254\sb240\keepn \b\f21 Objects and their messages\par \pard\plain \s3\qj\sb160 \f20 Now we come to creating an object of class Rect and sending messages to that object so it can select the methods to execute.  To create an object of class Rect, the syntax is simply the name of the class followed by the name you want to assign to the object.  For an object named "box1" of class Rect, the statement would be:\par \pard\plain \s2\li720 \b\f22\fs20 Rect  BOX1\par \pard\plain \s3\qj\sb160 \f20 That's all there is to it.  By creating this object, you have added a new Mops word, "box1," to the dictionary in memory.  You can visualize the object in memory to look like Figure\~I\_6:\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw190\pich94\picscaled 053400000000005e00be1101a10064000c574f524400000000005e00be01000a00000000005e00be9800180098008000f501400098008200f5013f00000000005d00bd000002e90008f900001ff3ff00fc08f9000010f300000408f9000010f300000408f9000010f300000408f9000010f300000408f9000010f300000408f9000010f300000408f9000010f300000408f9000010f300000408f9000010f30000040ff9000010fc00037c3c4410fc0000040ff9000010fc000342424430fc0000040ff9000010fc000342422810fc0000040ff9000010fc00037c422810fc0000040ff9000010fc000342421010fc0000040ff9000010fc000342422810fc0000040ff9000010fc000342422810fc0000040ff9000010fc000342424410fc0000040ff9000010fc00037c3c4410fc00000408f9000010f300000408f9000010f300000408f9000010f300000408f9000010f300000408f9000010f300000408f9000010f300000408f9000010f300000408f9000010f300000408f9000010f300000408f9000010f300000408f9000010f300000408f900001ff3ff00fc08f9000010f30000040cf9000010fb000001fa00000408f9000010f30000040cf9000010fb000001fa00000408f9000010f30000040cf9000010fb000001fa00000408f9000010f30000040cf9000010fb000001fa00000408f9000010f300000413f900071000000220000001fe00040880000004160c00fe0001000188001000000220fb00040880000004190f00100001000208001000000220000001fe000005fe000004160c001038f101c71c001000000140fb000005fe000004190f00104489022208001000000140000001fe000002fe0000041608001044890222080010fe000080fb000005fe00000419080010448903e2080010fe000380000001fe000005fe0000041608001044890202080010fe000080fb000408800000041908001044890222080010fe000380000001fe000408800000040e08001038f1f1c2060010f300000410fe000080fd000010fb000001fa0000040cfe000080fd000010f30000040cf9000010fb000001fa00000408f9000010f30000040cf9000010fb000001fa00000408f9000010f30000040cf9000010fb000001fa00000408f9000010f30000040cf9000010fb000001fa00000408f9000010f300000408f900001ff3ff00fc08f9000010f30000040cf9000010fb000001fa00000408f9000010f30000040cf9000010fb000001fa00000408f9000010f30000040cf9000010fb000001fa00000408f9000010f30000040cf9000010fb000001fa00000408f9000010f300000410f9000010fb000001fe0004088000000410f900041000000220fb0004088000000413f900071000000220000001fe000005fe000004160c1f0010f8400808001000000220fb000005fe000004190f10801084000808001000000140000001fe000002fe000004160c108e3884c3cb1c001000000140fb000005fe00000419081f111084444c880010fe000380000001fe000005fe0000041608109110f84448880010fe000080fb000408800000041908109110a04448880010fe000380000001fe000408800000041208109110904448880010fe000080f70000041208109110884448880010fb000001fa0000040e081f0e0c8443c8860010f30000040ffc000340000010fb000001fa0000040cfd00040440000010f300000410fd00040380000010fb000001fa00000408f9000010f30000040cf9000010fb000001fa00000408f9000010f30000040cf9000010fb000001fa00000408f9000010f300000408f900001ff3ff00fc02e900ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-6\par \pard\plain \s3\qj\sb160 \f20 Zeros are placed in the instance variable cells when the object is created, and they are holding space for numbers whenever the object receives a message to put data there.\par When you type a Mops message in a program, it has three parts to it: the parameters, selector, and receiver.  \par \pard \s3\qj\sb160 Parameters are the numbers to be passed to the operation.  They are placed on the parameter stack just like parameters in Lesson 1.  Not all messages have parameters, of course.  Some op\-erations don't require any numbers be passed to them.\par \pard \s3\qj\sb160 The second part, the selector, is actually the name of the method containing the operation you want the ob\-ject to perform.  In other words, the object "selects" which method of its class is to be put to work; the ob\-ject matches the message's selector with the method in the object's class (or up the superclass hierarchy if there is no match in the immediate class).\par \pard \s3\qj\sb160 The last part of a message, the receiver, must be the name of an object.  It is the "thing" on which you want to perform the operation specified by the selector.  In the accountant metaphor, the receiver is the name of the accountant who is to "prepare the returns."\par \pard \s3\qj\sb160 Since box1 is an object of class Rectangle, you can send a message to it that selects one of the methods de\-fined in class Rectangle.  If you send the message:\par \pard\plain \s2\li720 \b\f22\fs20 300 20 400 100 put: box1\par \pard\plain \s3\qj\sb160 \f20 you put the coordinates 300, 20 and 400,100 into the data cells reserved for TopLeft and BotRight in the box1 object.  After all, that's what the put: method in box1's class does: it places two sets of two pa\-rameters into an object's data cells.\par If, at some future time, you create a new object of class Rect, called "box5," box5's data cells would be empty at first.  A separate put: message would have to be sent to box5 to place box5's coordinates in that object's data cells.  This is how objects maintain {\ul private} {\ul data}.\par \pard \s3\qj\sb160 To draw the objects on the screen, you need to send another message, one that calls upon the draw: method of class Rect.  The message would be:\par \pard\plain \s2\li720 \b\f22\fs20 draw: box1\par \pard\plain \s3\qj\sb160 \f20 If you were defining class Rect from scratch, you could also define a new method that combines the func\-tions of two methods into one.  Then, a single message would take care of both the put: and draw: methods.  For this to happen, you need a way for the new method to look up the meth\-ods in the same class.  That's where a message receiver called "self" comes in handy.  With the new method (place:) the class looks like this:\par \pard\plain \s8\li720 \f22\fs20 :class  RECT  super\{ object \}\par \par record\par \{\tab point\tab TopLeft\par \tab point\tab BotRight\par \}\par \par :m PUT:  ( l t r b -- )   put: BotRight  put: TopLeft  ;m\par :m DRAW: ( l t r b -- )   addr: self   call FrameRect  ;m\par \par :m PLACE: ( l t r b -- )    ( draw at new coordinates )\par \tab put: self  draw: self  ;m\par \par ;class\par \pard\plain \s3\qj\sb160 \f20 The place: method contains the messages, "put: self" and "draw: self."  The put: self message is saying, "Do to the current object  everything that the put: method in {\ul this} class does."  The same goes for draw: self.  If you had intended one of these messages to look up a method in Rect's superclass, the re\-ceiver would have been "super," as in put: super.\par Something important happens when you have the put: self message inside the place: method.  The place: method now expects to find four integers passed along with any message bearing its selector, just like the actual put: method that executes the storage command requires four inte\-gers.  Therefore, to both locate and draw Box1 on the screen, you would send the message:\par \pard\plain \s2\li720 \b\f22\fs20 12 10 100 50  place: box1\par \pard\plain \s3\qj\sb160 \f20 If you want to try this, you'll have to have a window to display box1 in, as you did in the Intro.  So first copy the above Rect definition to the Mops window (either by typing it in or by copying and pasting it).  Then {\ul select} the whole of the definition (by dragging with the mouse).  Then hit the Enter key.  This will cause all the selected text to be executed.  In this case, since the code is a class definition, the result of executing the code will simply be to define the class Rect.  Nothing will seem to happen, but the definition for Rect will have been entered into Mops' dictionary.\par \pard \s3\qj\sb160 Now type and execute this:\par \pard\plain \s2\li720 \b\f22\fs20 window ww\par test: ww\par \pard\plain \s3\qj\sb160 \f20 Click back on the Mops window and move things around so you can see both the Mops window and ww, then type and execute\par \pard\plain \s2\li720 \b\f22\fs20 rect box1\par set: ww  12 10 100 50  place: box1\par \pard\plain \s3\qj\sb160 \f20 and your Rect should appear in the window ww.\par \pard \s3\qj\sb160 Another way of doing this would be to get the above code into an editor, save the source file, and load the file into the Mops.dic window.  If you want to do this now, open your editor.  In a clean edit window, type the class definition and the other lines of code above, or copy and paste it from here.  Each line should be terminated by <RETURN>\emdash don't let your editor wrap lines around automatically. When finished, se\-lect Save As... from the FIle menu, and assign a short, recogniz\-able name to the file, like "rr."  If your editor uses different document formats, you should use TEXT.\par \pard \s3\qj\sb160 Close the editor window to return to Mops.dic.  Load the file into Mops.dic by selecting Load from the File menu and choosing your file.)\par \pard \s3\qj\sb160 The advantage of using an editor rather than the Mops window directly, is that you now have a file available for later use.  But if you are just experimenting, it is quicker to use the Mops win\-dow, and you can still select the text and copy and paste it into a file in an editor's window at any time.\par \pard\plain \s254\sb240\keepn \b\f21 Summary\par \pard\plain \s3\qj\sb160 \f20 Before taking one more step, let's summarize.  Creating a Mops program entails the following steps: defin\-ing classes; creating objects that are instances of those classes; and then sending mes\-sages to those objects.  Building a hierarchy of classes starts with the broadest class and works toward the more specific, with sub\-classes inheriting the characteristics of their superclasses.  \par \pard \s3\qj\sb160 To help you visualize the structure of the program example detailed in this chapter, look at Figure\~I-7.  It graphically portrays the relationships between the classes and objects discussed above.\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw402\pich234 10ac0000000000fb019e1101a10064000c574f52440000000000fb019e01000a0000000000fb019e980034000d0018010101a9000d0018010101a90006000c00fa019d000002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd000af000003ffaff00fce7000af0000020fa000004e7000af0000020fa000004e7000af0000020fa000004e7000af0000020fa000004e7000af0000020fa000004e7000ef000082000078c0c3c780004e7000ef0000820000ccc0c66cc0004e7000ef0000820000c0c1e60c00004e7000ef0000820006c0c1e3c780004e7000ef0000820000c0c33060c0004e7000ef0000820000c0c3f060c0004e7000ef0000820000ccc3366cc0004e7000ef000082000678fb33c780004e7000af0000020fa000004e7000af0000020fa000004e7000df0000020fa000004e900017fff0af0000020fa000004e7000af0000020fa000004e7000ef00008200078f819f3cfc004e7000ef000082000cccc1986630004e7000ef000082000cccc1986030004e7000ef000082000ccf819e6030004e7000ef000082000cccc1986030004e7000ef000082000cccd9986030004e7000ef000082000cccd9986630004e70010f00008200078f8f1f3c30004e80000ff0af0000020fa000004e7000af0000020fa000004e7000af0000020fa000004e7000af0000020fa000004e7000af0000020fa000004e7000af0000020fa000004e7000af0000020fa000004e7000cf0000020fa000004e80000ff0af000003ffaff00fce70006ec000018e30006ec000018e30006ec000018e30006ec000018e30006ec000018e30006ec000018e30006ec000018e30006ec000018e30006ec000018e30006ec000018e30006ec000018e3000af9000003e6ff00fef2000cf9000003e6ff00fef30000ff0ef9000003f5000018f3000006f2000ef9000003f5000018f3000006f2000ef9000003f5000018f3000006f2000ef9000003f5000018f3000006f2000ef9000003f5000018f3000006f20010f9000003f5000018f3000006f30000ff10f9000003f5000018f3000006f30000ff0ef9000003f5000018f3000006f2000ef9000003f5000018f3000006f20011f9000003f5000018f3000006f400017fff0ef9000003f5000018f3000006f2000ef9000003f5000018f3000006f20016f9000003f900001ffaff00f8fe00000ff3ff00fefa001afd00001ff9ff00e0fe000010fa000008fe000008f3000002fa001afd000010f9000020fe000010fa000008fe000008f3000002fa001afd000010f9000020fe000010fa000008fe000008f3000002fa001afd000010f9000020fe000010fa000008fe000008f3000002fa001afd000010f9000020fe000010fa000008fe000008f3000002fa001afd000010f9000020fe000010fa000008fe000008f3000002fa001afd000010f9000020fe000010fa000008fe000008f3000002fa0026fd000010f9000020fe000810000f181878f00008fe000008fd000403c6061e3cfc000002fa0026fd000010f9000020fe00081000199818cd980008fe000008fd00040666063366fc000002fa002bfd000910000078c0c3c7800020fe0008100018183cc1800008fe000008fd000406060f3060fc000002fa002bfd0009100000ccc0c66cc00020fe00081000d8183c78f00008fe000008fd000436060f1e3cfc000002fa002bfd0009100000c0c1e60c000020fe000810001818660c180008fe000008fd00040606198306fc000002fa002bfd0009100006c0c1e3c7800020fe0008100018187e0c180008fe000008fd000406061f8306fc000002fa002bfd0009100000c0c33060c00020fe00081000199866cd980008fe000008fd0004066619b366fc000002fa002bfd0009100000c0c3f060c00020fe00081000cf1f6678f00008fe000008fd000433c7d99e3cfc000002fa001ffd0009100000ccc3366cc00020fe000010fa000008fe000008f3000002fa001ffd000910000678fb33c7800020fe000010fa000008fe000008f3000002fa001afd000010f9000020fe000010fa000008fe000008f3000002fa001afd000010f9000020fe000010fa000008fe000008f3000002fa001afd000010f9000020fe000010fa000008fe000008f3000002fa0028fd000010fb000203e020fe000810003e3c6337e07c08fe000008fd000401f1f3cfc0fc000002fa002afd000010fb000203c020fe00081000336663b1807808fe000008fd000301998663fb000002fc00017fff2afd00091000000319bf0003e020fe00081000336663b1807808fe000008fd000301998603fb000002fa002afd0009100000031d8c0003f020fe00081000336663f1807e08fe000008fd00030199e603fb000002fa002afd0009100000031d8c00033c20fe000810003e6663f1806f08fe000008fd000301f18603fb000002fa002afd0009100000031f8c00021f20fe00081000306663718043c8fe000008fd000301e18603fb000002fa002afd0009100000031f8c000007a0fe00081000306663718001f8fe000008fd000301b18663fb000002fa002afd0009100000031b8c000001e0fe00081000303c6331800078fe000008fd00030199f3c3fb000002fa001ffd0005100000031b8cfe0000f8fe000010fa00001efe000008f3000002fa001ffd000510000003198cfe00003cfe000010fa00040f80000008f3000002fa001afd000010f900002ffe000010fa00040bc0000008f3000002fa001afd000010f9000427c0000010fa000408f0000008f3000002fa001afd000010f9000421e0000010fa0004087c000008f3000002fa001afd000010f900042078000010fa0004081e000008f3000002fa001afd000010f90004203e000010fa00040807800008f3000002fa001afd000010f90004200f000010fa00040803e00008f3000002fa001afd000010f900042003c00010fa00040800f00008f3000002fa001afd000010f900042001f00010fa000408003c0008f3000002fa001afd000010f9000420007c0010fa000408001f0008f3000002fa001ffd000010f9000520001e001003fcff07e0080007c008003ff6ff01e002fa001ffd000010f90005200007801002fc000720080001e0080020f600012002fa001ffd00001ff9ff05e00003e01002fc00072008000078080020f600012002fa0018f10002f01002fc0007200800003e080020f600012002fa001af100023c1002fc0007200800000f080020f600012002fb0000ff22f1001c1f100203003019802008000003c800207c0180181f8000c003b0002002fa0025f1001c07900203003019802008000001f8002066000018060000c00630002002fc00017fff22f1000901f002031e780f002008fe000f78002066738f3c061c78c1cf78002002fa0021f00008f802031b300f002008fe000f1e002066d98d9806366cc36630002002fa0021f000083c02031b3006002008fe000f0f80207cd98d9806366cc3e630002002fa0021f000081f02031b3006002008fe000f0bc02060d98d9806366cc30630002002fa0021f0000817c2031b3006002008fe000f08f02060d98d9806366cc36630002002fa0021f0000811e2031b1806002008fe000f087c2060718d8c061c78f9c618002002fa001bf00001107afc00012008fe0002081e20fb000060fd00012002fa001bf00001103efc00012008fe00020807a0fb000060fd00012002fa0017f00001100efc00012008fe00020803e0f600012002fa0016f000011003fcff01e008fe00010800f5ff01e002fa0017f000011002fc00012008fe0002080020f600012002fa0017f000011002fc00012008fe0002080020f600012002fa0017f000011002fc00012008fe0002080020f600012002fa001ff000011002fc00012008fe000f0800207c0180180f8031f18030602002fa0021f00008100203003019802008fe000f080020660000180cc031980030602002fa0024f00008100203003019802008fe000f08002066738f3c0cce799b8f3cf02002fc00017fff21f000081002031e780f002008fe000f08002066d98d980f9b31999b36602002fa0024f000081002031b3006002008fe000f0800207cd98d980cdb31f19b36602002fc00017f0024f000081002031b3006002008fe000f08002060d98d980cdb31e19b36602002fc00017fff23f000081002031b300f002008fe000f08002060d98d980cdb31b19b36602002fb0000ff21f000081002031b3019802008fe000f08002060718d8c0f8e19998f36302002fa001cf000081002031b1819802008fe0002080020f900040300002002fa001af000011002fc00012008fe0002080020f900040e00002002fa0017f000011002fc00012008fe0002080020f600012002fa0017f000011002fc00012008fe0002080020f600012002fa0019f000011003fcff01e008fe000208003ff6ff01e002fb0000ff12f0000010fa000008fe000008f3000002fa0014f0000010fa000008fe000008f3000002fb0000ff12f0000010fa000008fe000008f3000002fa0012f0000010fa000008fe000008f3000002fa0012f0000010fa000008fe000008f3000002fa0012f0000010fa000008fe000008f3000002fa0012f0000010fa000008fe000008f3000002fa0012f0000010fa000008fe000008f3000002fa0012f0000010fa000008fe000008f3000002fa0014f0000010fa000008fe000008f3000002fb0000ff12f000001ffaff00f8fe00000ff3ff00fefa0005cf00017fff02cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd000ae1000003f9ff00f0f7000de100000cf900000cf900017fff0ae1000010f9000002f7000ae1000020f9000001f7000de1000040f8000080fa00017f0010e1000a4001f000180f8000180080f80010e1000a80019800180cc000380040f80010e1000a800199c73c0cce66180040f80010e1000a80019b6d980f9b3c180040f80010e1000a8001f3ec180cdb18180040f80010e1000a8001e30c180cdb18180040f80010e1000a8001b36d980cdb3c180040f80010e1000a400199c70c0f8e66180080f8000ae1000040f8000080f8000ae1000020f9000001f7000ae1000010f9000002f7000ae100000cf900000cf7000ae1000003f9ff00f0f7000ade00048000800080f5000ade00048000800080f5000ade00048000800080f50010de000a80008000803f0001800760fb0010de000a86608cc0800c0001800c60fb0013de000a86608cc0800c38f1839ef0fd00017f0010de000a83c08780800c6cd986cc60fb0010de000a83c08300800c6cd987cc60fb0010de000a81808300800c6cd9860c60fb0010de000a81808780800c6cd986cc60fb0010de000a81808cc0800c38f1f38c30fb000dde000781808cc0800000c0f8000dde000780008000800000c0f8000ade00048000800080f5000ade00048000800080f50008de00fdff0080f5000ade00048000800080f5000ade00048000800080f5000ade00048000800080f50011de000b86608cc0801f0063e30060c0fc0011de000b86608cc080198063300060c0fc0011de000b83c0878080199cf3371e79e0fc0011de000b83c08300801f366333366cc0fc0011de000b818083008019b663e3366cc0fc0011de000b818087808019b663c3366cc0fc0011de000b81808cc08019b66363366cc0fc0011de000b81808cc0801f1c33331e6c60fc000ede00048000800080fd000006fa000ede00048000800080fd00001cfa000ade00048000800080f50008de00fdff0080f50005cf00017fff02cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0002cd0004ce0000ff02cd0002cd0002cd0004ce0000ff02cd0002cd0002cd0002cd0002cd00ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-7\par \pard\plain \s3\qj\sb160 \f20 Given this framework, when you issue the message 300 20 400 100 place: box1, the parameters fill box1's data cells held in reserve when box1 was created.  The characteristics of the data had already been determined by the ivars TopLeft and BotRight; the characteristics of those ivars had been likewise deter\-mined by the ivars X and Y, which, in turn, had been defined by the methods of their defining class, class Int.\par Therefore, you probably recognize that the relationships in Mops classes and objects are on mul\-tiple levels.  On the one hand, you have the relationships between superclasses and subclasses.  On the other hand, you have the relationships between ivars and their defining classes.  Both relationships cascade through the hier\-archy of a Mops program independently of each other.  That will become even clearer as we make one fur\-ther extension to the example above.\par \pard\plain \s15\qc\sb720 \f20 End of lesson 6\par \pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 7\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 7\par \pard\plain \s254\sb240\keepn \b\f21 Modifying a Mops program\par \pard\plain \s3\qj\sb160 \f20 We're going to add another class.  This one, however, will be a subclass of Rect because our goal is to pro\-duce an object that draws a rounded rectangle.  A rounded rectangle requires the same parameters as a rect\-angle with the addition of one more, the size of the ovals whose curvature rounds the corners.  The oval's dimensions are determined by the number of pixels high and wide as in Figure\~I\_8.  \par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw133\pich101 03b900000000005e00861101a10064000c574f524400000000005e008601000a00000000005e008698001200a400980101012800a4009e0101012300000000005d0085000002ef0008fd00007ff5ff00c008fe000007f4ff008008fe00003ff4ff00000902000001f4ff01fe000b07000007ffc00000e0f7000b0700000ffc00800030f7000b0700003fe001c0000cf7000b0700007f8002a00002f7000c080001fe000490000180f8000c080003f80008880000c0f8000c080007f0000080000060f8000c08000fe0000080000030f8000c08000f80000080000010f8000c01001ffe000380000008f8000c01003ffe000380000004f8000c01003efe000380000004f8000c08007c08080080000002f8000c0800f808880080000002f8000c0800f804900080000001f8000c0801f005500080000001f8000c0801f005500080000001f8000d0901f08220008000010080f9000d0901e10220008000008080f9000d0901e20220008000004080f9000d0101e4fe00048000002080f9000a0101effbff01f080f9000d0101e4fe00048000002080f9000d0101e2fe00048000004080f9000d0101e1fe00048000008080f9000d0101e0fe00048000010080f9000c0101e0fe000380000001f8000c0101e0fe000380000001f8000c0101e0fe000380000001f8000c0101e0fe000391000002f8000c0101e0fe000391000002f8000c0101e0fe000391000004f8000c0101e0fe00039f000004f8000c0101f0fe000391000008f8000c0101e8fe000391000010f8000c0101ecfe000391000030f8000c0101e6fe000391000060f8000c0101e3fe0003800000c0f8000c0801e180000080000180f8000b0701e0400008880002f7000b0701e030000490000cf7000b0701e00c0002a00030f7000b0701e0070001c000e0f7000b0701e001c000800380f7000a0601e0003800001cf6000a0601e00007c003e0f600090501e000007ffef500050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101e0f100050101c0f10005010180f100040001f00002ef00ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-8\par \pard\plain \s3\qj\sb160 \f20 The Toolbox call, FrameRoundRect, expects these dimensions as a 4-byte data cell\emdash a construc\-tion that Mops handles well as a Point instance variable.\par \pard \s3\qj\sb160 Since a rounded rectangle has so much in common with objects created by class Rect, the logical addition would be a subclass of class Rect called, class RoundRect.  It needs one additional piece of data, which we've named ovalsize.  The data will be converted from height and width figures to a point, which the Toolbox expects.  Therefore, the instance variable for class RoundRect will be Ovalsize of the class Point.  By virtue of its inheritance from class Rect, then, an object of class RoundRect will have a total of three ivars: TopLeft, BotRight, and Ovalsize.  TopLeft and BotRight refer to the corners the RoundRect would have if it wasn't rounded\emdash that is, the inter\-section points of the lines on which the sides lie.  These points, of course, will actually lie outside the rounded corners.\par \pard \s3\qj\sb160 Next, the class needs a method to store the values its object receives from messages.  The oval\-size value for this class will be stored by way of an init: method inside class RoundRect.  The values for the coordinate points (TopLeft and BotRight) can be initialized just like the points in class Rect, because the put: method from class Rect is still available to an object of class RoundRect.  Simply define the new part for RoundRect that stores the ovalsize, and pass the burden of coordinate storage back onto the put: method in the superclass.  \par \pard \s3\qj\sb160 class RoundRect needs a draw: method to act on the values stored in an object created from its own class.  In this particular draw: method, ^base retrieves the "base" address of the current object, i.e. the address of the beginning of the object.  In this case it is the address of the rectan\-gle coordinates.  The Toolbox uses this address to locate the values it uses as parameters. Next, the ovalsize values are put on the stack in a form the Toolbox expects (using the int: method of class Point), and then the proper Macintosh Toolbox routine (FrameRoundRect) is called to do the actual drawing on the screen.\par \pard \s3\qj\sb160 The subclass definition looks like this:\par \pard\plain \s8\li720 \f22\fs20 :class  RNDRECT  super\{ rect \}\par \par \tab point  OvalSize\par \par   :m INIT:  ( w h -- )   put:  OvalSize   ;m\par   :m DRAW:  ( -- )  \tab ^base  int: ovalSize  call frameRoundRect  ;m\par \par ;class\par \pard\plain \s3\qj\sb160 \f20 That's all that was needed to add an entirely new kind of object to Mops.  \par Once the class is defined, it is now ready for the creation of an object like:\par \pard\plain \s2\li720 \b\f22\fs20 RndRect CYNTHIA\par \pard\plain \s3\qj\sb160 \f20 To draw this object in a window ww, as we did in the previous lesson, you can do this (using either the Mops window or an editor):\par \pard\plain \s2\li720 \b\f22\fs20 20 30 init: Cynthia\par 20 20 100 60 put: Cynthia\par window ww\par test: ww\par draw: Cynthia\par \pard\plain \s3\qj\sb160 \f20 The 20 and 30 values are the width and height of the oval in the rounded corners.  The PUT: method is in\-herited from the superclass Rect, and sets the rectangle coordinate.  Look how the addition of this subclass works within the structure of the overall program in Figure\~I-9.\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw458\pich307 184600000000013301ca1101a10064000c574f524400000000013301ca01000a00000000013301ca98003a001c001e014e01e7001c001e014e01e700000000013201c9000002c70002c70002c70002c70002c70002c70002c70002c7000ae800001ffaff00fee9000ae8000010fa000002e9000ae8000010fa000002e9000ae8000010fa000002e9000ae8000010fa000002e9000ae8000010fa000002e9000ee80008100003c6061e3c0002e9000ee80008100006660633660002e9000ee80008100006060f30600002e9000ee80008100036060f1e3c0002e9000ee80008100006061983060002e9000ee80008100006061f83060002e9000ee800081000066619b3660002e9000ee80008100033c7d99e3c0002e9000ae8000010fa000002e9000ae8000010fa000002e9000ae8000010fa000002e9000ae8000010fa000002e9000ae8000010fa000002e9000ee8000810003c7c0cf9e7e002e9000ee80008100066660cc3318002e9000ee80008100066660cc3018002e90010e800081000667c0cf3018002ea00007f0ee80008100066660cc3018002e9000ee8000810006666ccc3018002e9000ee8000810006666ccc3318002e9000ee8000810003c7c78f9e18002e9000ae8000010fa000002e9000ae8000010fa000002e9000ae8000010fa000002e9000ae8000010fa000002e9000ce8000010fa000002ea00007f0ae8000010fa000002e9000ae8000010fa000002e9000ae8000010fa000002e9000ae800001ffaff00fee90006e400000ce50006e400000ce50006e400000ce50006e400000ce50006e400000ce50006e400000ce50006e400000ce50006e400000ce50006e400000ce50006e400000ce50006e400000ce50008f1000001e5fff40008f1000001e5fff4000ff100010180f600000cf3000003f4000ff100010180f600000cf3000003f4000ff100010180f600000cf3000003f4000ff100010180f600000cf3000003f4000ff100010180f600000cf3000003f4000ff100010180f600000cf3000003f4000ff100010180f600000cf3000003f4000ff100010180f600000cf3000003f4000ff100010180f600000cf3000003f4000ff100010180f600000cf3000003f4000ff100010180f600000cf3000003f4000ff100010180f600000cf3000003f40015f100010180fa00000ffaff00fcfe000007f2fffc001af500000ff9ff00f0fe000008fa000004fe000004f3000001fc001af5000008f9000010fe000008fa000004fe000004f3000001fc001af5000008f9000010fe000008fa000004fe000004f3000001fc001af5000008f9000010fe000008fa000004fe000004f3000001fc001af5000008f9000010fe000008fa000004fe000004f3000001fc001af5000008f9000010fe000008fa000004fe000004f3000001fc001af5000008f9000010fe000008fa000004fe000004f3000001fc0026f5000008f9000010fe00080800078c0c3c780004fe000004fd000401e3030f1efc000001fc0026f5000008f9000010fe000808000ccc0c66cc0004fe000004fd000403330319b3fc000001fc002bf500090800003c6061e3c00010fe000808000c0c1e60c00004fe000004fd00040303079830fc000001fc002bf5000908000066606336600010fe000808006c0c1e3c780004fe000004fd00041b03078f1efc000001fc002bf500090800006060f306000010fe000808000c0c33060c0004fe000004fd000403030cc183fc000001fc002bf500090800036060f1e3c00010fe000808000c0c3f060c0004fe000004fd000403030fc183fc000001fc002bf5000908000060619830600010fe000808000ccc3366cc0004fe000004fd000403330cd9b3fc000001fc002bf500090800006061f830600010fe00080800678fb33c780004fe000004fd000419e3eccf1efc000001fc001ff5000908000066619b36600010fe000008fa000004fe000004f3000001fc001ff500090800033c7d99e3c00010fe000008fa000004fe000004f3000001fc001af5000008f9000010fe000008fa000004fe000004f3000001fc001af5000008f9000010fe000008fa000004fe000004f3000001fc001af5000008f9000010fe000008fa000004fe000004f3000001fc0027f5000008fb000201f010fe000808001f1e319bf03e04fe000004fc0003f8f9e7e0fc000001fc0027f5000008fb000201e010fe0008080019b331d8c03c04fe000004fc0003ccc33180fc000001fc002af50009080000018cdf8001f010fe0008080019b331d8c03c04fe000004fc0003ccc30180fc000001fc002af50009080000018ec60001f810fe0008080019b331f8c03f04fe000004fc0003ccf30180fc000001fc002af50009080000018ec600019e10fe000808001f3331f8c03784fe000004fc0003f8c30180fc000001fc002af50009080000018fc600010f90fe00080800183331b8c021e4fe000004fc0003f0c30180fc000001fc002af50009080000018fc6000003d0fe00080800183331b8c000fcfe000004fc0003d8c33180fc000001fc002af50005080000018dc6fe0000f0fe00080800181e3198c0f83cfe000004fc0003ccf9e180fc000001fc0020f50005080000018dc6fe00007cfe000008fb0001f00ffe000004f3000001fc0020f50005080000018cc6fe00001efe000008fb0005f007c0000004f3000001fc001bf5000008f900041780000008fb0005f005e0000004f3000001fc001bf5000008f9000413e0000008fb0005f80478000004f3000001fc001bf5000008f9000410f0000008fb000598043e000004f3000001fc001bf5000008f90004103c000008fb000518040f000004f3000001fc001bf5000008f90004101f000008fb00051c0403c00004f3000001fc001bf5000008f900041007800008fb00050c0401f00004f3000001fc001bf5000008f900041001e00008fb00050e0400780004f3000001fc001bf5000008f900041000f80008fb00050604001e0004f3000001fc001bf5000008f9000410003e0008fb00050704000f8004f3000001fc001ff5000008f9000510000f000801fcff07f3040003e004001ff6ff01f001fc001ff5000008f90005100003c00801fc000713840000f0040010f600011001fc001ff500000ff9ff05f00001f00801fc0007118400003c040010f600011001fc0018e90002780801fc000711c400001f040010f600011001fc0018e900021e0801fc000710c4000007840010f600011001fc0022e9001c0f8801018018066010c4000001e400103e00c00c0fc0006001d8001001fc0022e9000903c801018018066010e4fe000ffc00103300000c030000600318001001fc0021e80008f801018f3c03c01064fe000f3c00103339c79e030e3c60e7bc001001fc0021e800087c01018d9803c01074fe000f0f0010336cc6cc031b3661b318001001fc0023e800081e01018d9801801034fe000f07c0103e6cc6cc031b3661f318001001fd00007f21e800080f81018d980180103cfe000f05e010306cc6cc031b36618318001001fc0021e800080be1018d980180101cfe000f047810306cc6cc031b3661b318001001fc0021e8000808f1018d8c0180101cfe000f043e103038c6c6030e3c7ce30c001001fc001be80001083dfc0001100cfe0002040f10fb000030fd00011001fc001be80001081ffc0001100efe00020403d0fb000030fd00011001fc0017e800010807fc00011006fe00020401f0f600011001fc0017e800010801fcff01f006fe000204007ff6ff01f001fc0017e800010801fc00011007fe0002040010f600011001fc0017e800010801fc00011007fe0002040010f600011001fc0017e800010801fc00071007800000040010f600011001fc001fe800010801fc001410058000000400103e00c00c07c018f8c018301001fc0021e8001b080101801806601005c000000400103300000c066018cc0018301001fc0021e8001b080101801806601004c000000400103339c79e06673ccdc79e781001fc0021e8001b0801018f3c03c01004e00000040010336cc6cc07cd98cccd9b301001fc0021e8001b0801018d98018010046000000400103e6cc6cc066d98f8cd9b301001fc0021e8001b0801018d9801801004600000040010306cc6cc066d98f0cd9b301001fc0021e8001b0801018d9803c01004700000040010306cc6cc066d98d8cd9b301001fc0021e8001b0801018d98066010043000000400103038c6c607c70cccc79b181001fc001ce8000e0801018d8c06601004380000040010f900040180001001fc001ae800010801fc00071004180000040010f900040700001001fc0017e800010801fc000710041c0000040010f600011001fc0017e800010801fc000710040c0000040010f600011001fc0017e800010801fcff07f0040e000004001ff6ff01f001fc0012e8000008fa00040406000004f3000001fc0012e8000008fa00040407000004f3000001fc0012e8000008fa00040403000004f3000001fc0012e8000008fa00040403000004f3000001fc0012e8000008fa00040403800004f3000001fc0012e8000008fa00040401800004f3000001fc0012e8000008fa00040401c00004f3000001fc0012e8000008fa00040400c00004f3000001fc001afd000001f9ff00f8f6000008fa00040400e00004f3000001fc001afd000006f9000006f6000008fa00040400600004f3000001fc0018fd000008f9000001f600000ffaff04fc00700007f2fffc0012fd000010f8000080ed000030f9000003f40012fd000020f8000040ed000038f9000003f40018fd000a2000f8000c07c0000c0040ed000018f9000003f40018fd000a4000cc000c0660001c0020ed000018f9000003f40018fd000a4000cce39e0667330c0020ed00001cf9000003f40018fd000a4000cdb6cc07cd9e0c0020ed00000cf9000003f40018fd000a4000f9f60c066d8c0c0020ed00000ef9000003f40018fd000a4000f1860c066d8c0c0020ed000006f9000003f40018fd000a4000d9b6cc066d9e0c0020ed000007f9000003f40018fd000a2000cce38607c7330c0040ed000003f9000003f40013fd000020f8000040ed00010380fa000003f40013fd000010f8000080ed00010180fa000003f40013fd000008f9000001ec00010180fa000003f40013fd000006f9000006ec000101c0fa000003f40012fd000001f9ff00f8eb0000c0fa000003f40012fa00044000400040e90000e0fa000003f40012fa00044000400040e9000060fa000003f40012fa00044000400040e9000070fa000003f40018fa000a40004000401f8000c003b0ef000030fa000003f40018fa000a4330466040060000c00630ef000038fa000003f40018fa000a4330466040061c78c1cf78ef000018fa000003f40018fa000a41e043c04006366cc36630ef00001cfa000003f40017fa000a41e041804006366cc3e630ef00010c07f2fffc0019fa000a40c041804006366cc30630ef00010c04f3000001fc0019fa000a40c043c04006366cc36630ef00010e04f3000001fc0019fa000a40c0466040061c78f9c618ef00010604f3000001fc0016fa000740c0466040000060ec00010704f3000001fc0016fa00074000400040000060ec00010304f3000001fc0013fa00044000400040e900010384f3000001fc0013fa00044000400040e900010184f3000001fc001bfa00007ffeff00c0e9000101c4fc00041e3030f1e0fd000001fc001afa00044000400040e80000c4fc00043330319b30fd000001fc0019fa00044000400040e80000e4fc000330307983fc000001fc001bfa00044000400040e8000064fd000501b03078f1e0fd000001fc0021fa000b43304660400f8031f1803060ef000064fc00043030cc1830fd000001fc0021fa000b43304660400cc03198003060ef000074fc00043030fc1830fd000001fc0021fa000b41e043c0400cce799b8f3cf0ef000034fc00043330cd9b30fd000001fc0022fa000b41e04180400f9b31999b3660ef00003cfd0005019e3eccf1e0fd000001fc0019fa000b40c04180400cdb31f19b3660ef00001cf3000001fc0019fa000b40c043c0400cdb31e19b3660ef00001cf3000001fc0019fa000b40c04660400cdb31b19b3660ef00000cf3000001fc0019fa000b40c04660400f8e19998f3630ef00000ef3000001fc0016fa00044000400040fd000003ed000006f3000001fc0020fa00044000400040fd00000eed000006fd0006f8ccf0f8f9e7e0fe000001fc001cfa00044000400040e8000007fd0006ccecd8ccc33180fe000001fc001cfa00007ffeff00c0e8000007fd0006ccecccccc30180fe000001fc0015dc00010780fe0006ccfcccccf30180fe000001fc0015dc00010580fe0006f8fcccf8c30180fe000001fc0015dc000105c0fe0006f0dcccf0c30180fe000001fc0015dc000104c0fe0006d8dcd8d8c33180fe000001fc0015dc000104e0fe0006ccccf0ccf9e180fe000001fc000bdc00010460f4000001fc000bdc00010470f4000001fc000bdc00010430f4000001fc000bdc00010430f4000001fc000bdc00010438f4000001fc000bdc00010418f4000001fc000bdc0001041cf4000001fc000bdc0001040cf4000001fc000bdc0001040ef4000001fc000bdc00010406f4000001fc000bdc00010407f4000001fc000ddc000204031ff6ff01f001fc000ddc0002040390f600011001fc000ddc0002040190f600011001fc000ddc0002040190f600011001fc0015dc000f0401d00f80300301e000380300001001fc001d02000001f5ff0080ec000a0400d00cc0000303300018fe00011001fc001d02000006f5000060ec000f0400f00cce71e783366718e73e701001fc001d02000008f5000010ec000f0400700cdb31b303366d99b306d81001fc001d02000010f5000008ec000f0400700f9b31b30333c798e30cf81001fc001d02000020f5000004ec000f0400100c1b31b30333cd983318c01001fc00260f0000207c0033e000301e0000c60c0004ec000f0400100c1b31b303318d99b330d81001fc00260f000040660033300030330000c6000002ec000f0400100c0e31b181e18798e33e701001fc001e0f0000406678f3338e78303679e79c7002ec0002040010f600011001fc001e0f000040666db336db3030366cc6ccd802ec0002040010f600011001fc001e0f0000407c6db3e7d83030366cc6cc7802ec0002040010f600011001fc001e0f000040786db3c6183030366cc6ccd802ec0002040010f600011001fc001e0f0000406c6db366db3033366cc6ccd802ec000204001ff6ff01f001fc001b0f000020666cf3338e181e1e6c66cc7804ec000004f3000001fc001602000020fa000006fd000004ec000004f3000001fc001602000010fa00001cfd000008ec000004f3000001fc001202000008f5000010ec000004f3000001fc001202000006f5000060ec000004f3000001fc001202000001f5ff0080ec000004f3000001fc0012fa00048000800080e8000004f3000001fc0012fa00048000800080e8000004f3000001fc0012fa00048000800080e8000004f3000001fc0012fa00048000800080e8000004f3000001fc0018fa000a80008000803f0001800760ee000004f3000001fc0018fa000a86608cc0800c0001800c60ee000004f3000001fc0018fa000a86608cc0800c38f1839ef0ee000004f3000001fc0016fa000a83c08780800c6cd986cc60ee000007f2fffc0010fa000a83c08300800c6cd987cc60d90010fa000a81808300800c6cd9860c60d90010fa000a81808780800c6cd986cc60d90010fa000a81808cc0800c38f1f38c30d9000dfa000781808cc0800000c0d6000dfa000780008000800000c0d6000afa00048000800080d3000afa00048000800080d30008fa00fdff0080d3000afa00048000800080d3000afa00048000800080d3000afa00048000800080d30011fa000b86608cc0801f0063e30060c0da0011fa000b86608cc080198063300060c0da0011fa000b83c0878080199cf3371e79e0da0011fa000b83c08300801f366333366cc0da0011fa000b818083008019b663e3366cc0da0011fa000b818087808019b663c3366cc0da0011fa000b81808cc08019b66363366cc0da0011fa000b81808cc0801f1c33331e6c60da000efa00048000800080fd000006d8000efa00048000800080fd00001cd8000afa00048000800080d30008fa00fdff0080d3000afa00048000800080d3000afa00048000800080d3000afa00048000800080d3000afa00048000800080d3000ffa000983308c0c800f0001c018d8000efa000883308ccc80198000c0d70011fa000b833086d88019b338c739f380da0011fa000b83f087f88019b36ccd9836c0da0011fa000b833087f880199e3cc71867c0da0010fa000a8330833080199e6cc198c6d90011fa000b8330833080198c6ccd9986c0da0011fa000b83308330800f0c3cc719f380da000afa00048000800080d3000afa00048000800080d30008fa00fdff0080d30002c70004c800007f02c70002c70002c70002c70002c70002c70002c70002c70004c800007f02c70002c70002c70002c70002c70002c70002c70002c70002c70002c700ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-9\par \pard\plain \s3\qj\sb160 \f20 Next, you'll be introduced to the powerful building blocks of Mops: the predefined classes.\par \pard\plain \s15\qc\sb720 \f20 {\fs0 End of lesson 7\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 8\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 8\par \pard\plain \s254\sb240\keepn \b\f21 Predefined classes\emdash an introduction\par \pard\plain \s3\qj\sb160 \f20 Mops comes with a number of predefined classes that provide you with a strong foundation upon which to build your programs.  The more you know about these classes\emdash especially their meth\-ods and the powers of the objects they create\emdash the more comfortable you will be in designing your programs.  Mops in many ways is like an Erector Set\emdash we provide the pieces, you provide the imagination to turn those pieces into a usable program.\par \pard \s3\qj\sb160 Predefined classes serve an important function in Mops.  They insulate you from the concerns of extensive stack manipulations and other memory maintenance chores for frequently used Mac Toolbox operations: windows, menus, graphics, disk file manipulation, and dozens more.  In fact, most of the complex stack stuff is handled within the predefined Mops kernel, so even the methods in the predefined classes will be largely understandable to you by the time you're fin\-ished with this tutorial.  \par \pard \s3\qj\sb160 What this all means is that while you send comparatively simple messages to objects derived from those classes, you are automatically performing very sophisticated memory manipulations not far different from those that an assembly language programmer would use.  You are also left with fewer concerns about making your program Mac-like, since the predefined classes point you in the right direction from the very start.\par \pard \s3\qj\sb160 You will soon want to begin scanning through the source code of the predefined classes.  While much of the code is already compiled in the disk file Mops.dic, all the Mops source code is supplied, in the folder "Mops source".  You can view and print the source code files using any text editor or word processor.  Eventually, you will find it helpful to keep a printout of all the source code in a looseleaf binder.  At your earliest convenience print out the text files in the System, Toolbox, and Demo classes folders within the Mops source folder.  Put the printouts in alphabetical order according to the name of the files.  You will then have a much easier time tracing the hierarchy of a class chain or finding the details about a particular method of a class.\par \pard \s3\qj\sb160 As you can see within the Mops source folder, Mops predefined classes are divided into three groups.  One group, called Mops System classes, consists of classes that are not necessarily spe\-cific to the Macintosh.  The System classes control things like file manipulation, basic data struc\-tures (integers, variables, arrays), and other computer housekeeping tasks.  These classes, of course, have been designed to work specifically with the Macintosh, but they work largely behind the scenes, since they don't directly affect the way you and the computer communicate with each other.\par \pard \s3\qj\sb160 A second group, called Toolbox classes, are those that make the connection between the pro\-grammer/user and the graphic elements of the Macintosh.  "Graphic elements" is a broad cate\-gory that includes such things as menus, windows, text input, mouse manipulation, and program control via the mouse or keyboard.  The Toolbox classes are the highly visible, "show biz" classes of Mops.\par \pard \s3\qj\sb160 The third group, Demo classes, consists of demonstrations files.\par \pard \s3\qj\sb160 Most of the predefined classes in both categories are subclasses of a kind of Master Superclass, called class Object.  While class Object, itself, is a subclass of yet another superclass, class Meta, you won't have to concern yourself with that particular relationship.  Just think of class Object as the ultimate superclass of all classes, and you won't go wrong.  Class Object is predefined in Mops, in the Mops source file "Class".\par \pard\plain \s254\sb240\keepn \b\f21 Data structure classes\par \pard\plain \s3\qj\sb160 \f20 Among the most used predefined classes are several that are grouped into a cluster called "data structures."  Figure\~I-10 shows the organization of the Mops data structure classes, which are listed in the files called "Struct" and "Struct1."  \par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw453\pich205 03070000000000b901c01101a10064000c574f52440000000000b901c001000a0000000000b901c00a0000000000000000340036004a004c008507000200023834000000a0001d00dd3822001b00bc000fa10096000c0100000001000000000000002c000800140554696d65730300140d000c2e00040000ff002baf12064f626a656374a0009734006000000076002238a10096000c01000000010000000000000028006d000b03696e74a0009734006000330076005738a10096000c010000000100000000000000293203766172a00097340060006f007600a138a10096000c010000000100000000000000293a0668616e646c65a0009722002b0066000b2200550088bc0023000b2200550088000b220055006600f822002b00110035a10096000c0100000001000000000000002c000c00150948656c7665746963610300152800b4001f0e5343414c415220434c4153534553a000973400360154004c019838a10096000c020000000100000000000000030014280043015b0b696e64657865642d6f626aa00097a10096000c0100000001000000000000002800430052086c6f6e67776f7264a0009722004a0174000834006001270076015138a10096000c0100000001000000000000002bdd2a056172726179a00097340060015a0076018a38a10096000c010000000100000000000000293307782d6172726179a00097070001000120003600fa00b600faa10096000c0100000001000000000000000300152800b4012c0f494e444558454420434c4153534553a0009734003600b9004c00da070002000238a10096000c01000000010000000000000003001428004300bd0528636f6c29a0009722002b00c7000b22005201386f003400850113009b015938a10096000c0100000001000000000000002b5e4f0b6f7264657265642d636f6ca0009720002b0003002b01b522002b0174000b22004a00c7603b2200520138000e3400600190007601bf38a10096000c01000000010000000000000028006d019506774172726179a0009722005201a7000c2200520171000c22007401380011ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-10\par \pard\plain \s3\qj\sb160 \f20 These classes form the basis of much number and string (text character) storage and manipula\-tion inside a Mops program.  In the rectangle example in Lesson 6, you already saw how instance variables of one basic data structure class, Int, were used as components of coordinate point objects, which were, in turn, used as components for a rectangle object.\par The classes to the left of the dotted line in Figure\~I-10 are called {\ul scalar} {\ul classes} because they reserve a fixed amount of memory space for each instance of their class (just like a ruler marks a fixed area according to its "scale").  An integer object, for example, always has two bytes reserved for data, whether or not both bytes are filled with data when an integer object is created.\par \pard \s3\qj\sb160 To the right of the dotted line in Figure\~I-10 are a group of {\ul indexed} {\ul classes}.  You can tell from the names of most of them that these classes provide the rules for setting up arrays in Mops pro\-grams.  An indexed array is a convenience that helps your program reach into a list of data in memory and pick out desired pieces.  If you consider that an array object might look something like Figure\~I-11 in memory:\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw128\pich157 07370000000000a100801101a10064000c574f52440000000000a1008001000a0000000000a10080980010004b00a400eb0123004b00a400eb01230000000000a0007f000002f10002f10002f10002f1000902000001f6ff01f8000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108001105000001000082fe00061000c00000080010050000010000c6fd000001fe00010800110f0000010000aa38f0e031638700000800110f00000100009244891011910880000800110f00000100008244890011110880000800110f0000010000824488e011110880000800110f00000100008244881011110880000800110f00000100008244891011110880000800110f00000100008238f0e0111107000008000d02000001fd000080fb000108000d02000001fd000080fb000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6ff01f8000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f600010800100400000100c4fe00010404fd000108000f0400000100c4fe000004fc00010800110f00000100a471661c3c0c447173800800110f00000100a48999224404448984400800110f00000100947911224404447904000800110f000001009489113e4404288903800800110f000001008c8911204404288900400800110f000001008c8911224404108904400800110f000001008479111c3c041079038008000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6ff01f8000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108001105000001020004fe00014040fe000108001005000001020004fe000040fd00010800110f000001022c3c7111c3c0c44717380800110f00000102324489122440444898440800110f00000102224488a22440444790400800110f000001022244f843e440428890380800110f00000102224480a20440428890040800110f00000102224489122440410890440800110f00000102223c7111c3c04107903808000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f600010800110f00000107cf9f3e7cf9f3e7cf9f3e08000902000001f6000108000902000001f6000108000902003001f6000108000902004801f6000108000902008401f6000108000902008401f6000108000902008401f6000108000902008401f6000108000902008401f6000108000902004801f6000108000902003001f6000108010902000001f6000108010902000001f6000108010902000001f600010801110f00000107cf9f3e7cf9f3e7cf9f3e08000902000001f6000108000902000001f6000108000902000001f6000108000902001001f6000108000902003001f6000108000902001001f6000108000902001001f6000108000902001001f6000108000902001001f6000108000902001001f6000108000902001001f6000108000902001001f6000108000902000001f6000108000902000001f600010800110f00000107cf9f3e7cf9f3e7cf9f3e08000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902003801f6000108000902004401f6000108000902008401f6000108000902000401f6000108000902000801f6000108000902001001f6000108000902002001f6000108000902004001f600010800090200fc01f6000108000902000001f6000108000902000001f6000108000902000001f600010800110f00000107cf9f3e7cf9f3e7cf9f3e08000902000001f6000108000902000001f6000108000902000001f600010800090200fc01f6000108000902000801f6000108000902001001f6000108000902003001f6000108000902000801f6000108000902000401f6000108000902000401f6000108000902008801f6000108000902007001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6ff01f8000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108000902000001f6000108010902000001f6000108010902000001f6000108010902000001f60001080105f30001080105f30001080104f200000104f200000102f10002f10002f10002f100ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-11\par \pard\plain \s3\qj\sb160 \f20 you'll notice that some data cell have reference numbers attached to them.  Each number is an {\ul index}\emdash like an index tab in a three-ring binder\emdash to that data cell.  It is much easier to reference an object's data by an in\-dex number than it is to cite the specific address in memory for the piece of data your program needs at a given moment.\par \pard \s3\qj\sb160 The differences between the various indexed classes in Figure\~I-10 include the number of bytes each data cell is to contain (1, 2, or 4) and other considerations discussed later.\par \pard \s3\qj\sb160 You'll also notice that the class Ordered-col has two lines leading to it\emdash this is because it has two superclasses, that is, it uses multiple inheritance.  The class (col) defines some methods that all "collection" type classes need, regardless of the size of their elements.  Then the array superclass specifies that the class Ordered-col has 4-byte elements.\par \pard \s3\qj\sb160 The class (col) is an example of a class which doesn't have any objects of its own.  It is just a convenient way of defining a group of classes, where these classes have a number of methods in common.  Rather than repeat the definitions of these methods in each class definition, we "split them off" into a single superclass in which they can be defined just once.  We call this kind of superclass a {\ul generic superclass}.  The class Longword is another example of a generic superclass.  It is useful for defining methods common to the classes Var and Handle, but it doesn't have any objects of its own.\par \pard\plain \s254\sb240\keepn \b\f21 Other predefined classes\par \pard\plain \s3\qj\sb160 \f20 Another group of classes that gets a workout is the one that links you to QuickDraw, which is Macintosh's powerful tool for accessing many of its graphics features.  Figure\~I-12 shows the QuickDraw classes and the superclasses from which they were derived:\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw433\pich138 02a000000000008501a71101a10064000c574f524400000000008501a701000a00000000008501a70a00000000000000003400360039004c005d070002000238340000008f001d00cc3822001b00ab000fa10096000c0100000001000000000000002c000800140554696d65730300140d000c2e0004000000002b9e12064f626a656374a0009722002b004a000b22002b001a000b340036015d004c01a038a10096000c0200000001000000000000002bc6310b696e64657865642d6f626aa0009734003600a8004c00c93822002b00b6000b20002b0000002b01a422002b017c000b3400360009004c002d38a10096000c010000000100000000000000280043000e05706f696e74a00097a10096000c0100000001000000000000002b33010472656374a000973400360069004c009b38a10096000c010000000100000000000000292e0867726166706f7274a00097a10096000c010000000100000000000000293e0469636f6ea0009722002b0080000b22004a004a000e3400690014007f004438a10096000c010000000100000000000000280076001907726e6452656374a0009722005800147400220058002b0011340069004a007f006e38a10096000c0100000001000000000000002939046f76616ca00097220058005b001134003600d2004c0110383400360119004c014538a10096000c01000000010000000000000028004400d70851446269746d6170a00097a10096000c010000000100000000000000280043011e0770696374757265a0009722002b00ee000b22002b012d000b22004a017c000b340055016b0068019238a10096000c0100000001000000000000002b551f056172726179a00097340071016b0084019538a10096000c0100000001000000000000002a1c05696d616765a00097220066017c000bff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-12\par \pard\plain \s3\qj\sb160 \f20 Other graphics oriented classes include those that help you create windows, menu bars, and menus, plus a class called Control that reigns over reactions to clicking the Mac mouse on but\-tons and scroll bars.  In ad\-dition, there are numerous predefined classes and objects that give you shortcuts to opening and closing files, sending output to the printer, producing sound, and other functions.  Part\~III of this manual contains in-depth explanations of Mops's predefined classes.  You will look to these reference sections often once you have completed this tutorial.\par \pard\plain \s15\qc\sb720 \f20 {\fs0 End of lesson 8\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 9\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 9\par \pard\plain \s254\sb240\keepn \b\f21 Defining new Mops words\par \pard\plain \s3\qj\sb160 \f20 We said earlier that you can add words to the Mops dictionary while building a program.  In fact, that is largely what programming in Mops is all about.  Class names, method names, and object names become part of the dictionary in your program.  Defining new words in Mops also lets you write your own shortcuts by defining one short and simple word to take the place of several commands that otherwise require more typ\-ing precision.  \par \pard \s3\qj\sb160 Special Note:  Unless you save to disk the dictionary you've assembled for a program, the words and defi\-nitions will not be remembered by the Mac if you quit Mops.  In the remainder of this tutorial, you will be defining new words that pertain only to this tutorial.  If you wish to save the current state of the dictionary at the end of a lesson, then choose Save As... from the File menu and type in a name for the file, or else you may choose Save if you have already given it a name.  You will be able to recall the dictionary at a later time by double-clicking its icon.\par \pard \s3\qj\sb160 The first definition exercise will be to define a new word that takes care of the symbols in a simple addition problem.  The new word is "add," although you could choose any word not already in the Mops dictionary.  \par \pard \s3\qj\sb160 The safest way to doublecheck that a new word you want to define is not in the dictionary, is to issue the "tick" command with the word you want to test for.  In Mops, a tick is an apostrophe.  By typing apostro\-phe, space, and the word you're testing, Mops searches the dictionary for the occurrence of that word.  If the word is in the dictionary, tick will leave a number on the stack (the location in memory of the word's definition).  But if the word is not in the dictionary, the message "not found" appears on the screen, and you're in the clear to define a word with that name.  (Remember to put <ENTER> at the end of every line you type):\par \pard\plain \s2\li720 \b\f22\fs20 ' window .\par \pard\plain \s8\li720 \f22\fs20 9557892 \par \pard\plain \s2\li720 \b\f22\fs20 ' twindow .\par \pard\plain \s8\li720 \f22\fs20 \par Error # -13 : undefined word\par ' twindow .\par          ^\par Current object:  TW    Class:  \par Stack:  Depth 1 \par  9568706  $9201C2    \par Return stack:  Depth 43 \par  9513434  $9129DA ?NOTFOUND   \par  9513710  $912AEE '   \par  9502126  $90FDAE (no name)   \par \pard\plain \s3\qj\sb160 \f20 You define a new Mops word by typing a colon, a space, the name of the new word, one or more spaces or tabs, the sequence of values and/or commands to be performed when you use that new word, and then a final semicolon, indicating the end of your new definition.  This kind of Mops definition is called, aptly enough, a colon definition.  Notice especially that although class and method definitions don't want a space between the colon and either class or m, these standard colon definitions do.  It might be easier to think of :class and :m as being special purpose colon definitions.\par \pard \s3\qj\sb160 Here's an example that defines a new word, "add," which will perform the addition of two num\-bers on the stack, display the results, and move the Mops prompt to the left margin of the next line.  (Remember, if you're typing the definition from the Mops prompt, you don't need to type the stack definition.  We just include it here for completeness.):\par \pard\plain \s2\li720 \b\f22\fs20 : add  ( n1 n2 --  )  + . cr ;\par \pard\plain \s3\qj\sb160 \f20 The + operation expects to find two numbers on the stack.  Therefore, to use your new word, you would type two numbers (which go onto the stack) and then the new word:\par \pard\plain \s2\li720 \b\f22\fs20 2 6 add\par \pard\plain \s8\li720 \f22\fs20 8\par \pard\plain \s3\qj\sb160 \f20 A good exercise at this point would be to define new words to simplify the other basic arithmetic operations.\par \pard\plain \s254\sb240\keepn \b\f21 The return stack\par \pard\plain \s3\qj\sb160 \f20 As we have seen, a Mops program basically consists of a sequence of words, and messages sent to objects (which cause a method to be executed).  The definitions of these words and methods can contain many other words and messages.  If you think about what must happen when Mops is executing one definition or method, you can see that when it has to go and execute other words or methods, it will then need to come back to where it was.  It needs to mark its place in some way.  The way this is handled is with a second stack, called the {\ul return stack}.  When Mops has to execute something somewhere else, it saves its current position as an address on the return stack.  In that other place, if it has to go yet somewhere else, it pushes the new address on to the return stack as well.  This is how words or methods can call other words or methods which can in turn do the same, down to a great depth.  And by using a second stack, all these {\ul return addresses} on the return stack don't interfere with items on the parameter stack.\par \pard \s3\qj\sb160 Normally you won't need to worry about what's going on on the return stack.  When there's an error, however, it's usually very useful to know what the program was executing, and where it had come from before that.  Our error dump includes a dump of the return stack.  Mops puts some other items besides return addresses on the return stack, but for items there which look like return addresses from within a word, the dump will include the name of the word.  If you look at the dump just above, for example, you can see that the address of ' (tick) is underneath the address of ?NOTFOUND.  This shows that ' called ?NOTFOUND and it was at that point that the error was detected.  (?NOTFOUND in fact checks the result of a dictionary search to see if it was successful).\par \pard \s3\qj\sb160 We can't display the names of methods in this way, however, since the names of methods aren't stored in a readable form.  However just seeing the names of the words which were executing at the time of an error can give you very useful information.\par \pard\plain \s254\sb240\keepn \b\f21 Named input parameters\par \pard\plain \s3\qj\sb160 \f20 We're going to make Mops a little easier for you by reducing what may be undue concern about the way numbers are stored on, and recalled from, the parameter stack.  Whenever you define a new Mops word, Mops lets you assign names to the parameters that are passed to it.  After that, you needn't worry about the stack or the order of the numbers:  when you need them for opera\-tions, simply call them by name.\par \pard \s3\qj\sb160 As an example, use the arithmetic problem cited earlier.  If you recall, the problem was:\par \pard\plain \s8\li720 \f22\fs20 {\ul 5 * 12 * 50}\par \pard \s8\li720     40\par \pard\plain \s3\qj\sb160 \f20 To calculate this with Mops previously, you had to multiply the three numbers in the numerator, and then place the denominator on the stack before dividing.  Watch how this is simplified in a definition that per\-forms the math with named input parameters:\par \pard\plain \s8\li720 \f22\fs20 : formula  \{ denom n1 n2 n3 -- solution \}\par \tab n1 n2 n3 * * denom /  ;\par \pard\plain \s3\qj\sb160 \f20 The magic of named input parameters takes place inside the curly brackets.  The syntax is delib\-erately similar to a stack comment, because it is in fact a kind of stack description.  So, in this case, whenever the formula is exe\-cuted like this:\par \pard\plain \s2\li720 \b\f22\fs20 40 5 12 50 formula .\par \pard\plain \s8\li720 \f22\fs20 75\par \pard\plain \s3\qj\sb160 \f20 the first thing that happens is that the values are taken from the stack and put in a special area of memory where they are tied to the names in the curly brackets {\ul in the same order as they were put on the stack}.  Once that happens, their order is unimportant.  Their names are used to fill in the values places in the calculation.\par \pard \s3\qj\sb160 But note that the "solution" parameter is actually a comment\emdash anything between the -- and the \} is treated as a comment.  You should use this comment area to indicate what your definition leaves on the stack, exactly as in a normal stack comment.\par It is important to bear in mind that the names and values you assign to named input parameters are valid {\ul only within their own colon definition}.  You could use the same names with the same or different values in other colon definitions without any interference.\par \pard \s3\qj\sb160 Named input parameters become very powerful in the way you can adjust their values in the course of a colon definition.  Consider, for example, this formula:\par \pard\plain \s8\li720 \f22\fs20 a{\up6 2 }+ b{\up6 2\par }\pard\plain \s3\qj\sb160 \f20 Since the computer can compute only one square operation at a time, it needs to hold the result of one square while it calculates the second before it can add the two squares.  A Mops definition for this formula would be:\par \pard\plain \s8\li720 \f22\fs20 : formula1  \{ a  b -- solution \}\par \tab a  a  *  -> a\par \tab b  b  *\par \tab a  +    .  cr  ;\par \pard\plain \s3\qj\sb160 \f20 The arrow operation (->) stores the value currently on the stack (the result of a-squared) into the named pa\-rameter, a.  This overwrites the original value in a, which came from the stack in the opening instant of this definition's execution.  Near the end of execution, a is recalled to be added to the results of b times b.  To do the same formula without named input parameters would require several stack manipulations that sometimes trip up even the pros.\par \pard \s3\qj\sb160 Incidentally, there are other operations you can perform to a number stored in a named input parameter.  You can add a number to what is there, or subtract a number from what is there, with the ++>  and --> operations.  For example, \par \pard\plain \s8\li720 \f22\fs20 10 ++> denom\par \pard\plain \s3\qj\sb160 \f20 inside a colon definition adds ten to the value stored in the named input parameter named denom.\par \pard\plain \s254\sb240\keepn \b\f21 Local variables\par \pard\plain \s3\qj\sb160 \f20 While we're at it, we'll also introduce you to a similar concept, called {\ul local} {\ul variables}.  They, too, appear in\-side curly brackets within a colon definition, but instead let you assign names to inter\-mediate results that can occur inside such a definition.  Local variables are preceded by a back\-slash.  Take, for instance, the for\-mula,\par \pard\plain \s8\li720 \f22\fs20 (a+b-3c)/(b+2c)\par \pard\plain \s3\qj\sb160 \f20 The formula definition would be:\par \pard\plain \s8\li720 \f22\fs20 : formula2  \{ a  b  c  \\  num den -- result \}\par \tab a b +  3 c *  -  -> num\par \tab b  2 c *  +      -> den\par \pard\plain \s3\qj\sb160 \f20 \tab num  den  /  ;\par \pard \s3\qj\sb160 In this example, a, b, and c in the curly brackets are named parameters that take on the values in the stack.  The backslash indicates that the names to the right are local variables that will be called into action within the definition.  In the example, the numerator and denominator are cal\-culated separately and stored (->) in their respective local variables.  Then, the local variables are recalled in the proper order for the divi\-sion operation to reach the result.\par \pard \s3\qj\sb160 An important thing to remember is that local variables aren't initialized to any particular value at the beginning of the definition.  Don't assume they're initially zero, let's say.  They might have anything at all in them, and it might be different in different runs of your program.  Thus your first use of a local variable should be to store something into it with ->.\par \pard\plain \s15\qc\sb720 \f20 End of lesson 9\par \pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 10\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 10\par \pard\plain \s254\sb240\keepn \b\f21 Additional math\par \pard\plain \s3\qj\sb160 \f20 This is a good time to learn several other Mops math operations.  They're rather simple, so you may as well get them out of the way now, and use them as you go along.  We won't be saying too much about them here, but experiment with each of them for a bit to get a feeling for how they work.\par \pard \s3\qj\sb160 One group of operations compares the values of the two topmost items in the parameters stack.  The result of the comparison is placed on the stack. Here they are:\par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 MIN\tab ( n1 n2 -- n-min )\tab Leaves the smaller of n1 and n2 on the stack.\par MAX\tab ( n1 n2 -- n-max )\tab Leaves the larger of n1 and n2 on the stack.\par \pard\plain \s3\qj\sb160 \f20 The next group manipulates the signs of integers\emdash positive or negative.  One returns the absolute value (positive value) of the topmost number in the stack.  The other changes the sign of the topmost number in the stack: if the original is positive, the operation changes it to negative, and vice versa.  Here are these two operations:\par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 ABS\tab ( n -- |n| )\tab Leaves the absolute value of n on the stack.\par NEGATE\tab ( n -- -n )\tab Changes the sign of the topmost number on the stack.\par \pard\plain \s3\qj\sb160 \f20 Next is a laundry list of simple arithmetic shortcuts.  Their meanings should be self-evident.  \par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 1+\tab ( n -- n+1 )\tab Adds 1 to the number on the stack.\par 1-\tab ( n -- n-1 )\tab Subtracts 1 from the number on the stack.\par 2+\tab ( n -- n+2 )\tab Adds 2 to the number on the stack.\par 2-\tab ( n -- n-2 )\tab Subtracts 2 from the number on the stack.\par 2*\tab ( n -- 2n )\tab Multiplies the number on the stack by 2.\par 2/\tab ( n -- n/2 )\tab Divides the number on the stack by 2.\par 4*\tab ( n -- 2n )\tab Multiplies the number on the stack by 4.\par 4/\tab ( n -- n/2 )\tab Divides the number on the stack by 4.\par \pard\plain \s254\sb240\keepn \b\f21 Displaying text\par \pard\plain \s3\qj\sb160 \f20 Many times in a program, you want to display text on the screen.  It may be to display a heading on a screen or to "humanize" a purely numeric answer by describing what the number is.  In the latter case, you are ac\-tually combining the display of a pre-planned text message with a numeric answer, which can change from execution to execution.\par In Mops, the simplest way to display a text message is by preceding it with a special print com\-mand called the dot-quote, or ." in Mops notation.  It's just like the dot command, but instead of looking to the stack for something to display, the dot-quote command displays everything that follows it, up to a closing quotation mark.\par \pard \s3\qj\sb160 The quotation marks fall into a broad category of symbols in computer languages called {\ul delimiters}, because they {\ul delimit} or set the limits for something\emdash in this case a text message.  The text within the delimiters is called a {\ul text} {\ul string}, or just {\ul string}.  Note that for normal Mops words, spaces or tabs or carriage returns are delimiters.  However for message strings we usually want to be able to include spaces as part of the string, so we use " as a delimiter instead.  However, since ." is a Mops word, it must itself be delimited by a space.  This space is {\ul not} included as part of the string, but the first character after the space is the first character of the string.\par \pard \s3\qj\sb160 Text strings can be made part of Mops word definitions very easily.  In the following example, you'll define the word "hi" so that it prints a greeting message from the computer.\par \pard\plain \s2\li720 \b\f22\fs20 : hi  ." hello, this is Mops operating on the Macintosh."  cr ;\par \pard\plain \s3\qj\sb160 \f20 Now, when you type "hi" at a Mops prompt, the message between the quotes appears on the screen.  Note again, that the space immediately after the ." is not part of the message, but just serves to delimit ." as a word.  If the space wasn't there, Mops would try to interpret ."hello, as a word, which certainly isn't what we want.\par \pard \s3\qj\sb160 One of the nice things about Mops is that you can use previously defined words inside the defi\-nitions of new words.  Therefore, you could take the "hi" Mops word and incorporate it inside yet another Mops definition.  For example:\par \pard\plain \s2\li720 \b\f22\fs20 : greeting   hi ." How are you?" cr ;\par \pard\plain \s3\qj\sb160 \f20 produces not only the message of "hi", but an additional text string whenever you type "greeting" at a Mops prompt.  Try it.\par \pard \s3\qj\sb160 Now combine your knowledge of arithmetic operations and text strings to humanize your earlier arithmetic word, add.  In this case, you're going to redefine add.  To do this, simply type in the new definition.  Mops may alert you that you have redefined the word when you press Return, depending on how Mops has been set up (we will describe this later).  Here's the new definition:\par \pard\plain \s2\li720 \b\f22\fs20 : add  ." The sum is: " + . cr ;\par \pard\plain \s3\qj\sb160 \f20 To use the new word, issue the command at the Mops prompt like this:\par \pard\plain \s2\li720 \b\f22\fs20 10 20 add\par \pard\plain \s8\li720 \f22\fs20 The sum is:  30\par \pard\plain \s254\sb240\keepn \b\f21 Explicit stack manipulations\par \pard\plain \s3\qj\sb160 \f20 While named input parameters and local variables will disguise many stack manipulations for you, there may be occasions when the order of items in the stack requires an explicit move of some values for a particular operation.  Conversely, the stack may have a number on it that you simply don't need anymore, and want to dispose of.  In these cases, you can choose from a series of stack manipulation commands.\par \pard \s3\qj\sb160 Here are three stack manipulation operators that you should keep in the back of your mind:\par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 SWAP\tab ( n1 n2 -- n2 n1 )\tab Switches the order of the topmost two items in the parameters stack.\par DUP\tab ( n -- n n )\tab Duplicates the topmost stack item and places the new copy on top.\par DROP\tab ( n --   )\tab Removes the topmost stack item.  If another item is next in line, it then becomes the top\-most item.\par \pard\plain \s3\qj\sb160 \f20 SWAP is used most often when two values are on the stack, but their order is wrong for a sub\-traction or di\-vision operation.  In fact, it could have been used in a less elegant definition for the problem cited in Lesson 3,\par \pard\plain \s8\li720 \f22\fs20  {\ul 5 * 12 * 50}\par \pard \s8\li720      40\par \pard\plain \s3\qj\sb160 \f20 By putting the divisor at the bottom of the stack (the first one in), you can perform all the mul\-tiplications and then switch the order of the two remaining numbers on the stack so they divide properly.  The revised oper\-ation would be:\par \pard\plain \s8\li720 \f22\fs20 40 5 12 50 * * swap /\par \pard\plain \s3\qj\sb160 \f20 The colon definition that calculates this would be:\par \pard\plain \s8\li720 \f22\fs20 : formula  ( denom num1 num2 num3 -- solution )\par \tab * * swap / ;\par \pard\plain \s3\qj\sb160 \f20 DUP is sometimes useful for particular arithmetic applications.  An example of how DUP works is to use it to calculate the square of a number.  Instead of entering two exact values onto the stack, you can enter only one, duplicate it, and then multiply the two values on the stack like this:\par \pard\plain \s8\li720 \f22\fs20 4 dup *\par \pard\plain \s3\qj\sb160 \f20 Calculating the cube of a number could be performed like this:\par \pard\plain \s8\li720 \f22\fs20 4 dup dup * *\par \pard\plain \s3\qj\sb160 \f20 Therefore, you could set up a Mops word "cubed" to perform the cube calculation:\par \pard\plain \s8\li720 \f22\fs20 : cubed  ( n -- )  dup dup * * . cr ;\par \pard\plain \s3\qj\sb160 \f20 Then you could type "3 cubed" from the Mops prompt, and the answer would appear on the screen like this:\par \pard\plain \s2\li720 \b\f22\fs20 3 cubed\par \pard\plain \s8\li720 \f22\fs20 27\par \pard\plain \s3\qj\sb160 \f20 Experiment with the other stack manipulation operators described above.  Place a few numbers in the pa\-rameters stack, issue the commands, and see what happens in the stack display.  If you need to, you can combine two or more stack manipulation operators in the same Mops word definition as your arithmetic needs arise.\par But overall, named input parameters and local variables are generally a better way to handle numbers on the Mops stack.  Tracing and debugging a program is much easier than with explicit stack manipulations.  And because named parameters and local variables are more intuitive, there is less chance of making a mistake in the first place.\par \pard\plain \s15\qc\sb720 \f20 {\fs0 End of lesson 10\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 11\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 11\par \pard\plain \s254\sb240\keepn \b\f21 How Mops makes decisions\par \pard\plain \s3\qj\sb160 \f20 A decision\emdash both the human and computer kind\emdash is little more than the result of a test of condi\-tions.  For example: if it is true that the light switch is ON when you leave the room, then you make a small detour to hit the switch on your way out.  In other words, you are testing for a cer\-tain condition in the course of your normal operation.  If the condition is true, then you do something accordingly.  If the condition is false, then you carry on with your normal operation as if nothing had happened.\par \pard \s3\qj\sb160 This IF...THEN decision construction is precisely what goes on inside the computer when your program needs to test for a specific condition\emdash like whether a number is odd or even; whether the program user typed in the correct answer; and so on.  \par In Mops (as in other Forths) the IF...THEN decision process is a bit different from some other languages you may know, largely because of the stack orientation.  The formal description of the IF...THEN construction is as follows:\par \pard\plain \s8\li720 \f22\fs20 ( n --  )   IF  xx   THEN   zz\par \pard\plain \s3\qj\sb160 \f20 If n is non-zero (true), statement xx is executed, followed by zz; if n is zero (false) the program continues with statement zz.\par \pard \s3\qj\sb160 The IF part of the Mops decision process tests for the presence of a zero or non-zero (i.e., any number but zero) on the top of the parameter stack prior to the IF statement.  Whenever the IF statement finds a non-zero number on the stack, it performs the operation written immediately following IF.  From there it goes on to perform whatever operation after THEN.  Whenever the IF statement encounters a zero on the stack, it per\-forms the operation written after the THEN statement.  In Mops the "THEN" means to proceed with the program after the test, as in "first do this, {\ul then} do that."  \par \pard \s3\qj\sb160 You won't be able to experiment with the IF...THEN construction quite as easily as the opera\-tions you learned so far.  That's because this construction must be {\ul compiled} before it will run on Mops.  So you'll need to put the IF...THEN statement inside a colon definition and compile it before you can run it.  So type the following:\par \pard\plain \s2\li720 \b\f22\fs20 : test\par       IF ." There is a non-zero number on the stack."\par      THEN  cr ;\par \pard\plain \s3\qj\sb160 \f20 Note that since you have commenced a colon definition, when you type <ENTER> at the end of each line, that line is compiled by Mops.  Alternatively, you could type <RETURN> at the end of each line, which would just enter the text into the Mops window without doing anything with it, and then you could compile the whole of the definition at once by selecting it and hitting <ENTER> (as we saw in Lesson 6).\par \pard \s3\qj\sb160 This defines "test" as a word that performs a check on the top number on the stack.  If the num\-ber is non-zero, then the statement to that effect shows on the screen.  If the top of the stack con\-tains a zero, then the statement does not appear.  Try it by placing various numbers\emdash including zero\emdash on the stack and typing "test."  Remember that an empty stack contains no numbers, and the IF operation will cause the "empty stack" error message to appear. A zero, on the other hand, is indeed a number, and it occupies space on the stack.\par \pard\plain \s254\sb240\keepn \b\f21 Two alternatives\par \pard\plain \s3\qj\sb160 \f20 Some decisions, however, are more complex because they involve two possible alternatives before pro\-ceeding.  Take, for example, one of the most difficult decisions: getting up for work in the morning.  After the alarm has gone off, and you lie in bed deciding whether you should really get going, or grab another half hour, your mind is testing certain conditions.  IF you get up now, THEN you'll be on time for work, or ELSE you'll risk losing your job.  IF you get up now, THEN you can get all the hot water, or ELSE you'll have to rush through the shower to get the few drops that are left after the rest of the family has showered.\par \pard \s3\qj\sb160 This kind of decision construction has been included in Mops.  Its definition is:\par \pard\plain \s8\li720 \f22\fs20 ( n --  )  IF   xx   ELSE   yy   THEN    zz\par \pard\plain \s3\qj\sb160 \f20 If n is non-zero (true), xx statement is executed, followed by zz; if n is zero (false), yy is execut\-ed, fol\-lowed by zz.\par \pard \s3\qj\sb160 As with the IF...THEN construction, this decision process looks first to see if the number on the top of the stack is zero or not before it makes any decision.  Now redefine "test" so it takes into account the ELSE provision:\par \pard\plain \s2\li720 \b\f22\fs20 : test              \par \tab IF   ." Non-zero number on stack "\tab \par \tab ELSE ." Zero on stack " \par \tab THEN  cr ;  \par \pard\plain \s3\qj\sb160 \f20 Place three numbers\emdash one, zero, and three\emdash in the stack and perform three tests:\par \pard\plain \s2\li720 \b\f22\fs20 1 0 3  \par test   \par \pard\plain \s8\li720 \f22\fs20 Non-zero number on stack\par \pard\plain \s2\li720 \b\f22\fs20 test   \par \pard\plain \s8\li720 \f22\fs20 Zero on stack\par \pard\plain \s2\li720 \b\f22\fs20 test   \par \pard\plain \s8\li720 \f22\fs20 Non-zero number on stack\par \pard\plain \s3\qj\sb160 \f20 As with nearly all Mops operations, the IF operation takes the top number off the stack when it performs its check.  If you will need that number for a subsequent operation, then first convert the number to a named input parameter or local variable to preserve the value for a later calculation.\par \pard\plain \s254\sb240\keepn \b\f21 Truths, falsehoods, and comparisons\par \pard\plain \s3\qj\sb160 \f20 You may be wondering how the IF...THEN construction can be useful if it can only determine whether or not the number on the stack is zero.  You might think that this kind of test would be rather limiting in light of the "real-world" decisions that a program may have to make, such as whether two integers are equal to each other, whether one is larger than the other, or whether a number is positive or negative.  Actually, the IF...THEN construction frequently operates at the tail end of a fuller decision procedure that makes the real-world decisions possible.  The first part of the procedure consists of one or more comparison operators whose results are either a zero or non-zero, depending on the outcome of the comparison.\par \pard \s3\qj\sb160 To simplify the zero and non-zero terminology, Mops adheres to a programming language con\-vention re\-volving around the terms TRUE and FALSE.  These words are Mops words, and rep\-resent the values that appear in the stack as a result of the comparison operations.  False repre\-sents a zero in the stack; true represents any non-zero number in the stack, including negative numbers.  The Mops word TRUE returns a non-zero number, of course\emdash it returns a number which is all ones.  As we'll see a bit later, this corresponds to the value -1.\par \pard \s3\qj\sb160 Type these words now:\par \pard\plain \s2\li720 \b\f22\fs20 true false\par \pard\plain \s3\qj\sb160 \f20 You''ll see from the stack display that false is the same as zero, and true is -1.\par \pard \s3\qj\sb160 Since these words\emdash or rather the numbers they represent\emdash are actually symbolic of a condition that has just been tested, they are sometimes referred to as {\ul flags}.  Flags in programs are some\-thing like markers planted in key places that symbolize a certain condition.  A "true" flag signi\-fies that a non-zero number is on the stack; a "false" flag signifies that a zero is on the stack.  Another term that is used is {\ul boolean}\emdash this really means the same as "flag".\par \pard \s3\qj\sb160 To help ingrain this true/false difference in your mind, redefine "test" so that it reinforces the way the IF...THEN...ELSE construction responds to TRUE and FALSE flags existing in the stack.\par \pard\plain \s2\li720 \b\f22\fs20 : test \par      IF ." True "\par      ELSE ." False "\par      THEN  cr  ;\par \pard\plain \s3\qj\sb160 \f20 Now, place the numbers zero and four on the stack (and leave the true and false underneath them, which you put there before).  Then run the test five times:\par \pard\plain \s2\li720 \b\f22\fs20 0 4\par test   \par \pard\plain \s8\li720 \f22\fs20 True\par \pard\plain \s2\li720 \b\f22\fs20 test\par \pard\plain \s8\li720 \f22\fs20 False \par \pard\plain \s2\li720 \b\f22\fs20 test  \par \pard\plain \s8\li720 \f22\fs20 False\par \pard\plain \s2\li720 \b\f22\fs20 test\par \pard\plain \s8\li720 \f22\fs20 True\par \pard\plain \s3\qj\sb160 \f20 Below is a list of comparison operations that test the values of one or more numbers on the stack and leave either true or false flags on the stack.  It is these operations you perform on real-world integers before performing decision operations like IF...THEN...ELSE.  A new term appears in the stack notations below: boolean.  This means that the result is either TRUE or FALSE flag on the stack ("boolean" is named after George Boole, who developed a logic system based on TRUE and FALSE values).\par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 0<\tab ( n -- boolean )\tab Leaves TRUE (-1) on the stack if n is less than zero; otherwise, leaves FALSE (0).\par 0= \tab ( n -- boolean )\tab Leaves TRUE on the stack if n equals zero; otherwise, leaves FALSE.\par 0<>\tab ( n -- boolean )\tab Leaves FALSE on the stack if n equals zero; otherwise, leaves TRUE.\par 0>\tab ( n -- boolean )\tab Leaves TRUE on the stack if n is greater than zero;  otherwise, leaves FALSE.\par < \tab ( n1 n2 -- boolean )\tab Leaves TRUE on the stack if n1 is less than n2; otherwise, leaves FALSE.\par <= \tab ( n1 n2 -- boolean )\tab Leaves TRUE on the stack if n1 is less than or equal to n2; otherwise, leaves FALSE.\par <> \tab ( n1 n2 -- boolean )\tab Leaves TRUE on the stack if n1 does not equal n2; otherwise, leaves FALSE.\par =\tab ( n1 n2 -- boolean )\tab Leaves TRUE on the stack if n1 equals n2; otherwise, leaves FALSE.\par > \tab ( n1 n2 -- boolean )\tab Leaves TRUE on the stack if n1 is greater than n2: otherwise, leaves FALSE.\par >= \tab ( n1 n2 -- boolean )\tab Leaves TRUE on the stack if n1 is greater than or equal to n2; otherwise, leaves FALSE.\par \pard\plain \s3\qj\sb160 \f20 All the math in these comparison operations should be familiar to you.  Remember that these op\-erations, like the simple arithmetic ones, are set up in postfix notation.  To remember which or\-der to put numbers on the stack, simply reconstruct in your mind how the formula would look in algebraic notation.  For example, to find out if n1 is greater than n2, the algebraic test would be:\par \pard\plain \s8\li720 \f22\fs20 n1 > n2\par \pard\plain \s3\qj\sb160 \f20 In Mops, you simply move the operation sign to the right:\par \pard\plain \s8\li720 \f22\fs20 n1 n2 >\par \pard\plain \s3\qj\sb160 \f20 But in this case, Mops is testing the validity of the statement.  While the numbers are tested, each is taken from the stack.  If the statement is true, then a TRUE flag goes to the stack; otherwise, a FALSE flag goes there.  Then an IF...THEN or IF...THEN...ELSE decision can be made on the number(s) in question.\par \pard\plain \s254\sb240\keepn \b\f21 Nested decisions\par \pard\plain \s3\qj\sb160 \f20 It is also possible to have more than one IF...THEN...ELSE decision working at one time.  To accomplish this, you can place IF...THEN...ELSE decisions inside one another.  For example, you can set up a series of decision operations that will examine a number in the stack, test it for several conditions, and then an\-nounce on the screen what condition that number meets.  To do this, you'll nest several IF...THEN state\-ments inside one another:\par \pard\plain \s8\li720 \f22\fs20 : iftest  \{ n --  \} \par \tab n 0< \par \tab IF\tab ." less than " \par \tab ELSE\tab n  0> \par \tab \tab IF ." greater than "\par \tab \tab THEN \par \tab THEN\par \tab ." zero "  cr ;\par \pard\plain \s3\qj\sb160 \f20 "Iftest" is defined to check whether a number is positive, negative, or zero.  Enter a number in the stack and then perform an "iftest" of it.  Try positive and negative numbers and zero.  The number is assigned to a named input parameter (n) because it might have to be tested by both IF statements\emdash the first IF would re\-move the number from the stack, leaving nothing for the second IF to test.  The number is then tested whether it is less than zero.  If so, "less than zero" is dis\-played, because the program jumps ahead to the second THEN.  If the number is not negative, it is next compared to see if it is greater than zero in the sec\-ond, nested IF...THEN construction.  If the number is greater than zero, then the TRUE flag is noted by the second IF statement, and "greater than zero" is displayed.  If the number (which has already proven to be not less than zero) is not greater than zero, then it must be zero, and only "zero" is displayed on the screen.\par \pard \s3\qj\sb160 The key point to remember in nested IF...THEN constructions is that every IF must have a corre\-sponding THEN somewhere in the same colon definition.  They are nested much in the same way that parenthetical delimiters in math formulas are nested:\par \pard\plain \s8\li720 \f22\fs20 (a/(a-(b*c))+c)\par IF\tab xx\par \tab IF     ww \par \tab \tab IF\tab uu \par \tab \tab ELSE\tab zz \par \tab \tab THEN \par \tab THEN   qq \par THEN\tab   yy\par \pard\plain \s3\qj\sb160 \f20 Each THEN matches the IF with which is lined up.  Formatting your code this way, with corre\-sponding IFs, ELSEs and THENs lining up, is a good idea for readability.\par \pard\plain \s254\sb240\keepn \b\f21 Logical operators\par \pard\plain \s3\qj\sb160 \f20 There will probably be occasions in future programs in which you will have performed two com\-parison op\-erations, and the resulting flags from those operations will be sitting on top of the stack.  How the program proceeds from there depends on the state of those two flags.  If one flag is true and the other false, they may meet the prerequisite that only one of the comparisons needs to be true for a certain operation to take place (e.g., n1 is less than n2, but n1 is not less than zero).  Conversely, you may need both flags to be TRUE for a certain operation to take place (n1 is both less than n2 {\ul and} less than zero).  In these special cases, you can use the logical operators, AND and OR, which we'll now describe.\par \pard \s3\qj\sb160 Both of these operations look at the binary makeup of two numbers and produce a result.  For AND, the result will have a 1 in each position where both the first {\ul and} the second numbers have a 1.  For OR, the result will have a 1 in each position where the first {\ul or} the second numbers (or both) have a 1.  For example:\par \pard\plain \s8\li720 \f22\fs20 \tab 0001   (binary number 1)\par \pard \s8\li720 AND\tab {\ul 0011}   (binary number 3)\par \pard \s8\li720 \tab 0001   (1 "AND" 3 equals 1)\par \par \tab 0001   (binary number 1)\par \pard \s8\li720 OR   \tab {\ul 0011}   (binary number 3)\par \pard \s8\li720 \tab 0011   (1 "OR" 3 equals 3)\par \pard\plain \s3\qj\sb160 \f20 The AND operation above returns a 1 for the rightmost column of bits in the binary numbers because both bits are 1.  The OR operation above returns a 1 for the two rightmost column of bits in the binary numbers because one or both bits in each column are 1.  The names for these operations, AND and OR, are sometimes used as verbs, as in "I want to AND 1 and 3."\par \pard \s3\qj\sb160 In Mops, these words have the following definitions:\par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 AND\tab ( n1 n2 -- n3 )\tab Performs a bit-wise AND of n1 and n2 and leaves the result on the stack.\par OR\tab ( n1 n2 -- n3 )\tab Performs a bit-wise OR of n1 and n2 and leaves the result on the stack.\par \pard\plain \s3\qj\sb160 \f20 As indicated by the Mops stack notation above, the proper format for these logical operations is to place the numbers on the stack and then issue the operation name.  For example:\par \pard\plain \s2\li720 \b\f22\fs20 1 3 AND . cr  \par \pard\plain \s8\li720 \f22\fs20 1\par \pard\plain \s3\qj\sb160 \f20 Experiment with AND and OR in this fashion.  Remember that these operations are working on the binary equivalent of the decimal numbers you type into the stack.  If you have difficulty understanding an answer, try working out the problem on paper by converting each number to binary and then performing the AND or OR arithmetic on the numbers as shown above.  Once you understand the concept, you can trust Mops to do these operations correctly for you at all times.\par \pard\plain \s2\li720 \b\f22\fs20 #####something here about and and or with flags.\par \pard\plain \s254\sb240\keepn \b\f21 The CASE decision\par \pard\plain \s3\qj\sb160 \f20 It's not uncommon to have an instance in a program in which the next step could be one of sev\-eral, de\-pending on the actual number on the stack\emdash not just whether it's true or false.  For exam\-ple, a pro\-gram may ask you to type a number from zero to nine.  For most of the numbers, the subsequent step is the same, but for numbers 2, 6, and 7, the outcome is different.  In other words, if it is the case of a "2" on the stack, then a unique operation takes place.  Sure, you could run a series of comparison operations and nested IF...THEN constructions on the number to nar\-row it down (e.g., testing if the number is not less than two nor greater than two), but that gets cumbersome when you're testing for many numbers.\par \pard \s3\qj\sb160 Mops's shortcut for this multiple decision making is the CASE structure.  Using the example above, you could define a word like this:\par \pard\plain \s8\li720 \f22\fs20 : CaseTest  ( n --  )  ( Print TWO, SIX, SEVEN, OTHER )\par \tab CASE\par \tab \tab 2\tab OF\tab " TWO"\tab ENDOF\par \tab \tab 6\tab OF\tab ." SIX"\tab ENDOF\par \tab \tab 7\tab OF\tab ." SEVEN"\tab ENDOF\par \tab \tab ." OTHER "\par \tab  ENDCASE   ;\par \pard\plain \s3\qj\sb160 \f20 This word takes the number on the stack and checks whether it is a CASE OF 2, 6, or 7.  If a particular CASE is valid, then the branch executes statements until it encounters an ENDOF delimiter.  At that point, execution jumps to ENDCASE, ignoring all other statements.  If none of the cases are valid, then execution continues toward the ENDCASE delimiter.  If a statement is inserted before ENDCASE (as is ." OTHER " in the example), then it is executed whenever the test of cases fails.  This statement is also known as the {\ul default} statement, since it's the statement which gets executed by default if nothing else does.\par \pard \s3\qj\sb160 Note particularly, that the CASE test retains the test value on the stack, and it is dropped at the end by the ENDCASE.  In the default statement, particularly, you might want to make use of the test value.  But if you're going to take it off,  remember to DUP it or put a dummy value on the stack to be dropped by the ENDCASE.\par \pard\plain \s15\qc\sb720 \f20 {\fs0 End of lesson 11\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 12\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 12\par \pard\plain \s254\sb240\keepn \b\f21 Loops\par \pard\plain \s3\qj\sb160 \f20 Computer programs frequently need certain operations to be repeated a specified number of times.  For ex\-ample, finding the sum of 10 numbers in the stack would normally take a stream of nine + statements.  To a programmer's way of thinking, this makes the program several steps longer than necessary.  A programmer would rather find a shortcut way of repeating that opera\-tion as many times as is needed to do the job, with\-out increasing program size with a long series of identical commands.  That's where the loop comes in.\par \pard \s3\qj\sb160 A loop sets up a kind of merry-go-round for your program, with a beginning and an end.  At the end of the loop is an instruction that tells the program to "loop back" to the beginning of the loop.  All the statements between the two are repeated in their entirety each time program execution goes through the loop.  \par Mops has two major categories of loops: definite and indefinite.  As their names imply, each cat\-egory has a different way of figuring out when to stop going around in loops.  The definite loop performs only as many loops as the program specifies; an indefinite loop, on the other hand, keeps looping until a certain condition is met.  Let's look at each kind of loop more closely.\par \pard\plain \s254\sb240\keepn \b\f21 Definite loops\par \pard\plain \s3\qj\sb160 \f20 Consider the 10-number addition problem noted above.  Since you know ahead of time that there will be ex\-actly ten numbers on the stack before any addition takes place, you could use a definite loop to perform nine addition operations on the stack.  \par The construction of a definite loop in Mops consists of a DO...LOOP statement, which expects to find two numbers on the stack before the DO executes.  The two numbers represent the begin\-ning and ending count of repetitions that the DO...LOOP statement is to make.\par Because loops work in compiled statements only, put them inside colon definitions to see how they work.  Define a new word that adds up 10 numbers from the stack by performing nine rep\-etitions of addition:\par \pard\plain \s8\li720 \f22\fs20 : addten    ( n1...n10 -- sum )\par \tab 9 0  DO  +  LOOP .  cr  ;\par \pard\plain \s3\qj\sb160 \f20 During execution, DO...LOOP counts up from zero to nine each time through the loop.  After the ninth time around, the program is let out of the loop; it proceeds to display the contents of the stack (the sum) and to send a carriage return to the screen.\par You may be wondering where Mops keeps track of the loop counter if the parameter stack is used to hold all the numbers that get added.  The answer holds one of Mops's powerful features, called {\ul indexing}, which will play an increasingly important role the more you learn about Mops.\par \pard \s3\qj\sb160 When you typed the 9 and the 0 prior to the DO...LOOP construction in the example above, what you couldn't see was that the two numbers were automatically shifted over to another part of memory.  The first number you typed (the 9) is called the {\ul limit}, because that number represents the limit of how many times the loop is to be executed.  The second number (the 0) is called the {\ul index}.  This number counts up by one each time through the loop.  So, the first time the DO...LOOP construction is encountered in the above example, the index number counts up to a one; the next time to a two, and so on.  When the index and limit numbers are equal, then the DO...LOOP construction "knows" that it's time to move on.\par \pard \s3\qj\sb160 What's interesting about this kind of indexing is that you can use the index number as a counter while exe\-cuting a loop.  By setting the limit and index numbers to integers you need to operate with inside a loop (they can be any integers you want), you can copy the index number to the parameter stack each time around the loop and use that number for a calculation, a graphics plot point, a multiplication factor, or whatever.  The Mops word that copies the index to the parame\-ter stack is:\par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 I\tab (  -- n )\tab Copies the current index value to the parameter stack.\par \pard\plain \s3\qj\sb160 \f20 Remember that this word only copies the index; it does not disturb the index in any way.  Here are a couple of examples to demonstrate.\par \pard \s3\qj\sb160 Define a word, fivecount, that displays a series of numbers from 101 to 105:\par \pard\plain \s8\li720 \f22\fs20    (  --  )\par : fivecount  ( -- )\par \tab 106 101  DO  i  .   LOOP  ;\par \pard\plain \s3\qj\sb160 \f20 Notice that the limit is set to 106.  That's because the index is incremented when execution reaches LOOP.  The first time through, the index was 101, and the "I" word copied the index to the parameter stack; the dot command then displayed it on the screen.  On the fifth execution, 105 was the index.  When execution reached LOOP, the index incremented to 106, at which point it equalled the limit and broke out of the loop.\par \pard \s3\qj\sb160 You can similarly use the index number to perform operations on a number passed to the parame\-ter stack prior to execution.  Consider the following definition:\par \pard\plain \s8\li720 \f22\fs20 : timestables  \{ n1 -- \}\par \tab 13 1  DO  n1 i *  .  LOOP  cr  ;\par \pard\plain \s3\qj\sb160 \f20 If you then type "5 timestables," the program goes through twelve loops of multiplying 5 times the incre\-menting index number, one through twelve.  \par You have the flexibility in Mops to place all kinds of other statements within a DO...LOOP con\-struction, in\-cluding all those conditional decision makers covered earlier.\par \pard \s3\qj\sb160 There will be times when you'll want to use a DO...LOOP for the sake of compactness, but the increment you wish to go by is something other than the one automatically performed by the loop (increment by 1).  For those occasions, you have the optional loop ending, +LOOP.  Whatever number you place in front of the +LOOP ending will be the increment that the DO...LOOP uses to adjust the index.  You can even use a negative number if you wish the loop to count backwards.  Here's how you would use +LOOP to take care of a countdown:\par \pard\plain \s8\li720 \f22\fs20 : countdown  ( -- )\par \tab 1 10 \par \tab DO\tab i  . cr\par \tab -1 +LOOP\par \tab ." Ignition...Liftoff!"   cr  ;\par \pard\plain \s3\qj\sb160 \f20 Notice that in this case, since the program is counting backwards, the limit is zero and the index is 10.  Each time through the loop, the index is incremented by a -1.   Also notice that the limit value 1 gets typed by the program\emdash when the index is counted down and becomes equal to the limit, the loop continues, and doesn't stop until the index is counted down to the limit minus 1, unlike the situation when the index is being counted up, where the loop stops when the index equals the limit.  The best way to think about this, is as if there is a "fence" in between the limit and the limit-1.  Whenever the index crosses the fence, in either direction, the loop stops.  This will be true even if you write a program in which the increment value changes sign during the running of the loop.\par \pard\plain \s254\sb240\keepn \b\f21 Nested loops\par \pard\plain \s3\qj\sb160 \f20 It is also sometimes desirable to have more than one DO...LOOP routine going on simultaneous\-ly.  As with IF...THEN constructions, DO...LOOP operations can be nested inside one another.  All you have to re\-member is to supply one LOOP (or +LOOP) for each DO within the colon definition.  For example, you could add a delay loop in the "countdown" definition above to make it look like the seconds are being counted down (a better way is to use the neon words PAUSE or WAIT defined in source 'Interval').  Insert:\par \pard\plain \s8\li720 \f22\fs20 600000 0 DO LOOP\par \pard\plain \s3\qj\sb160 \f20 after the dot statement inside the original DO...LOOP operation, and again after the "Ignition" line:\par \pard\plain \s8\li720 \f22\fs20 : countdown\par \tab 1 10 \par \tab DO\tab i  . cr\par \tab \tab 600000 0  DO  LOOP\par \tab -1 +LOOP\par \tab ." Ignition"   cr\par \tab 600000 0  DO  LOOP\par \tab ." Liftoff"  cr  ;\par \pard\plain \s3\qj\sb160 \f20 Type "countdown" and watch the seconds tick away:\par \pard\plain \s2\li720 \b\f22\fs20 countdown\par \pard\plain \s8\li720 \f22\fs20 10 \par 9 \par 8 \par 7 \par 6 \par 5 \par 4 \par 3 \par 2 \par 1 \par Ignition \par Liftoff \par \pard\plain \s3\qj\sb160 \f20 Of course, in a real program, you would probably take out the "600000 0  DO  LOOP" and make it another definition, perhaps called "delay"\emdash then, if you needed to change the delay value you would only have to change your code in one place.  This operation is called "factoring", since it is a bit like the mathematical operation of getting common factors in numbers.\par \pard \s3\qj\sb160 If you are in a nested loop and need access to the outer index, Mops has a predefined word that allows you to copy that number to the parameter stack, just like "I" copies the current loop index number to the stack.  That word is "J."  \par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 J \tab (  -- n )\tab Copies to the parameter stack the index of the next outer loop of a DO...LOOP construction .\par \pard\plain \s3\qj\sb160 \f20 In other words, "J" looks up the index of the loop just outside the current DO...LOOP construc\-tion, and copies that number to the parameter stack.  But note that if you have factored out an inner loop into another definition, you can't use J this way\emdash you won't get the right value.  J only works with nested loops within the one definition.\par \pard\plain \s254\sb240\keepn \b\f21 LEAVE\par \pard\plain \s3\qj\sb160 \f20 You may have a situation in which you need to bail out of a DO...LOOP before its normal com\-pletion\emdash perhaps because of some special case situation.  The word LEAVE is available for this purpose.  Here's the countdown example again, appropriately modified:\par \pard\plain \s8\li720 \f22\fs20 : countdown\par \tab 1 10\par \tab DO\tab i  . cr\par \tab \tab 600000 0  DO  LOOP\par \tab \tab i 7 = IF  ." Aborted!!" cr  LEAVE  THEN\par \tab -1 +LOOP  ;\par \pard\plain \s2\li720 \b\f22\fs20 countdown\par \pard\plain \s8\li720 \f22\fs20 10\par 9\par 8\par 7\par Aborted!!\par \pard\plain \s3\qj\sb160 \f20 Note that we had to remove the "Ignition" and "Liftoff" messages, otherwise "Ignition" and "Liftoff" would have appeared after the countdown was aborted, which wouldn't really be what we want.  We'll show a better way of handling this shortly.\par \pard\plain \s254\sb240\keepn \b\f21 Indefinite loops\par \pard\plain \s3\qj\sb160 \f20 An indefinite loop is another kind of loop you'll use from time to time in a Mops program.  As its name im\-plies, an indefinite loop keeps going in circles until a certain condition exists.  It can go around one time or thousands of times while waiting for that condition to occur.  In Mops, that condition is the presence of a TRUE flag (non-zero number) on top of the parameters stack.  One kind of indefinite loop is defined as:\par \pard\plain \s8\li720 \f22\fs20 BEGIN xxx \par UNTIL\par \pard\plain \s3\qj\sb160 \f20 Performs xxx operations repeatedly until a TRUE flag exists on the parameters stack.\par A useful variation is:\par \pard\plain \s8\li720 \f22\fs20 BEGIN xxx \par NUNTIL\par \pard\plain \s3\qj\sb160 \f20 Performs xxx operations repeatedly until a FALSE flag exists on the parameters stack.\par \pard \s3\qj\sb160 Here's an example of how you might use a BEGIN...UNTIL construction.  In this case, the indef\-inite loop will be waiting for you to type a lower case "a" on the keyboard.  The KEY operation pauses the program until you press a key, and then it places onto the stack a standard code num\-ber (called its ASCII code\emdash ex\-plained later) for the next character typed.  If the number on the stack is 97 Decimal (the ASCII code number for the lower case a), then a -1 (TRUE flag) is placed on the stack, and the loop ends.  Otherwise, a zero (FALSE flag) is placed on the stack, and execution returns to the beginning of the loop.\par \pard\plain \s8\li720 \f22\fs20 : beginTest \tab BEGIN key 97 =  UNTIL  ;\par \pard\plain \s3\qj\sb160 \f20 Now, type "beginTest," and type all kinds of letters on the keyboard.  Until you type an "a", the program keeps going around in circles.  Another indefinite loop to remember is:\par \pard\plain \s8\li720 \f22\fs20 BEGIN   xxx \par WHILE  yyy \par REPEAT\par \pard\plain \s3\qj\sb160 \f20 Always executes xxx each time through the loop, and executes yyy only if a nonzero number appears on the stack; loop ends when stack shows zero.\par In this case, the operation after the WHILE statement may never execute if a zero exists on the stack after BEGIN's operation (xxx).\par \pard \s3\qj\sb160 There is also a variation to this kind of loop:\par \pard\plain \s8\li720 \f22\fs20 BEGIN    xxx \par NWHILE  yyy \par REPEAT         \par \pard\plain \s3\qj\sb160 \f20 Always executes xxx each time through the loop, and executes yyy only if a zero appears on the stack; loop ends when stack shows a nonzero value.\par \pard\plain \s254\sb240\keepn \b\f21 EXIT \par \pard\plain \s3\qj\sb160 \f20 This is a good place to mention another very useful operation, EXIT.  This completely exits the current definition.  Here's a modified version of beginTest:\par \pard\plain \s8\li720 \f22\fs20 : beginTest\par \tab BEGIN\par \tab \tab key 97 =  IF  EXIT  THEN\par \tab \tab key 98 =\par \tab UNTIL  ;\par \pard\plain \s3\qj\sb160 \f20 This definion will keep running until you type either an "a" (97) or a "b" (98).\par You can also write:\par \pard\plain \s8\li720 \f22\fs20 : beginTest\par \tab BEGIN\par \tab \tab key 97 =  IF  EXIT  THEN\par \tab \tab key 98 =  IF  EXIT  THEN\par \tab AGAIN  ;\par \pard\plain \s3\qj\sb160 \f20 The word AGAIN returns straight to the BEGIN, without testing anything.  Of course, if you write a BEGIN...AGAIN loop, the loop must have some other way of terminating, such as EXIT.\par \pard \s3\qj\sb160 If you write EXIT within a DO...LOOP, you have to remember one more thing\emdash Mops (as with any kind of Forth) keeps some extra information around during DO...LOOP, and you have to remove this information if you are going to end a DO...LOOP in some unusual way (that is, not via LOOP, +LOOP or LEAVE.  The word to use is UNLOOP.  We'll illustrate this with the countdown example again:\par \pard\plain \s8\li720 \f22\fs20 : countdown\par \tab 1 10\par \tab DO\tab i  . cr\par \tab \tab 600000 0  DO  LOOP\par \tab \tab i 7 = IF  ." Aborted!!" cr  UNLOOP  EXIT  THEN\par \tab -1 +LOOP\par \tab ." Ignition"   cr\par \tab 600000 0  DO  LOOP\par \tab ." Liftoff"  cr  ;\par \pard\plain \s2\li720 \b\f22\fs20 countdown\par \pard\plain \s8\li720 \f22\fs20 10 \par 9 \par 8 \par 7 \par Aborted!!\par \pard\plain \s3\qj\sb160 \f20 You'll notice that we've been able to reinstate the "Ignition" and "Liftoff" messages, but by aborting the loop via UNLOOP and EXIT we bypass them.\par \pard \s3\qj\sb160 When you're designing loops, it is sometimes possible for an {\ul infinite} {\ul loop} to slip in accidentally.  Try to avoid them!  Double-check the stack operations of your indefinite loops to make sure that there is always at least one condition that will allow you or your program to terminate the loop.  Otherwise, your program will appear to "lock up" and be unresponsive to your keyboard input.  If this happens, you'll probably have to reset your Mac.  This will generally be more time-consuming than double-checking your loop terminating conditions.\par \pard\plain \s15\qc\sb720 \f20 End of lesson 12\par \pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 13\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 13\par \pard\plain \s254\sb240\keepn \b\f21 Mops' fixed-point arithmetic\par \pard\plain \s3\qj\sb160 \f20 The basic version of Mops (Mops.dic) utilizes fixed-point arithmetic, also called integer arith\-metic instead of floating-point arithmetic (MopsFP.dic).  The primary difference between the two is that fixed-point arithmetic functions only with integers.  You had a hint of that when you started experimenting with division in Mops: the answer was ei\-ther an integer quotient or a quotient-plus-remainder (both of which were integers).  Floating point arith\-metic, on the other hand, allows you to enter numbers with digits to the right of the decimal.\par \pard \s3\qj\sb160 Floating-point arithmetic is convenient in many instances, especially when results of operations traditionally are other than whole numbers: financial calculations, for example, which have cents to the right of the deci\-mal.  But floating-point also has some drawbacks, which should be particu\-larly important to you as a Mops programmer.\par \pard \s3\qj\sb160 One is that floating-point arithmetic takes up more memory in the computer, increasing the size of the Mops kernel.    This is not as significant now as it was a few years ago, when memory was much more expensive.\par Second, floating-point arithmetic usually takes more time to calculate than fixed-point.  Depending on your Mac model, a floating-point calculation can take up to ten times as long as the same calcu\-lation operating in fixed-point.\par \pard \s3\qj\sb160 And third, floating-point arithmetic can be less accurate than fixed point in some calculations.  You cannot, for example, multiply a number by precisely one-third in floating-point arithmetic; you must multiply by 0.33333....  There will always be some error in the calculation, which can compound itself after a couple of further calculations based on this approximation of one-third.  If you multiply 9 times 0.3333333, you get 2.9999997, rather than the desired result of 9 times one-third, or 3.\par \pard \s3\qj\sb160 Many programs have no need for floating-point arithmetic at all.  For this reason, the basic Mops system has only the smaller and faster fixed-point support, with floating-point available as an option for those who need it.\par \pard \s3\qj\sb160 But fixed-point arithmetic presents a problem of its own, because you may be accustomed to dealing with numbers other than integers\emdash numbers like pi or percentages.  To accommodate such numbers, Mops re\-quires that you use {\ul scalars}, or operations that appear to convert floating-point numbers into fixed-point numbers.\par \pard \s3\qj\sb160 Two of the most used scalars are those that are actually special-case combinations of familiar arithmetic op\-erations:\par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 */ \tab ( n1 n2 n3 -- (n1*n2)/n3 )\tab Multiplies n1 times n2 and then divides that result by n3, leaving the final result on the stack.\par */MOD\tab ( n1 n2 n3 -- (n1*n2)/n3 remainder )\tab Same as */ but leaves both the result and the remainder on the stack.\par \pard\plain \s3\qj\sb160 \f20 Notice carefully the order of the items on the stack and how they are treated by the arithmetic operations, be\-cause they are not as you would expect in a regular combination of Mops arith\-metic operations.  But the order allows you to better visualize the process by changing the alge\-braic infix notation of a problem to Mops postfix notation.  To multiply 100 times two-thirds:\par \pard\plain \s8\li720 \f22\fs20 100 * 2 / 3         becomes        100 2 3 */\par \pard\plain \s3\qj\sb160 \f20 Similar operations can be used to work with percentages.  Simply put a 100 in place of the n3 in the de\-scription above and the percentage figure in place of n2.\par \pard\plain \s254\sb240\keepn \b\f21 Decimal, hex, and binary arithmetic\par \pard\plain \s3\qj\sb160 \f20 When Mops communicates to the Macintosh's built-in routines, it often uses numbering systems other than the traditional decimal\emdash base 10\emdash system.  The two most often used non-decimal numbering systems are the hexadecimal and binary.  Each has very different characteristics.\par \pard \s3\qj\sb160 The hexadecimal numbering system is a base-16 system.  That is, instead of numbers increasing, say, from one to two digits after the "ones" digit has cycled from zero through nine, it cycles after 15 digits.  To de\-note the digits after 9, hexadecimal notation uses the first several letters of the alphabet.  Corresponding to decimal 10 is hexadecimal A; decimal 11 is hexadecimal B; and so on through hexadecimal F.  Also called "hex" for short, a hexadecimal number is usually pre\-ceded by a special sign ($) so you know that $24 is hexadecimal 24 (decimal 36) instead of the decimal 24.\par \pard \s3\qj\sb160 The binary system, at the other extreme, has only two digits, a zero and a one.  This system may not seem very useful in light of decimal and hexadecimal systems, but as you get further into the Macintosh pro\-gramming environment, you'll find times when binary math is absolutely essential for ease of designing el\-ements such as cursors, text fonts, and icons.\par \pard \s3\qj\sb160 To show you the differences among the three bases, here is a chart of the first 20 numbers in each base:\par \pard\plain \tx1600\tx3500 \f20 \par \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx2800\clshdng0\cellx4240\pard \qc\intbl Decimal\cell Hexadecimal\cell Binary\cell \pard \intbl \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx2800\clshdng0\cellx4240\pard \qc\intbl 0\cell 0\cell 0000 0000\cell \pard \intbl \row \pard \qc\intbl 1\cell 1\cell 0000 0001\cell \pard \intbl \row \pard \qc\intbl 2\cell 2\cell 0000 0010\cell \pard \intbl \row \pard \qc\intbl 3\cell 3\cell 0000 0011\cell \pard \intbl \row \pard \qc\intbl 4\cell 4\cell 0000 0100\cell \pard \intbl \row \pard \qc\intbl 5\cell 5\cell 0000 0101\cell \pard \intbl \row \pard \qc\intbl 6\cell 6\cell 0000 0110\cell \pard \intbl \row \pard \qc\intbl 7\cell 7\cell 0000 0111\cell \pard \intbl \row \pard \qc\intbl 8\cell 8\cell 0000 1000\cell \pard \intbl \row \pard \qc\intbl 9\cell 9\cell 0000 1001\cell \pard \intbl \row \pard \qc\intbl 10\cell A \cell 0000 1010\cell \pard \intbl \row \pard \qc\intbl 11\cell B\cell 0000 1011\cell \pard \intbl \row \pard \qc\intbl 12\cell C\cell 0000 1100\cell \pard \intbl \row \pard \qc\intbl 13\cell D\cell 0000 1101\cell \pard \intbl \row \pard \qc\intbl 14\cell E\cell 0000 1110\cell \pard \intbl \row \pard \qc\intbl 15 \cell F\cell 0000 1111\cell \pard \intbl \row \pard \qc\intbl 16\cell 10\cell 0001 0000\cell \pard \intbl \row \pard \qc\intbl 17\cell 11\cell 0001 0001\cell \pard \intbl \row \pard \qc\intbl 18\cell 12\cell 0001 0010\cell \pard \intbl \row \pard \qc\intbl 19\cell 13\cell 0001 0011\cell \pard \intbl \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx2800\clshdng0\cellx4240\pard \qc\intbl 20\cell 14\cell 0001 0100\cell \pard \intbl \row \pard\plain \s3\qj\sb160 \f20 You might have noticed in this list that there is a special relationship between binary and hex\-adecimal in that each time one place of the hexadecimal number reaches the maximum (F), four places of a binary number reach their maximum (1111).  This relationship will prove more important later on.\par Although the binary numbers shown in the above list are 8 bits wide (each binary digit, that is, a 0 or 1, is called a bit), Mops actually stores numbers on the stack as 32-bit binary numbers.  Therefore, even though you type the number 10 (decimal) into the stack, the number is actually stored as:\par \pard\plain \s8\li720 \f22\fs20 0000 0000 0000 0000 0000 0000 0000 1010\par \pard\plain \s3\qj\sb160 \f20 If you were to calculate how many numbers you could describe within a 32-bit binary number, it would come out to 4,294,967,296\emdash that's over four billion: plenty big for just about every job you'll put your Mac to.  But that's four billion {\ul positive} numbers.  How do you work with negative numbers?\par \pard\plain \s254\sb240\keepn \b\f21 Signed and unsigned numbers\par \pard\plain \s3\qj\sb160 \f20 The answer lies in a special technique of Mops that takes the {\ul unsigned} (positive only) range of four billion and divides it into two halves, each slightly more than two billion numbers big.  One half is assigned to the positive range, the other half to the negative.  In other words, the range of these {\ul signed} numbers is plus-or-minus 2,147,483,647.\par \pard \s3\qj\sb160 What distinguishes a signed from an unsigned number is the way you perform operations on them.  For ex\-ample, if you enter a negative number onto the stack, the minus sign shows Mops that you intend to use a signed number.  If, on the other hand, you were to enter the number three billion onto the stack, Mops would know that you mean it to be an unsigned number, since any\-thing above the plus-or-minus 2 billion range can only be unsigned.\par \pard \s3\qj\sb160 But you can force the issue if you want, and convert the designation of a number on the stack for use in arithmetic operations and display purposes.  \par \pard \s3\qj\sb160 To understand this process, imagine that you are using a tape recorder that has a digital tape counter that counts in binary.  If you set the counter to 0000 0000 and start to rewind the tape, the first thing that shows up on the counter is 1111 1111, which is actually -1 {\ul with} {\ul respect} {\ul to} {\ul zero}.  But if you were to fast-forward the tape, the counter's maximum number would also be 1111 1111.  That high number would correspond to the 4 billion number of an unsigned number.  But as a signed number, 1111 1111 represents the start of counting backwards from zero, that is, -1.\par \pard \s3\qj\sb160 For some hands-on experience with this concept, consider first that the dot command you learned in the early sections of this manual was actually a command to display the signed number equivalent of the number on the stack.  That means that it can display numbers only within the plus-or-minus 2 billion range.  Prove it now by entering 3 billion (a three and 9 zeros) on the stack.  Sure enough, the stack display will show:\par \pard\plain \s8\li720 \f22\fs20 Stack:  depth 1\par -1294967296\par \pard\plain \s3\qj\sb160 \f20 which is a signed number equivalent, a negative number near 1 billion.\par \pard \s3\qj\sb160 Conversely, let's enter a -1 (a signed number) onto the stack.  This time, however, you want to display it as an unsigned number.  To do this, you use the U. statement, which first converts the number to an unsigned number and then types it to the screen according to the following definition:\par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 U.\tab ( n --  ) \tab Displays the number on the top of the stack as an unsigned, single-precision number.\par \pard\plain \s3\qj\sb160 \f20 Try this sequence, and watch what happens:\par \pard\plain \s2\li720 \b\f22\fs20  -1 U. cr  \par \pard\plain \s8\li720 \f22\fs20 4294967295\par \pard\plain \s3\qj\sb160 \f20 Here are the other unsigned operations found in Mops:\par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 U<\tab ( u1 u2 -- boolean )\tab Compares two unsigned single-precision numbers.  If u1 is less than u2, then leaves TRUE on the stack; otherwise, leaves FALSE.\par U>\tab ( u1 u2 -- boolean )\tab Compares two unsigned single-precision numbers.  If u1 is greater than u2, then leaves TRUE on the stack; otherwise, leaves FALSE.\par \pard\plain \s254\sb240\keepn \b\f21 One last set of numbers\emdash ASCII\par \pard\plain \s3\qj\sb160 \f20 You had a preview a while back of a set of numbers called ASCII codes.  These are numbers that were as\-signed by an industry standards group to every number, letter, and symbol on the com\-puter keyboard, plus many {\ul control} {\ul codes} that computers use to communicate with each other and with peripherals, such as print\-ers.  ASCII is an acronym for American Standard Code for Information Interchange.  It is this standard that allows computers to communicate so effectively over telephone lines and allows so many different computer terminals to operate with a wide variety of larger computers.\par \pard \s3\qj\sb160 Information from the keyboard reaches the Macintosh as numbers according to this code.  The computer recognizes the press of the letter "a" only as the number 97 (decimal).  Because each letter and symbol has a unique number, it is possible to make comparisons of a key pressed and manipulate characters on the screen with the many number crunching tools you've already learned.  If you know, for example, that all capital letters of the alphabet are numbered from 65 to 90, it is possible to create a DO...LOOP that instantly prints those letters on the screen:\par \pard\plain \s8\li720 \f22\fs20 : alphabet\par \tab 91 65 DO  i  emit  cr  LOOP  ;\par \pard\plain \s3\qj\sb160 \f20 EMIT is a Mops word that displays on the screen the character that is referenced by its ASCII num\-ber.  Its definition is as follows: \par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 EMIT \tab ( n --  )\tab Displays the character referenced by ASCII number, n.\par \pard\plain \s3\qj\sb160 \f20 If you want to put a particular ASCII character value on the stack, you can use the Mops word &.  Try typing\par \pard\plain \s2\li720 \b\f22\fs20 & c\par \pard\plain \s3\qj\sb160 \f20 and you'll see that the stack display shows 99, which is the ASCII value for "c".\par Other Mops words that might go along with EMIT and & are:\par \pard\plain \s17\fi-3600\li3600\sb120\tx1080 \f20 SPACE\tab (  --  )\tab Displays a blank space on the screen.\par SPACES\tab ( n --  )\tab Displays n blank spaces on the screen.\par \pard\plain \s3\qj\sb160 \f20 Here's a use of SPACES in the alphabet definition to demonstrate its power:\par \pard\plain \s8\li720 \f22\fs20 : alphabet\par \tab 91 65 \par \tab DO  i  dup  64 -  spaces  emit  cr  LOOP  ;\par \pard\plain \s3\qj\sb160 \f20 It is also convenient to remember that upper and lower case letters are separated by a factor of 32 regardless of the letter.  This may come in handy when you need to convert upper to lower cases or vice versa.\par \pard\plain \s15\qc\sb720 \f20 {\fs0 End of lesson 13\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 14\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 14\par \pard\plain \s254\sb240\keepn \b\f21 Global constants and values \par \pard\plain \s3\qj\sb160 \f20 Assigning recognizable names to numbers is a convenient shortcut, as you've seen with named input param\-eters and local variables.  But as you saw, both of those kinds of names are {\ul local}\emdash they apply only to a very limited section of the program, inside a definition or local section.  But Mops also has a provision called Value for as\-signing readily identifiable names to numbers such that they can be used throughout a program.\par \pard \s3\qj\sb160 Your program can contain many different values because you define each value by giving it a unique name and a number that it is to hold.  You define a value like this:\par \pard\plain \s2\li720 \b\f22\fs20 25 value Jane\par \pard\plain \s3\qj\sb160 \f20 In other words, the value named Jane is holding the number 25.  To recall a value's number, all you do is type the value name, and a copy of the number is placed on the stack.  Type:\par \pard\plain \s2\li720 \b\f22\fs20 Jane\par \pard\plain \s3\qj\sb160 \f20 and the number 25 is placed on the stack.{\b \par }\pard \s3\qj\sb160 A value is essentially a global version of a local variable, and responds to similar operations.  To store a dif\-ferent number in a value, you use the store arrow, like this:\par \pard\plain \s2\li720 \b\f22\fs20 37 -> Jane\par \pard\plain \s3\qj\sb160 \f20 This operation writes a 37 over the original number, 25.  Or you can increment or decrement the number stored in a value name with the ++> or --> operations, like this:\par \pard\plain \s2\li720 \b\f22\fs20 17 ++> Jane\par 4  --> Jane\par \pard\plain \s3\qj\sb160 \f20 This adds 17 to the 37 that is already stored there, then subtracts 4.  Of course you can also do a subtraction by incrementing the value by a negative number:\par \pard\plain \s2\li720 \b\f22\fs20 -10 ++> Jane\par \pard\plain \s3\qj\sb160 \f20 If you want to define your values at the beginning of a program without placing specific numbers in them, you can place zeros in them all, and then store (->) numbers to them when necessary:\par \pard\plain \s2\li720 \b\f22\fs20 0 value Joe\par 0 value Nancy \par       :\par       :\par \pard\plain \s3\qj\sb160 \f20 Note that the initial numbers you specify for you values are set up when your program is loaded by Mops.  If you restart your application without reloading it, your values will still contain what\-ever you last put in them, not their initial numbers.\par So much for theory.  Now it's time to pull together all the discussions and examples of the pre\-ceding lessons and dive into a real application.  In fact, in the remaining lessons, we will dissect three programs to show you precisely how real Mops programs work.\par \pard\plain \s15\qc\sb720 \f20 {\fs0 End of lesson 14\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 15\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 15\par \pard\plain \s3\qj\sb160 \f20 One of the best ways to learn the fine points of Mops programming is to study existing programs and then work slowly to customize them by modifying methods, defining new subclasses, creat\-ing new Mops words and objects, and sending messages to the various objects in memory.  \par \pard \s3\qj\sb160 In the next few lessons, you'll be studying two programs whose source files are in the Demo classes folder as plain document files.  The first one is called {\ul Sin}, the second called {\ul Turtle}.  Although we provide a listing for you in the next pages, you might also want to print out a copy of the source code to follow along as the discussion works its way into the lesson.   Sin is an excellent example of how Mops array-type data struc\-tures work.  Turtle reinforces the class-object relationship.\par \pard \s3\qj\sb160 In the source code discussions in these lessons, the code will be shown with line numbers off to the left margin.  These have been inserted here only to make it easier to refer to precise lines of code when explain\-ing various operations.  There are, of course, no line numbers in Mops code.\par \pard\plain \s254\sb240\keepn \b\f21 Building a sine table\par \pard\plain \s3\qj\sb160 \f20 Before we proceed, it's important that you understand what these programs were designed to do\emdash just as you should clearly define the goal and operation of every Mops program you write.\par \pard \s3\qj\sb160 Sin will actually be a general purpose building block for a great many programs, including some you may write later.  Its purpose is to create a reference table of sine values plus a fast and sim\-ple way for later pro\-gram parts to retrieve sine and cosine values.\par \pard \s3\qj\sb160 If you're a little rusty on trigonometry, a sine value of an angle is a convenient way to work with angular measurement.  Mathematically, the sine of an angle is the ratio of the length of the opposite side to the length of the hypotenuse of an imaginary right triangle having that angle in it.  For example, if we have an angle la\-beled {\i theta  }in Figure\~I-14, \par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw246\pich158 08550000000000ce00e61101a10064000c574f52440000000000ce00e601000a0000000000ce00e698001e00b300820180016a00b300850180016a0000000000cd00e5000002e30006e7000030fe0006e7000070fe0007e8000101f0fe0007e8000103f0fe0007e800010f30fe0007e800013e30fe0007e800017830fe0008e9000201e030fe0008e9000203c030fe0008e900020f0030fe0008e900021e0030fe0008e90002780030fe0008e90002f00030fe0009ea000303c00030fe0009ea000307800030fe0009ea00031e000030fe0009ea00037c000030fe0009ea0003f0000030fe000aeb000403c0000030fe000aeb00040780000030fe000aeb00001efe000030fe000aeb00003cfe000030fe000aeb0000f0fe000030fe000bec000101e0fe000030fe000bec00010780fe000030fe000aec00000ffd000030fe000aec00003cfd000030fe000aec0000f8fd000030fe000bed000101e0fd000030fe000bed00010780fd000030fe000aed00000ffc000030fe000aed00003cfc000030fe000aed000078fc000030fe000bee000101e0fc000030fe000bee000103c0fc000030fe000aee00000ffb000030fe000aee00003efb000030fe000aee000078fb000030fe000bef000101e0fb000030fe000bef000103c0fb000030fe000aef00000ffa000030fe000aef00001efa000030fe000aef000078fa000030fe000aef0000f0fa000030fe000bf0000103c0fa000030fe000bf000010780fa000030fe000af000001ef9000030fe000af000007cf9000030fe000ff5000103f0fe0000f0f9000030fe000ff500050638000003c0f9000030fe000ff500050c1800000780f9000030fe000ef500000cfe00001ef8000030fe000ef500000cfe00003cf8000030fe000ef500000cfe0000f0f8000030fe000ef500040c000001e0f8000030fe000ef500040c00000780f8000030fe000df500030c18001ff7000030fe000df500030630003cf7000030fe000df5000303e000f0f7000030fe000bf3000101e0f7000030fe000bf300010780f7000030fe000af300000ff6000030fe000af300003cf6000030fe000af3000078f6000030fe000bf4000101e0f6000030fe000bf4000103c0f6000030fe000bf400000ff500033000c0000bf400003ef500033000c0000bf4000078f500033001e0000cf5000101e0f500033001e0000cf5000103c0f50003300330000bf500000ff40003300330000bf500001ef40003300618000bf5000078f400033007f8000bf50000f0f40003300c0c000cf6000103c0f40003300c0c000cf600010780f40003301e1e000af600001ef3000030fe000af600007cf3000030fe000af60000f0f3000030fe000bf7000103c0f3000030fe000bf700010780f3000030fe000af700001ef2000030fe000af700003cf2000030fe000af70000f0f2000030fe000bf8000101e0f2000030fe000bf800010780f2000030fe000af800001ff1000030fe000af800003cf1000030fe000af80000f0f1000030fe000bf9000101e0f1000030fe000bf900010780f1000030fe000af900000ff0000030fe000af900003cf0000030fe000af9000078f0000030fe000bfa000101e0f0000030fe000bfa000103c0f0000030fe000afa00000fef000030fe000afa00003eef000030fe000afa000078ef000030fe000bfb000101e0ef000030fe000bfb000103c0ef000030fe000afb00000fee000030fe000afb00001eee000030fe000afb000078ee000030fe000afb0000f0ee000030fe000bfc000103c0ee000030fe000bfc00010f80ee000030fe000afc00001eed000030fe000afc000078ed000030fe000afc0000f0ed000030fe000bfd000103c0ed000030fe000bfd00010780ed000030fe000afd00001eec000030fe000afd00003cec000030fe000afd0000f0ec000030fe000bfe000101e0ec000030fe000cfe0002078060ed000030fe000cfe00021f0090ed000030fe000cfe00023c3c90ed000030fe000cfe0002f06660ed000030fe000c04000001e042ec000030fe000e040000078081ee000201fff0fe000e0400000f0081ee0002010030fe000e0400003f00ffee0002010030fe000e040000788081ee0002010030fe000e040001e04081ee0002010030fe000e040003c02042ee0002010030fe000e04000f002066ee0002010030fe000e04003e00203cee0002010030fe000d0300780020ed0002010030fe000d0301e00040ed0002010030fe000d0303c00080ed0002010030fe0008000fe8ff00f0fe0008000fe8ff00f0fe0002e30002e30002e30002e30002e30002e30002e30006f30000fef20006f3000063f20007f300016180f30007f300016180f30006f300007ff20007f300016180f30007f3000160c0f30007f3000160c0f30007f3000160c0f30007f300016180f30006f30000fff20002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30010fa000201ff18fc000402000040fcf70010fa000201ff18fc0004060000c1fef7000ef90000c3fb00040e0001c186f7000ef90000c3fb00040e0001c186f70011f9000bc0387f739fc7c0060000c006f70011f9000bc038ff739fefe0060000c00ef70011f9000bf818c6318c6c60060000c01cf70011f9000bf818c6318c0c60060fe0c038f70011f9000bc018c6318c0fe0060fe0c070f70011f9000bc018c6318c0fe0060000c0e0f70011f9000bc018c6318c0c00060000c1c0f70011f9000bc018c6318c0c60060000c186f70013fa000d01e03cfe3fde0fe00f0001e1fe30f80013fa000d01e03c7e1fde07c00f0001e1fe30f80006f7000006ee0006f70000c6ee0006f70000feee0006f700007cee0002e300ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-14\par \pard\plain \s3\qj\sb160 \f20 the sine of {\i theta} equals the length of A divided by C.  If you were to calculate all possible values for sin {\i theta}, from 0 to 360 degrees and plot the results, you'll find that the values trend up and down throughout the circle, including two quadrants with negative values (see Figure\~I-15).\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw363\pich214 0ce90000000000ed016c1101a10064000c574f52440000000000ed016c01000a0000000000ed016c98002e00770058016301c80077005b016301c60000000000ec016b000002d30006fa00000cdb0006fa00000cdb0006fa00000cdb0006fa00000cdb0006fa00000cdb0006fa00000cdb0006fa00000cdb0006fa00000cdb0006fa00000cdb000f02000600fdf0000cf900017ff0e5001102000e01fe9901980cfa000201fffce5001202020601fe9902980ff8fb0002020002e5001202020601fe9901980cfa00030c000180e60012020f8601fe9901980cfa000330000070e6001202020601fe9901980cfa000340000010e6001202020601fe9901980cfa000380000008e6001302000619fe9901980cfb000003fe000006e6001202000618fdf0000cfb000004fe000001e60006fa00000cdb000efa00000cfb000018fd0000c0e70006fa00000cdb000efa00000cfb000020fd000020e7000efa00000cfb000040fd000010e7000efa00000cfb000080fd000008e7000efa00000cfc000001fc000004e7000efa00000cfc000002fc000003e70006fa00000cdb000efa00000cfc000004fc000001e7000efa00000cfc000008fb000080e80006fa00000cdb000efa00000cfc000010fb000040e8000efa00000cfc000020fb000020e8000efa00000cfc000040fb000010e8000efa00000cfc000080fb000008e80006fa00000cdb000efa00000cfd000001fa000004e8000efa00000cfd000002fa000002e80006fa00000cdb000efa00000cfd000004fa000001e80006fa00000cdb000efa00000cfd000008f9000080e90006fa00000cdb000efa00000cfd000010f9000040e9000efa00000cfd000020f9000030e90006fa00000cdb000efa00000cfd000040f9000010e90006fa00000cdb000efa00000cfd000080f9000008e90006fa00000cdb000efa00000cfe000001f8000004e90006fa00000cdb000efa00000cfe000002f8000002e90006fa00000cdb001307001e03f1e1e1e00cfe000004f8000001e9000b07003303033333300cdb000f07003303033333300cfe000008df000f07003303e33333300af2aa00a8eb001302003300fe3301300cfe000010f7000040ea001302003300fe3301300cfe000008f7000080ea001302003300fe3301300cfe000020f7000020ea001302003332fe3301300cfe000008f7000080ea001302001e31fee101e00cfe000040f7000010ea000efa00000cfe000008f7000080ea000efa00000cfe000080f7000008ea000efa00000cfe000008f7000080ea0006fa00000cdb000efa00040c00000108f7000084ea0006fa00000cdb000efa00040c00000208f7000083ea000dfa00030c000004f6000001ea000efa00000cfe000008f7000080ea0006fa00000cdb000ffa00040c00000808f700018080eb0006fa00000cdb000ffa00040c00001008f700018040eb000dfa00030c000020f5000020eb000efa00000cfe000008f7000080ea000dfa00030c000040f5000010eb000efa00000cfe000008f7000080ea0006fa00000cdb000ffa00040c00008008f700018008eb0006fa00000cdb000ffa00040c00010008f700018004eb0006fa00000cdb000efa00000cfe000008f7000080ea000cfa00020c0002f4000002eb000efa00000cfe000008f7000080ea000cfa00020c0004f4000001eb000efa00000cfe000008f7000080ea000cfa00020c0008f3000080ec000efa00000cfe000008f7000080ea0006fa00000cdb0010fa00040c00100008f70002800040ec0006fa00000cdb0010fa00040c00200008f70002800030ec0006fa00000cdb0010fa00040c00400008f70002800010ec0006fa00000cdb0010fa00040c00800008f70002800008ec0006fa00000cdb000efa00000cfe000008f7000080ea000bfa00010c01f2000004ec000efa00000cfe000008f7000080ea000f02000f00fdf0010c02f2000002ec001302001981fe9901980cfe000008f7000080ea001502001981fe9901980ffeff00f7f7ff007febff00f80d02001981fe9901980fdcff00f81c02001981fe9902980c02fa000004fa000001fa000004fa000002fc001d02001981fe9902980c02fa000004fa00010180fb000004fa00000afc001c02001981fe9902980c02fa000004fa000001fa000004fa000002fc001c010019fd9902980c02fa000004fa00010140fb000004fa000012fc001b02000f18fdf0010c02fa000004fa000001fa000004fa000002fc000bfa00010c02e2000002fc000efa00000cf0000020f3000020fc0006fa00000cdb000afa00000cf0000010ed0006fa00000cdb000cfa00000ce20002038638fd001afa00000cf40004478e00871cfc0002073e70fc0002044844fd0022fa00040c070001c7fd0001e380fe0004c4110188a2fc000208a288fb00015044fd0023fa000a0c08800228800000011440fe000447110088a2fb00018288fc0002019e44fd0023fa000a0c08800028800000011440fe00044091008722fc0002010488fb00015144fd0023fa000a0c088000c8800000011440fe000440510088a2fc0002020488fb00015144fd0023fa00050c0880002880fe0001f440fe000440510088a2fc0002040888fb00015144fd0023fa00050c0880002880fe00011440fe000440510088a2fc0002088888fb00018e38fd0022fa00050c0880002880fe00012440fe0004e08e01c71cfc00020f8870fc000003fb0013fa00040c07000047fd0001c380fe000007e9000afa00040c00000180df000efa00000cef000040f5000018fb0006fa00000cdb000efa00000cef000020f5000020fb0006fa00000cdb0006fa00000cdb000efa00000cef000010f5000040fb0006fa00000cdb000efa00000cef000008f5000080fb0006fa00000cdb000efa00000cef000004f6000001fa0006fa00000cdb000efa00000cef000002f6000002fa0006fa00000cdb000efa00000cef000001f6000004fa0006fa00000cdb000efa00000cee000080f7000008fa0006fa00000cdb0006fa00000cdb000efa00000cee000040f7000010fa0006fa00000cdb000efa00000cee000020f7000020fa0006fa00000cdb000efa00000cee000010f7000040fa0006fa00000cdb000efa00000cee000008f7000080fa0006fa00000cdb000ffa00000cee000004f800010180fa0006fa00000cdb000efa00000cee000002f8000002f90006fa00000cdb000efa00000cee000001f8000004f90006fa00000cdb000efa00000ced000080f9000008f9000efa00000ced000040f9000010f90006fa00000cdb000efa00000ced000020f9000020f9000efa00000ced000010f9000040f90006fa00000cdb000efa00000ced000018f9000080f90006fa00000cdb000efa00000ced00000cfa000001f80006fa00000cdb000efa00000ced000006fa000003f8000efa00000ced000001fa000004f8000efa00000ced000002fa000002f8000ffa00000ced00010180fb00000cf8000efa00000cec000040fb000018f8000efa00000cec000080fb000008f8000efa00000cec000060fb000030f8000efa00000cec000030fb000060f8000efa00000cec000010fb000040f8000efa00000cec000008fb000080f8000ffa00000cec00000cfc00010180f8000efa00000cec000004fc000001f7000efa00000cec000002fc000002f7000efa00000cec000003fc000007f7000efa00000cec000001fc000004f7000efa00000ceb000080fd000008f7000efa00000ceb000040fd000010f7000efa00000ceb000020fd000020f70006fa00000cdb000efa00000ceb000018fd0000c0f70006fa00000cdb000efa00000ceb000004fe000001f6000efa00000ceb000003fe000006f6000dfa00000cea000380000008f6000dfa00000cea000340000010f6001102000600fdf0000cea000330000070f6001202000e01fe9901980cea00030c000180f6001102000601fe9901980cea0002020002f5001202000601fe9902980fffeb000201fffcf50010020f8601fe9901980ce900017ff0f5000b02000601fe9901980cdb000b02000601fe9901980cdb000b02000619fe9901980cdb000a02000618fdf0000cdb0006fa00000cdb0006fa00000cdb0006fa00000cdb0006fa00000cdb0006fa00000cdb0006fa00000cdb0002d30002d30002d30002d30002d30002d3000fec00017fc6fb00048000107f80f50010ec00017fc6fc0005018000307f80f50010ec000130c0fc0005038000706180f5000fec000130c0fc00040380007063f40011ec000b300e1fdce7f1f00180003006f40011ec000b300e3fdce7fbf8018000300cf40011ec000b3e06318c631b18018000301ff40012ec000c3e06318c6303180183f8301f80f50012ec000c3006318c6303f80183f8300180f50012ec000c3006318c6303f8018000300180f50012ec000c3006318c630300018000300180f50012ec000c3006318c630318018000306180f50012ec000c780f3f8ff783f803c000787f8cf50012ec000c780f1f87f781f003c000783f0cf50007ea00010180ec0007ea00013180ec0007ea00013f80ec0006ea00001feb0002d300ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-15\par \pard\plain \s3\qj\sb160 \f20 Notice, however, that two angular measurements can , for example have sine values of 0.5.  In the first quadrant, it's at 30 degrees.  In the second quadrant, it's at 150 degrees\emdash 30 degrees from the "zero" value.  In other words, the sin values in the first and second quadrants are mirror images of each other.  The same is true for quadrants three and four.  And the relationship between one half (0-180 degrees) to the other (180-360 degrees) is that the second half mirrors the first, but as negative values.  Therefore, if you have a table of sine values for 0-90 degrees, it is a relatively simple matter to calculate the corresponding values in each of the remaining quad\-rants.  The Sin program takes care of both the table and calculations.\par \pard \s3\qj\sb160 Some graphics programs will likely need to fetch sine or cosine values to draw sophisticated shapes on the screen.  Sin (and its classes TrigTable and Angle) will probably come in handy for you in the future.\par \pard \s3\qj\sb160 Sin will often be summoned from the second program, Turtle.  The intent of Turtle is two-fold.  First of all, it will create class definitions of a pen and a polygon that you'll use to experiment developing a Logo-like environment.  Turtle will also use the pen and polygons it creates (along with definitions from Sin) to draw some sophisticated graphics on the screen.  As it turns out, these graphics will be incorporated into yet a third demonstration program, grDemo, which is the subject of the last lessons in this Tutorial.\par \pard \s3\qj\sb160 This building block approach is a common tactic in designing a Mops program.  Carefully, generically de\-signed building blocks, such as Sin and parts of Turtle, can be used in a wide vari\-ety of programs, making it easier and faster to assemble programs from your library of proven blocks.\par \pard\plain \s13\keepn \f22\fs20 1\tab \\ These classes obtain the sine and cos of an angle by table lookup.\par 2\tab \\ Modified from the original Neon version by Mike Hore.\par 3\par 4\tab \\ The main class is ANGLE, which has SIN: and COS: methods that look\par \pard \s13 5\tab \\ up a table defined with the TRIGTABLE class.\par 6\par 7\par 8\tab need\tab struct1\par 9\par 10\par \pard \s13\keepn 11\tab :class  TRIGTABLE  super\{ wArray \}\par 12\par 13\tab \tab 4\tab wArray  AXISVALS\tab \tab \\ 90 degree values\par \pard \s13 14\par \pard \s13\keepn 15\tab :m SIN:  \{ degree \\ quadrant  -- sin \}\par 16\tab \\ Looks up a sin * 10000 of an angle\par 17\par 18\tab \tab degree 360 mod\tab \tab \tab \\ Put angle in range -359 to +359\par 19\tab \tab dup 0< IF  360 +  THEN\tab \tab \\ Now 0 to +359\par 20\tab \tab 90  /mod\tab \tab \\ Convert angle to range 0-89 and get quadrant\par 21\tab \tab -> quadrant   -> degree\par 22\tab \tab degree\tab \tab \tab \tab \\ Test for an axis\par 23\tab \tab NIF\tab quadrant  at: axisVals\tab \\ If an axis, get value\par \pard \s13\ri-380\keepn 24\tab \tab ELSE\tab quadrant 1 and\tab \tab \\ True for "mirror" quadrants 1 and 3\par \pard \s13\keepn 25\tab \tab \tab IF\tab 90 degree  -\tab \\ Create mirror image\par 26\tab \tab \tab ELSE\tab degree\par 27\tab \tab \tab THEN   \par 28\tab \tab \tab at: self\tab \tab \tab \\ Get sin for this degree\par \pard \s13\ri-720\keepn 29\tab \tab \tab quadrant 2 and\tab \tab \\ True for "negative" quadrants 2 and 3\par \pard \s13\keepn 30\tab \tab \tab IF  negate  THEN\par \pard \s13 31\tab \tab THEN  ;m\par 32\par \pard \s13\keepn 33\tab :m  COS:\tab \\ ( degree -- cos )\par \pard \s13 34\tab \tab 90 +   sin: self  ;m\tab \tab \\ Cos is sin shifted by 90 degrees\par 35\par \pard \s13\keepn 36\tab :m  CLASSINIT:\par 37\tab \tab 0\tab  0 to: axisvals\par 38\tab \tab 10000\tab  1 to: axisvals  \par 39\tab \tab 0\tab  2 to: axisvals\par \pard \s13 40\tab \tab -10000 3 to: axisvals  ;m\par 41\par 42\tab ;class\par 43\par 44\tab 90  TrigTable  SINES  \tab \\ system-wide table of sines\par 45\par \pard \s13\keepn 46\tab : 's\tab \tab \\ ( val degree -- )    Fills a Sin table entry\par \pard \s13 47\tab \tab to: sines  ;\par 48\par \pard \s13\keepn 49\tab 00000 00 's   00175 01 's   00349 02 's   00524 03 's   00698 04 's\par 50\tab 00872 05 's   01045 06 's   01219 07 's   01392 08 's   01571 09 's\par 51\tab 01736 10 's   01908 11 's   02079 12 's   02250 13 's   02419 14 's\par 52\tab 02588 15 's   02756 16 's   02924 17 's   03090 18 's   03256 19 's\par 53\tab 03420 20 's   03584 21 's   03746 22 's   03907 23 's   04067 24 's\par 54\tab 04226 25 's   04384 26 's   04540 27 's   04695 28 's   04848 29 's\par 55\tab 05000 30 's   05150 31 's   05299 32 's   05446 33 's   05592 34 's\par 56\tab 05736 35 's   05878 36 's   06018 37 's   06157 38 's   06293 39 's\par 57\tab 06428 40 's   06561 41 's   06691 42 's   06820 43 's   06947 44 's\par 58\tab 07071 45 's   07193 46 's   07314 47 's   07431 48 's   07547 49 's\par 59\tab 07660 50 's   07771 51 's   07880 52 's   07986 53 's   08090 54 's\par 60\tab 08192 55 's   08290 56 's   08387 57 's   08480 58 's   08572 59 's\par 61\tab 08660 60 's   08746 61 's   08829 62 's   08910 63 's   08988 64 's\par 62\tab 09063 65 's   09135 66 's   09205 67 's   09272 68 's   09336 69 's\par 63\tab 09397 70 's   09455 71 's   09511 72 's   09563 73 's   09613 74 's\par 64\tab 09659 75 's   09703 76 's   09744 77 's   09781 78 's   09816 79 's\par 65\tab 09848 80 's   09877 81 's   09903 82 's   09925 83 's   09945 84 's\par \pard \s13 66\tab 09962 85 's   09976 86 's   09986 87 's   09994 88 's   09998 89 's\par 67\par \pard \s13\keepn 68\tab : SIN    sin: sines   ;\par \pard \s13 69\tab : COS    cos: sines   ;\par 70\par \pard \s13\keepn 71\tab :class   ANGLE  super\{ int \}\par 72\par 73\tab :m SIN:  get: self   sin  ;m\par 74\tab :m COS:  get: self   cos  ;m\par 75\par \pard \s13 76\tab ;class\par \pard\plain \s254\sb240\keepn \b\f21 How the sine table works\par \pard\plain \s3\qj\sb160 \f20 Let's start with the Sin source code, which is numbered from lines 1 to 72.\par \pard\plain \s253\li720\sb240\keepn \b\f21 Lines 1-5\par \pard\plain \s3\qj\sb160 \f20 These lines are comments that serves as a plain English heading for the source code, describing what this module does, who wrote it, and what its main features are.  This particular module cre\-ates a table of sine values that Turtle will use to draw complex curves and graphics.  We use the "backslash" type of comment here, in which a word consisting of just a backslash causes Mops to ignore the rest of that line.\par \pard\plain \s253\li720\sb240\keepn \b\f21 Line 8\par \pard\plain \s3\qj\sb160 \f20 This line causes Mops to load (compile) the file "struct1", if it is not already loaded.  This file contains the definitions for the classes wArray and bArray which we will need here.  The use of the syntax  need <name>  means that you don't have to worry about whether the file <name> is already loaded or not.  In fact, it may sometimes be loaded, sometimes not, at different stages of your program development.  Using the "need" syntax means that you are explicitly stating the requirements of this source file; Mops will then take care of the details.\par \pard\plain \s253\li720\sb240\keepn \b\f21 Line 11\par \pard\plain \s3\qj\sb160 \f20 Here marks the beginning of a class definition for the class TrigTable.  This class establishes the rules and procedures that will be followed for looking up sines in a sine table (the table is created in lines 44-66).  Since the sine table will be a list of sine values in fixed-point arithmetic (in a range of 0 to 10,000), two bytes of data could be used for each entry (10,000 decimal = 2710 hex\emdash each two-digit hex number takes up one byte of memory).  Class TrigTable is defined as a subclass of class wArray.  \par \pard \s3\qj\sb160 If you look at the source code listing for the superclass wArray (in the file struct1), you'll notice that wArray is defined as an {\ul indexed} {\ul class}:\par \pard\plain \s8\li720 \f22\fs20 :class\tab WARRAY  super\{ indexed-obj \}  2 indexed\par \pard\plain \s3\qj\sb160 \f20 When a class in indexed, it means that every object created of that class must explicitly state how big an area of memory is to be reserved for its private data\emdash how many data slots should be reserved.  The number 2 in the class wArray definition indicates that each slot is to be 2 bytes wide.  When it comes time to create an ob\-ject from an indexed class, the line of code must begin with the number of data slots that object will need (each slot has a unique index number associ\-ated with it).  In line 44, for example, the object Sines created of class TrigTable is reserving 90 slots; each slot is 2 bytes wide because TrigTable {\ul inherits} wArray's 2 byte wide indexed class behavior.  Indexing should become more clear as we describe the rest of this class defi\-nition, and see some practical examples.\par \pard\plain \s253\li720\sb240\keepn \b\f21 Line 13\par \pard\plain \s3\qj\sb160 \f20 This line establishes the instance variable (ivar) for an object of class TrigTable.  Every object cre\-ated from class TrigTable will have space reserved for the array created here, as well as the indexed data noted above.  The array is preceded by the number of elements that it will contain in every in\-stance of class TrigTable, 4 in this case.\par \pard \s3\qj\sb160 This array, AxisVals, is a 4 element array of 2 byte cells.  The range of values to be stored in this array is from -10,000 to +10,000 (the integer values the program will use to signify sine values).  The values in these four cells will be the sine values (times 10,000) of the 90 degree multiples (0, 90, 180, and 270 de\-grees), and will play a role in the calculation of the sine value later in this class definition.  See Figure\~I-16 for a summary of the four quadrants, their signs, and sine values.\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw260\pich169 0bb60000000000aa00eb1101a10064000c574f52440000000000aa00eb01000a0000000000aa00eb98001e0000000000a900f00000000000a900ea0000000000a900ea000108f300020781e0f40008f300020cc330f40008f30002186618f40008f30002186618f40008f30002186618f40008f30002186618f40008f300020ce618f40008f3000207e618f40007f200016618f40007f20001c330f40008f300020781e0f40002e30002e30002e30002e30002e30006f2000010f30006f2000010f30006f2000010f30006f2000010f30006f2000010f30006f2000010f30006f2000010f3000afd00000fecff00c0fe000efd00000df7550050f7000040fe000efd00000af7aa00b0f7000040fe000efd00000df7550050f7000040fe000efd00000af7aa00b0f7000040fe000efd00000df7550050f7000040fe000efd00000af7aa00b0f7000040fe000efd00000df7550050f7000040fe000efd00000af7aa00b0f7000040fe000efd00000df7550050f7000040fe000efd00000af7aa00b0f7000040fe000efd00000df7550050f7000040fe000efd00000af7aa00b0f7000040fe000efd00000df7550050f7000040fe000efd00000af7aa00b0f7000040fe000efd00000df7550050f7000040fe000efd00000af7aa00b0f7000040fe0010fd00000df855027ffff8f8000040fe0012fd00000af9aa04afe0100fe0f9000040fe0012fd00000df95504f00010001ef9000040fe0014fd00000afaaa06af0000100001e0fa000040fe0014fd00000dfa55067000001000001cfa000040fe0015fd00000afbaa07ab80000010000003fa000040fe0016fd00000dfb55005efe000010fe0000e0fb000040fe0016fd00000afbaa00b0fe000010fe000018fb000040fe0016fd00000dfb5500c0fe000010fe000006fb000040fe0017fd00000afcaa00abfd000010fe00010180fc000040fe0016fd00000dfc550056fd000010fd0000c0fc000040fe0016fd00000afcaa00b8fd000010fd000030fc000040fe0016fd00000dfc550060fd000010fd000008fc000040fe0016fd00000afcaa00c0fd000010fd000006fc000040fe0016fd00000dfc550080fd000010fd000003fc000040fe0014fd00000afcaafc000010fc000080fd000040fe0016fd00000dfd550054fc000010fc000040fd000040fe0016fd00000afdaa00a8fc000010fc000020fd000040fe0016fd00000dfd550050fc000010fc000010fd000040fe001afd00000afdaa0ca000000180001000003c000008fd000040fe001afd00000dfd550c40000003800010000066000004fd000040fe001afd00000afdaa0c800000018000100000c3000002fd000040fe001afd00000dfd550c800000018000100000c3000003fd000040fe001bfd00000afeaa00abfe0009018000100000c3000001fd000040fe001cfd00000dfe550056fe0006018000100000c3fe000080fe000040fe001cfd00000afeaa00aefe0006018000100000c3fe0000c0fe000040fe001cfd00000dfe550054fe0006018000100000c3fe000040fe000040fe001cfd00000afeaa00a8fe0006018000100000c3fe000020fe000040fe001cfd00000dfe550058fe000601800010000066fe000020fe000040fe001cfd00000afeaa00b0fe00060180001000003cfe000010fe000040fe0016fd00000dfe550050fb000010fb000010fe000040fe0016fd00000afeaa00a0fb000010fb000008fe000040fe0016fd00000dfe550060fb000010fb000008fe000040fe0016fd00000afeaa00a0fb000010fb000008fe000040fe0016fd00000dfe550040fb000010fb000004fe000040fe0016fd00000afeaa00c0fb000010fb000004fe000040fe0016fd00000dfe550040fb000010fb000004fe000040fe001904603c0f000afeaa00c0fb000010fb000004fe000340000f001904e06619800dfe550080fb000010fb000002fe0003400019801904606630c00afeaa0080fb000010fb000002fe0003400030c01904606630c00dfe550080fb000010fb000002fe0003400030c01904603c30c00afeaa0080fb000010fb000002fe0003400030c00b03606630c1eaff028030c0190460c330c008fe000080fb000010fb000003fe1103400030c0190460c330c00dfe550080fb000010fb000002fe4403400030c0190460c330c008fe000080fb000010fb000003fe1103400030c01904606619800dfe550080fb000010fb000002fe4403400019801904603c0f0008fe000080fb000010fb000003fe110340000f0016fd00000dfe550080fb000010fb000002fe440040fe0016fd000008fe000040fb000010fb000005fe110040fe0016fd00000dfe550040fb000010fb000004fe440040fe0016fd000008fe000040fb000010fb000005fe110040fe0016fd00000dfe550040fb000010fb000004fe440040fe0016fd000008fe000020fb000010fb000009fe110040fe0016fd00000dfe550060fb000010fb00000cfe440040fe0019fd000008fe000020fe000303c00010fb000009fe110040fe001cfd00000dfe550050fe0006066000100000fffe000014fe440040fe001afd000008fe000010fe00060c300010000006fe00fd110040fe001bfd00000dfe550058fd000530001000000cfe000024fe440040fe001bfd000008fe000008fd0005300010000018fe000031fe110040fe0019fd00000dfe550054fd000560001000003cfe00fd440040fe001bfd000008fe000006fd0005c00010000006fe0000d1fe110040fe001cfd00000dfe550056fe000601800010000003fe0000c4fe440040fe001bfd000008fe000001fe000903000010000003000001fd110040fe001afd00000dfd550c80000006000010000003000003fd440040fe001afd000008fd000c8000000ff000100000c6000003fd110040fe0018fd00000dfd550040fc00061000007c000004fd440040fe0016fd000008fd000020fc000010fc000009fd110040fe0016fd00000dfd550050fc000010fc000014fd440040fe0016fd000008fd000008fc000010fc000031fd110040fe0014fd00000dfd550054fc000010fc00fc440040fe0016fd000008fd000002fc000010fc000091fd110040fe0016fd00000dfc550080fd000010fd000003fc440040fe0016fd000008fc0000c0fd000010fd000007fc110040fe0016fd00000dfc550060fd000010fd00000cfc440040fe0016fd000008fc000018fd000010fd000031fc110040fe0016fd00000dfc550056fd000010fd0000c4fc440040fe0017fd000008fc000003fd000010fe00010191fc110040fe0016fd00000dfb5500c0fe000010fe000006fb440040fe0016fd000008fb000030fe000010fe000019fb110040fe0016fd00000dfb55005efe000010fe0000e4fb440040fe0015fd000008fb00070180000010000003fa110040fe0014fd00000dfa55067000001000001cfa440040fe0014fd000008fa00060f0000100001f1fa110040fe0012fd00000df95504f00010001ef9440040fe0012fd000008f900040fe0100ff1f9110040fe0010fd00000df855027ffffcf8440040fe000cfd000008f700f6110040fe000efd00000df7550054f7440040fe000cfd000008f700f6110040fe000efd00000df7550054f7440040fe000cfd000008f700f6110040fe000efd00000df7550054f7440040fe000cfd000008f700f6110040fe000efd00000df7550054f7440040fe000cfd000008f700f6110040fe000efd00000df7550054f7440040fe000cfd000008f700f6110040fe000efd00000df7550054f7440040fe000cfd000008f700f6110040fe000efd00000df7550054f7440040fe000cfd000008f700f6110040fe000efd00000df7550054f7440040fe000cfd000008f700f6110040fe000afd00000fecff00c0fe0006f2000010f30006f2000010f30006f2000010f30006f2000010f30006f2000010f30006f2000010f30006f2000010f30002e30002e30002e30002e30002e30002e30009f30003787f8780f50009f30003cc018cc0f5000af400040186019860f50009f3000306031860f50009f3000306031860f50009f300030c061860f50009f3000318061860f50009f30003300c1860f50009f30003600c1860f50009f30003c00c0cc0f5000af4000401fe0c0780f500ff}}\par \pard \s16\qc\sb160\keepn {{\pict\macpict\picw330\pich74 035000000000004a014a001102ff0c00ffffffff0000000000000000014a0000004a0000000000000001000afffefffe004c014c002c000800140554696d657300030014000d000c002e00040000ff00002b0e0a085175616472616e7400002942045369676e0029310c4465677265652052616e67650029621053696e652056616c75652052616e676500230000002300000022000000014600003200010048000100490022000000480000002200000049220000320001006c0001006d00220000006c000000220000006d6a000032000100d8000100d90022000000d800000022000000d96a00002200000144000000230000002200010000000b003200010048000d004900320001006c000d006d0032000100d8000d00d9002200010144000b0022000d0000000b0032000d0048001900490032000d006c0019006d0032000d00d8001900d90022000d0144000b0028002200220130002935012b0000293b073020746f203930000029570e303030303020746f203130303030002200190000000b0032001900480025004900320019006c0025006d0032001900d8002500d9002200190144000b0028002e00220131002935012b0000293509393020746f203138300000295d0e313030303020746f203030303030002200250000000b0032002500480031004900320025006c0031006d0032002500d8003100d9002200250144000b0028003a00220132002937012d000029300a31383020746f2032373000295d10ca303030303020746f202d3130303030002200310000000b003200310048003d004900320031006c003d006d0032003100d8003d00d9002200310144000b0028004600220133002937012d000029300a32373020746f2033363000295d102d313030303020746f203030303030ca0022003d0000000b0032004a0000004a000100220049000000000023000000220049000146000032003d0048004900490032004a0048004a0049002200490048000000220049004922000032003d006c0049006d0032004a006c004a006d00220049006c000000220049006d6a000032003d00d8004900d90032004a00d8004a00d90022004900d800000022004900d96a000022003d0144000b0032004a0144004a0145002200490144000000230000003200490145004a014e00ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-16\par \pard\plain \s253\li720\sb240\keepn \b\f21 Line 15\par \pard\plain \s3\qj\sb160 \f20 This begins the definition of the method SIN:.  The notation \{ degree \\ quadrant -- sin \}  indi\-cates that there is one named input parameter for this method, called "degree", and one local variable, "quadrant".  References to such values are made by their {\ul name}, not by their stack loca\-tion, thus eliminating much stack manipulation in the course of calculating sine values in the next several lines of code.  Within the definition, "quadrant" will be used to store the value of the quadrant (0, 1, 2, 3) for which the sine is being calculated.\par \pard \s3\qj\sb160 This curly braces notation also doubles to give the stack effects of the execution of the method.  This tells you that if you use this SIN: method as a selector in a message, and if you pass a degree figure as a parameter, (e.g., 90 SIN: object), then the corresponding sine value would be left on the stack when the method's computations are completed.\par \pard\plain \s253\li720\sb240\keepn \b\f21 Line 16\par \pard\plain \s3\qj\sb160 \f20 The comment tells you what is happening in this method: the program looks up the sine value of an angle (in degrees).  In the calculations the actual sine values will be multiplied by a factor of 10,000.  All sine values in the sine table, therefore, will be integers.\par \pard\plain \s253\li720\sb240\keepn \b\f21 Lines 18-34\par \pard\plain \s3\qj\sb160 \f20 Next comes the actual calculation and retrieval of the sine values.  Because the math in this cal\-culation is so tightly interwoven with IF...THEN decision constructions, we will trace what hap\-pens to the stack at each step, as well as explain why various operations are performed.\par \pard \s3\qj\sb160 As an overview, we can say that the math calculations first convert the degree value to be in the range 0 - 359.  Allowance is made for degree values entered as negative numbers, or degrees of magnitude 360 or greater.  Once the degree is thus normalized, it is converted to the equivalent degree in the range 0 - 89 and the quadrant is saved for doing mirror image calculations and determining the sign.  For degrees on an axis (0, 90, 180, or 270) the sine is gotten from the ivar AxisVals, since this is the simplest way to handle these special cases.  Otherwise a lookup is per\-formed on the TrigTable array.\par \pard \s3\qj\sb160 To best understand the operation of the decision processes in this section, we will follow what happens to the values on the stack when we try degree values less than 90 degrees, exactly 180 degrees, and a value in the third quadrant.  But to do this properly, we should go on to explain how the arrays are filled with the values that the method SIN: will be retrieving, and what those values mean.\par \pard\plain \s253\li720\sb240\keepn \b\f21 Lines 36-40\par \pard\plain \s3\qj\sb160 \f20 The method CLASSINIT: is a special method that executes whenever an object of the current class is cre\-ated.  The operations in this particular CLASSINIT: are four messages, all of them TO: operations.  The TO: selector of these messages is defined by a TO: method in the receiver's class.  Since the receiver is the ivar AxisVals, the class in question is wArray.\par \pard \s3\qj\sb160 For arrays, the methods AT: and TO: are the equivalents of GET: and PUT: for ordinary scalar objects.  They expect an index on the stack at the start, to indicate which array element is to be accessed.\par \pard \s3\qj\sb160 Since class TrigTable has now been defined (all the code from line 10 through line 42), we can now create an actual table in memory as an object of that class.  The statement in line 44 does just that, establishing an indexed array object, called Sines, capable of storing 90 values in addi\-tion to the ivars, Signs and AxisVals.  At this point, no values have been entered into the 90 cells of the Sines array, but the space is there, ready for values to be plugged in.  The array bears the characteristics of arrays defined in TrigTable's superclass, wArray. \par \pard\plain \s253\li720\sb240\keepn \b\f21 Lines 46-66\par \pard\plain \s3\qj\sb160 \f20 While the columns of numbers in lines 49 through 66 may look intimidating, they are really nothing more than the values of what becomes a computer version of a lookup table, like the kind at the end of a trigonometry book.  Lines 46 and 47 define a Mops word, 's (the apostrophe is pronounced "tick") that performs a similar kind of TO: storage operation as demonstrated in CLASSINIT:, but this time the storage is to an object called Sines, which is our TrigTable object.  When Sines receives a message with a TO: selector, Sines first looks in its own class (TrigTable) for a matching definition.  Since there is none here, Sines then looks to its superclass wArray, where it finds a TO: method.\par \pard \s3\qj\sb160 The stack notation for this definition uses round parentheses rather than braces, since it is a straight comment, not a definition for named parameters or local variables.  This definition makes no use of named parameters or locals.  To make it quite clear, we have put a \\ first, which makes the remainder of the line a comment anyway.  This isn't required at all, but it just prevents confusion with the braces syntax, which doubles for a stack notation and a definition of named parameters or locals.\par \pard \s3\qj\sb160 The table was designed so that the values of the degrees to be looked up would range from 0 to 89.  That way, these very degree values will have double duty as index numbers to the respective sine values in the table.  Therefore, when it comes time (in the SIN: method, above) to lookup a sine value in the table, the degree value coming in as a parameter from a message will be used as the index value associated with the desired sine value.  We'll see how that works in a moment, but that's why the stack notation in line 46 indi\-cates that the parameters to be passed with each 's operation are the sine value and the angle in degrees, when in actuality, the TO: selector sees the degree figure only as an index number.\par \pard \s3\qj\sb160 The sine values, then, are added to the table by the long series of 's operations, each preceded by the sine value (times 10,000) and the double-duty index/degree value.{\f21 \par }\pard\plain \s254\sb240\keepn \b\f21 What happens on the stack\par \pard\plain \s3\qj\sb160 \f20 Now we can go back to method SIN: in lines 15 to 31 to see what happens when we send three different de\-gree values and the SIN: selector to the object Sines.  The three values will be 35, 180, and 293 degrees.  In the listings below, the numbers next to each operation indicate the actual numbers on the stack at that instant of execution.  When more than one number is one the stack, the topmost number in the listing is the number on the top of the stack.\par \pard\plain \f20 \par \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx2800\clshdng0\cellx4240\clshdng0\cellx5680\pard \keepn\intbl {\f21 \line Statement\cell 35 \line degrees\cell 180 degrees\cell 293 degrees}\cell \pard \intbl \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx2800\clshdng0\cellx4240\clshdng0\cellx5680\pard \keepn\intbl \cell \cell \cell \cell \pard \intbl \row \pard \sb80\intbl degree\cell 35\cell 180\cell 293\cell \pard \intbl \row \pard \sb80\intbl 360\cell \pard \sb80\intbl 360\line 35\cell 360\line 180\cell 360\line 293\cell \pard \intbl \row \pard \sb80\intbl mod\cell 35\cell 180\cell 293\cell \pard \intbl \row \pard \sb80\intbl dup\cell \pard \sb80\intbl 35\line 35\cell 180\line 180\cell 293\line 293\cell \pard \intbl \row \pard \sb80\intbl 0<\cell \pard \sb80\intbl 0\line 35\cell 0\line 180\cell 0\line 293\cell \pard \intbl \row \pard \sb80\intbl IF\cell 35\cell 180\cell 293\cell \pard \intbl \row \pard \sb80\intbl 360\cell :\cell :\cell :\cell \pard \intbl \row \pard \sb80\intbl +\cell :\cell :\cell :\cell \pard \intbl \row \pard \sb80\intbl THEN\cell :\cell :\cell :\cell \pard \intbl \row \pard \sb80\intbl 90\cell \pard \sb80\intbl 90\line 35\cell 90\line 180\cell 90\line 293\cell \pard \intbl \row \pard \sb80\intbl /mod\cell \pard \sb80\intbl 0\line 35\cell 2\line 0\cell 3\line 23\cell \pard \intbl \row \pard \sb80\intbl -> quadrant\cell 35\cell 0\cell 23\cell \pard \intbl \row \pard \sb80\intbl -> degree\cell ---\cell ---\cell ---\cell \pard \intbl \row \pard \sb80\intbl degree\cell 35\cell 0\cell 23\cell \pard \intbl \row \pard \sb80\intbl NIF\cell ---\cell ---\cell ---\cell \pard \intbl \row \pard \sb80\intbl quadrant\cell :\cell 2\cell :\cell \pard \intbl \row \pard \sb80\intbl at: axisVals\cell :\cell 0\cell :\cell \pard \intbl \row \pard \sb80\intbl ELSE\cell ---\cell :\cell ---\cell \pard \intbl \row \pard \sb80\intbl quadrant\cell 0\cell :\cell 3\cell \pard \intbl \row \pard \sb80\intbl 1\cell \pard \sb80\intbl 1\line 0\cell \pard \sb80\intbl :\cell \pard \sb80\intbl 1\line 3\cell \pard \intbl \row \pard \sb80\intbl and\cell 0\cell :\cell 1\cell \pard \intbl \row \pard \sb80\intbl IF\cell ---\cell :\cell ---\cell \pard \intbl \row \pard \sb80\intbl 90\cell :\cell :\cell 90\cell \pard \intbl \row \pard \sb80\intbl degree\cell :\cell :\cell \pard \sb80\intbl 23\line 90\cell \pard \intbl \row \pard \sb80\intbl -\cell :\cell :\cell 67\cell \pard \intbl \row \pard \sb80\intbl ELSE\cell ---\cell :\cell :\cell \pard \intbl \row \pard \sb80\intbl degree\cell 35\cell :\cell :\cell \pard \intbl \row \pard \sb80\intbl THEN\cell 35\cell :\cell 67\cell \pard \intbl \row \pard \sb80\intbl at: self\cell 5736\cell :\cell 9205\cell \pard \intbl \row \pard \sb80\intbl quadrant\cell 0\par 5736\cell :\cell \pard \sb80\intbl 3\line 9205\cell \pard \intbl \row \pard \sb80\intbl 2\cell \pard \sb80\intbl 2\line 0\line 5736\cell \pard \sb80\intbl :\cell \pard \sb80\intbl 2\line 3\line 9205\cell \pard \intbl \row \pard \sb80\intbl and\cell \pard \sb80\intbl 0\line 5736\cell \pard \sb80\intbl :\cell \pard \sb80\intbl 2\line 9205\cell \pard \intbl \row \pard \sb80\intbl IF\cell 5736\cell :\cell 9205\cell \pard \intbl \row \pard \sb80\intbl negate\cell :\cell :\cell -9205\cell \pard \intbl \row \pard \sb80\intbl THEN\cell 5736\cell :\cell -9205\cell \pard \intbl \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx2800\clshdng0\cellx4240\clshdng0\cellx5680\pard \sb80\intbl THEN\cell 5736\cell 0\cell -9205\cell \pard \intbl \row \pard\plain \s3\qj\sb160 \f20 Now for a description of what happens to each degree value.\par \pard \s3\qj\sb160 The mod operation in line 18 provides the stack with the remainder of dividing the degree entry by 360.  If the entry was 360 or more, this will normalize the degree value to be between 0 and 359.  If the entry was negative the mod operation returns a negative value between -359 and 0, and further normalization is re\-quired.  Line 19 tests the result to see if it was negative, and if it was negative, adds 360 to convert it to the equivalent positive angle, correctly in the range 0 to 359.  \par The /mod operation on line 20 takes the normalized degree value off the stack and returns a  quotient and remainder.  A quotient of zero indicates it is in the upper right quadrant, a one places the degree in the sec\-ond quadrant, and so on.  The remainder becomes the degree value that will be checked against the sine table, since the table contains values for only a 90 \endash degree chunk of the full 360 degree range.  On line 21 these values are taken from the stack and put into local storage.\par \pard \s3\qj\sb160 For the next operation on line 22, we recall the value from "degree"  (but this does not remove it from "degree," it only copies it onto the stack) and test to see if it is equal to zero.\par \pard \s3\qj\sb160 If the value is zero, that means that the degree value is a multiple of 90 degrees, and therefore lies on a boundary between two quadrants.  To save time and calculation, the sine values for those four boundaries have been stored in the AxisVals array.  Since the degree value is zero, the operation after the NIF statement on line 23 is performed.  The quadrant value saved earlier is placed on the stack and used as an index for the AT: selector.  The AT: method in AxisVals' class, wArray, is the opposite of the TO: storage operator, which was used to place values in the arrays.  The AT: operation instead {\ul fetches} a value from an array object (in this case named AxisVals) according to the index number that is on the top of the stack.  In our 180 degree example, a value of 2 was saved in quadrant and the put on the stack.  The value in the Ax\-isVals cell corresponding to the index "2" is then placed on the stack (it has only been copied from the array, not removed).  At this point, the final sine value is in the stack, so there is no further operation needed.  Following the rules of nested IF...ELSE...THEN statements, execution con\-tinues to the outermost THEN statement, which is at the end of the method.\par \pard \s3\qj\sb160 But when the degree value is not zero, much more happens.  The quadrant value is ANDed with 1 on line 24 and tested to see if is 1 or 3.  If so, then the degree value is recalled and has 90 degrees subtracted from it on line 25 (sine values increase to 90 degrees, then decrease to 180 in a reverse, mirror image).  Otherwise, just the degree value is placed on the stack again on line 26.\par \pard \s3\qj\sb160 In line 28, the AT: selector takes the index value currently on the stack (it also happens to be the degree to be checked in the sine table) and fetches the value from the Sines array.  The "self" notation tells Mops to per\-form the AT: fetch on the Sines object.\par \pard \s3\qj\sb160 That AT: fetch operation places the sine value from the table on the stack.  One last job remains\emdash to deter\-mine if the sine value is positive or negative.  The quadrant number is ANDed with 2 on line 29.  If the quadrant is 2 or 3, which are the quadrants for which the sine is nega\-tive, the result of this AND will be non-zero.  In this case the sine value, which is all that remains on the stack, is made negative (with the negate operation of line 30), otherwise, it stands positive, and the method ends.\par \pard \s3\qj\sb160 The COS: method in lines 33 and 34 uses the power of the SIN: method, but simply modifies it to take into account the mathematical relationship between a sine and cosine of an angle.  A cosine can be calculated from a sine by phase shifting 90 degrees.\par \pard \s3\qj\sb160 At this point in the program (up to line 66), the kind of message you would send to calculate the sine of a degree value would be:\par \pard\plain \s8\li720 \f22\fs20 125 sin: Sines\par \pard\plain \s3\qj\sb160 \f20 To simplify this even more, two Mops definitions are added (lines 68-69).  Each word sends a message like the one above.  Thereafter, the only code you need in a program to obtain the sine of an angle is:\par \pard\plain \s8\li720 \f22\fs20 125 sin\par \pard\plain \s253\li720\sb240\keepn \b\f21 Lines 71 - 76\par \pard\plain \s3\qj\sb160 \f20 class Angle provides an example of how the sin and cos definitions in lines 68 and 69 can be used in other class definitions, even though those words are defined by messages to objects of a different class.  This class, an integer class, has two methods, SIN: and COS:.  They may appear to have the same method names as methods in class TrigTable, but there will be no interference between the two.  That's because if you cre\-ate an object of class Angle, that object looks up methods only in its own class hierarchy.  It doesn't even know class TrigTable exists.  When a method in class Angle uses the new Mops word "sin," it lets the word reach into memory to do what it has to, even if it means working in other classes\emdash all without disturbing the integrity of class Angle.\par \pard \s3\qj\sb160 The "get: self" message (lines 73 and 74) retrieves the value of the integer stored in an object created from class Angle.  To store a value in that object, you would need to look through class Angle's hierarchy, until you found a PUT: method in the Int superclass that stores the value.  For example, if you create an object\par \pard\plain \s8\li720 \f22\fs20 angle Narrow\par \pard\plain \s3\qj\sb160 \f20 you are setting aside a cell in Narrow's memory for an integer, because class Angle is a subclass of the In\-t class.  You would then need to send the message:\par \pard\plain \s8\li720 \f22\fs20 30 put: Narrow\par \pard\plain \s3\qj\sb160 \f20 to store the value, 30, in the object Narrow.  After that, you can send the message\par \pard\plain \s8\li720 \f22\fs20 sin: Narrow\par \pard\plain \s3\qj\sb160 \f20 which sets the SIN: method in class Angle to work.  The value, 30, is retrieved by the get: self operation, and then the sine value is calculated by the Mops word, sin.  With Mops.dic loaded into memory, try this out yourself.  Create an object of class Angle.  put: a value in the object.  Then send messages to that object to calculate the sine and cosine of the value.  \par \pard\plain \s15\qc\sb720 \f20 End of lesson 15\par \pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 16\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 16\par \pard\plain \s254\sb240\keepn \b\f21 Building a turtle graphics program\par \pard\plain \s3\qj\sb160 \f20 Now we can look at a graphics program, called Turtle.  It defines a number of complex graphics curves and a way you'll be able to create a mini-Logo language out of several definitions in the program.  We'll have the first involvement with Macintosh parameters and Toolbox calls.\par \pard\plain \s13 \f22\fs20 \par \pard \s13 1\tab \\  Turtle Graphics Objects for Demo\par 2\par 3\tab need\tab sin\par 4\par 5\tab decimal\par 6\par 7\tab \\ Class PEN defines a turtle-graphics pen.\par 8\par \pard \s13\keepn 9\tab :class\tab PEN\tab super\{ object \}\par 10\par 11\tab record\{\tab \tab \\ These first 5 ivars comprise a PenState structure\par 12\tab \tab point\tab PnLoc\tab \tab \tab \\ location of pen\par 13\tab \tab point\tab PnSize\tab \tab \\ width,  height\par 14\tab \tab int\tab PnMode\par 15\tab \tab var\tab PnPatLo\par 16\tab \tab var\tab PnPatHi\par 17\tab \}\par 18\tab \tab angle\tab Direction\par 19\tab \tab point\tab homeLoc \par 20\tab \tab int\tab maxReps\par 21\tab \tab int\tab initLen\par 22\tab \tab int\tab deltaLen\tab \tab \\ change in len\par \pard \s13 23\tab \tab int\tab deltaDeg\tab \tab \\ change in angle\par 24\par 25\tab :m GET:    ^base   call GetPenState  ;m\tab \tab \\ Save state here\par 26\tab :m SET:    ^base   call SetPenState  ;m\tab \tab \\ Restore from here\par 27\par 28\tab :m TURN:  ( deg -- )\tab +: direction  ;m\par 29\par 30\tab :m UP:\tab 90 put: direction  ;m\par 31\par \pard \s13\keepn 32\tab :m MOVETO:\tab \\ ( x y -- )\tab Draws a line to x,y if pen shows\par \pard \s13 33\tab \tab set: self  pack  call LineTo  get: self   ;m\par 34\par \pard \s13\keepn 35\tab :m MOVE:  \{ dist  -- \}\tab \\ Draws dist bits in current direction\par 36\tab \tab set: self  cos: direction  dist * 10000 /\par 37\tab \tab sin: direction  dist * 10000 /   negate\par \pard \s13 38\tab \tab pack  call Line  get: self  ;m\par 39\par \pard \s13\keepn 40\tab :m GOTO:\tab \\ ( x y -- )\tab Goes to a location without drawing\par \pard \s13 41\tab \tab put:  PnLoc  ;m\par 42\par \pard \s13\keepn 43\tab :m CENTER:\tab \\ ( x y -- )\tab Sets the center coordinates\par \pard \s13 44\tab \tab put: homeLoc  ;m\par 45\par \pard \s13\keepn 46\tab :m HOME:\tab \\ ( -- )\tab \tab Places pen in center of Mops window\par \pard \s13 47\tab \tab get: homeLoc  goto: self   ;m\par 48\par \pard \s13\keepn 49\tab :m SIZE:\tab \\ ( w h -- )\tab Sets size in pixels of drawing pen\par \pard \s13 50\tab \tab put: PnSize  ;m\par 51\par \pard \s13\keepn 52\tab :m INIT:\tab \\ ( x y w h mode  -- )\par \pard \s13 53\tab \tab put:  PnMode  put: PnSize   put: PnLoc  ;m\par 54\par \pard \s13\keepn 55\tab :m PUTRANGE:\tab \\ ( initlen dLen dDeg -- )\tab Sets parameters\par \pard \s13 56\tab \tab put: deltaDeg  put: deltaLen  put: initLen  ;m\par 57\par 58\tab :m PUTMAX:   ( maxReps -- )    put: maxReps  ;m\par 59\par 60\tab :m CLASSINIT:   get: self   200 put: maxReps  ;m\par 61\par \pard \s13\keepn 62\tab :m SPIRAL:  \{ \\ dist  degrees delta  reps -- \}\par 63\tab \tab \tab \\ Draws a spiral of line segments - Logo POLYSPI\par 64\tab \tab home: self\par 65\tab \tab get: initLen  -> dist  get: deltaLen  -> delta\par 66\tab \tab get: deltaDeg  -> degrees   0 -> reps\par 67\tab \tab BEGIN\tab 1 ++> reps  reps  get: maxReps  < \par 68\tab \tab WHILE\tab dist  move: self   degrees  turn: self\par 69\tab \tab \tab delta ++> dist  \par \pard \s13 70\tab \tab REPEAT  ;m\par 71\par \pard \s13\keepn 72\tab :m DRAGON:\tab \\ ( n -- )   Dragon curves from Martin Gardner\par 73\tab \tab dup\par 74\tab \tab NIF\tab get: deltaLen  move: self  drop  \par 75\tab \tab ELSE\tab dup  0> \par 76\tab \tab \tab IF\tab dup  1-  dragon: self  \par 77\tab \tab \tab \tab get: deltadeg  turn: self\par 78\tab \tab \tab \tab 1 swap -   dragon: self \par 79\tab \tab \tab ELSE\par 80\tab \tab \tab \tab -1 over -   dragon: self\par 81\tab \tab \tab \tab 360 get: deltadeg  -  turn: self\par 82\tab \tab \tab \tab 1+  dragon: self \par 83\tab \tab \tab THEN\par \pard \s13 84\tab \tab THEN  ;m\par 85\tab \tab \par \pard \s13\keepn 86\tab :m LJ:  \{ \\ reps -- \}\tab \\ Draws an infinite Lissajous figure \par 87\tab \tab up: self   0 -> reps\par 88\tab \tab get: initLen  get: direction *  cos 120 /         getX: homeLoc +\par 89\tab \tab get: deltalen get: direction *  sin 120 / negate  getY: homeLoc +\par 90\tab \tab goto: self \par 91\tab \tab BEGIN   1 ++> reps  reps  get: maxReps  <\par 92\tab \tab WHILE\par 93\tab \tab \tab get: initLen  get: direction *  cos  120 /  getX: homeLoc +\par 94\tab \tab \tab get: deltaLen get: direction *  sin  120 /  negate\par 95\tab \tab \tab getY: homeLoc +   moveTo: self\par 96\tab \tab \tab get: deltaDeg  turn: self\par 97\tab \tab REPEAT  ;m\par \pard \s13 98\tab ;class\par 99\par 100\tab \\ Define a Smalltalk Polygon object as subclass of Pen \par 101\par \pard \s13\keepn 102\tab :class  POLY  super\{ pen \}\par 103\par 104\tab \tab int\tab Sides\tab \tab \tab \\ # of sides in the Polygon  \par \pard \s13 105\tab \tab int\tab Length\tab \tab \\ Length of each side  \par 106\par \pard \s13\keepn 107\tab :m DRAW:  \{ \\ turnAngle -- \}\par 108\tab \tab 360  get: sides  /   -> turnAngle\par 109\tab \tab get: sides  0\par 110\tab \tab DO\tab get: length  move: self  \par 111\tab \tab \tab turnAngle  turn: self\par \pard \s13 112\tab \tab LOOP  ;m\par 113\tab \par \pard \s13\keepn 114\tab :m SIZE:\tab \\ ( len  #sides -- )\tab Stores sides and goes to Home\par 115\tab \tab get: self  put: sides  put: length \par \pard \s13 116\tab \tab home: self   up: self  ;m\par 117\par \pard \s13\keepn 118\tab :m SPIN:  \{ \\ reps -- \}\tab \\ Spins a series of polygons around a point  \par 119\tab \tab home: self  10 get: initLen  size: self\par 120\tab \tab 0 -> reps \par 121\tab \tab BEGIN\tab reps  get: maxReps  < \par 122\tab \tab WHILE\tab draw: self  get: deltaDeg  turn: self\par 123\tab \tab \tab get: deltaLen  +: length  1 ++> reps\par \pard \s13 124\tab \tab REPEAT  ;m\par 125\tab  \par \pard \s13\keepn 126\tab :m CLASSINIT:\tab \\ Default Poly is 30-dot triangle\par \pard \s13 127\tab \tab 30 3 size: self  100 put: maxReps  ;m\par 128\par 129\tab ;class\par 130\par 131\tab \\ Create a pen named Bic\par 132\tab Pen\tab BIC\par 133\par 134\tab \\ Create a Polygon named Anna\par 135\tab Poly\tab ANNA\par 136\tab 60 4  size: Anna\par \pard\plain \s253\li720\sb240\keepn \b\f21 Line 3\par \pard\plain \s3\qj\sb160 \f20 The statement "need sin" ensures that the Sin file is loaded before this one.  This file makes use of the Angle class we defined in the file Sin (described in the previous lesson).\par \pard\plain \s253\li720\sb240\keepn \b\f21 Line 5\par \pard\plain \s3\qj\sb160 \f20 "decimal" ensures that all numbers to follow will be in decimal, just in case a different number base was current before.  Incidentally, you can place different portions of your program in differ\-ent number bases, but you may have less difficulty remem\-bering what number base you're in if you stay in decimal and precede any hex number with a dollar sign and a space (e.g., $ AE9F).\par \pard\plain \s253\li720\sb240\keepn \b\f21 Lines 7 - 23\par \pard\plain \s3\qj\sb160 \f20 Beginning on line 9 is the definition of a major class for this program, the one that defines the characteris\-tics of a pen that draws on the Mac screen.   We should point out that by defining a drawing pen in Mops's object-oriented environment, you can have more than one pen drawing object in a given section of the screen (e.g., a window).  The Mac Toolbox on its own does not give you this power.  Consider it an added bonus of using an object-oriented language such as Mops.  As you can see in lines 13 - 23, there are many instance variables for this class.  Some are points, some are integers, a couple are variables, and one is an angle as defined in the class Angle (from the previous lesson).\par As the comment in line 11 indicates, the first five instance variables are the parameters that a Macintosh Toolbox call, PenState, requires.  For details on what the PenState parameters are, {\ul Inside} {\ul Macintosh}'s Quickdraw chapter is the best source.  There you learn that PenState takes four variables, called pnLoc (a coordinate point), pnSize (a coordinate point indicating the num\-ber of pixels wide and high\emdash from coordi\-nate 0,0\emdash the pen is), pnMode (an integer), and pnPat (an 8-byte representation of the pen pattern discussed fully in Inside Macintosh).  Corresponding variables are set up in this class so that any object created from this class will have those parame\-ters stored in the right place and in the right order.\par \pard \s3\qj\sb160 Since this is a Toolbox structure, we have to declare it as a record, as we discussed in Lesson 5.  Ivars declared within records have no extra Mops housekeeping information between them, and this is what Toolbox structures require.\par \pard \s3\qj\sb160 The reason PnPat is divided is because the largest basic data structure readily available from the predefined data structure classes is four bytes wide: the VAR.  What we can do, then, is break up the 8-byte pnPat vari\-able into two 4-byte chunks, called PnPatLo and PnPatHi, with PnPatHi holding the leftmost byte val\-ues.\par \pard \s3\qj\sb160 The remaining instance variables will be used for other purposes in the methods definitions of this class.  If you were building this class from scratch, you would probably be inserting new instance variables in this list as you find need for them while defining methods.\par \pard\plain \s253\li720\sb240\keepn \b\f21 Lines 25 - 26\par \pard\plain \s3\qj\sb160 \f20 These two methods will be used frequently whenever an object of this class draws something on the screen.  The first, GET:, copies the values of the Pen State variables from the Macintosh Toolbox to the ivars of an object.  It's like taking a snapshot of the parameters at a given moment.  Thus, after you move the pen to point x,y, a GET: saves the PenState conditions in an object's memory space.  Later, when it comes time to pick up where you left off, you can SET: the parameters, which copies them from the object's memory to the Toolbox.  \par With the PenState variables saved within an object's "private data," other objects can use the same Toolbox routines without destroying the parameters of the first object.  For example, if you tell the Toolbox to posi\-tion the class Pen object named Scripto1 at coordinate 1,1, and then save those coordinates in Scripto1's data area, you are then free to instruct the Toolbox to position Scripto2 at 100,120, without affecting the data in Scripto1.  Later, when you need to work with Scripto1, the SET: command reminds the Toolbox where Scripto1's position was the last time.\par \pard\plain \s253\li720\sb240\keepn \b\f21 Lines 28 - 60\par \pard\plain \s3\qj\sb160 \f20 The next twelve methods are responsible for manipulating the parameters that affect any object of this class.  For example, TURN: increments the angle value stored in an object's Direction ivar (+: Direction) by the number of degrees passed to it in a message, like\par \pard\plain \s8\li720 \f22\fs20 30 turn: Scripto1\par \pard\plain \s3\qj\sb160 \f20 The Direction ivar is used by sin: and cos: methods from the last lesson.  These correctly handle degree val\-ues of greater than 359 degrees, or less than 0 degrees.  For this reason, TURN: does not concern itself with whether the new Direction is in the range 0 - 259 degrees.\par \pard \s3\qj\sb160 UP: (line 30) simply places a 90 in the data cell of an object's Direction ivar.  This is consistent with the notation of the last chapter where the up position is 90 degrees.  This will be used in a positioning message later to reset the orientation of objects drawn with a pen object from this class.\par \pard \s3\qj\sb160 The MOVETO: method (line 32) features a Mops word that's new to you: Pack.  First of all, the stack no\-tation indicates that this method requires two parameters for the destination coordinate.  The method starts out by copying to the Toolbox (set: self) the PenState values in the object's PenSt ivars.  The set: self message does not affect the stack, since all data movement is going on behind the scenes between the object's ivar space and the Toolbox.  That means that both parameter integers are still on the stack after the set: self operation.  The Pack operation takes those two 16-bit integers, each of which is sitting in a 32-bit stack cell, and combines them into one stack cell in a special format.  \par \pard \s3\qj\sb160 To watch Pack in action, place two numbers on the stack, and list the stack (we'll only show the parameter stack contents here, since that's all we're concerned with now).  Watch what happens to the hex values on the stack:\par \pard\plain \s2\li720 \b\f22\fs20 255 20 .s\par \pard\plain \s8\li720 \f22\fs20 Stack:\par \tab 20  $    14\par      225  $    FF\par \par \pard\plain \s2\li720 \b\f22\fs20 pack .s\par \pard\plain \s8\li720 \f22\fs20 Stack:\par  1310975  $    1400FF\par \pard\plain \s3\qj\sb160 \f20 In other words, when you pack the top two stack entries, the top entry becomes the most signifi\-cant byte(s) of the compacted entry.  The only reason we need to bother with the word Pack is that the QuickDraw call, LineTo (and many others) requires dual integer parameters be passed this way.  Therefore, the packed stack is ready for the next operation in this method, call LineTo, when it comes along.  The LineTo Quick\-Draw procedure, as noted in {\ul Inside} {\ul Macintosh}, draws a line from the current pen location (the one set in the Toolbox by the set: self operation) to the coordinate specified in the parameters.  As soon as the drawing is completed, the new pen state is saved in the object's memory (get: self).\par \pard \s3\qj\sb160 Lines 35 - 38 present another kind of line drawing.  This time the location of the destination point is de\-termined by the length (in pixels) and the direction (as retrieved from the Direction ivar).  This method uses a named input parameter, Dist, because it will be much more convenient to recall the value for each of the two calculations that will be performed on it in this method.  Notice that this method makes use of the sin: and cos: methods defined in the Sin program earlier.  That means that Sin must be loaded into Mops {\ul before} Turtle.  The statement  need Sin on line 3 ensures this.\par \pard \s3\qj\sb160 The operations in MOVE: should now be familiar to you.  The current pen state is copied from the object's ivar to the Toolbox.  Then the sine of the current direction (the object's Direction ivar is the source of the in\-formation) is multiplied by the distance in pixels, and then divided by 10,000 (remember, sin's values have been multiplied by 10,000 for ease of handling) to obtain the x-coordinate for the destination point (which remains on the stack).  The y-coordinate is cal\-culated by the operations in line 37.  Finally, the two coordi\-nates are packed into one cell and sent to the QuickDraw routine, Line, which draws the new line.  After the drawing is completed, the pen state is saved in the object's memory (get: self).\par \pard \s3\qj\sb160 The next four methods, GOTO:, CENTER:, HOME:, and SIZE: should be largely self-explana\-tory.  All of them but HOME: place new values into specific ivars, including one that affects some values of the pen state.  HOME: simply retrieves the most recent value stored via the CENTER: method, and moves a pen class object to that location.  The values you pass to CENTER: depend on the size of the displaying win\-dow, because coordinates are relative to the upper left corner of a window, no matter where it appears on the screen.  (For comparison, the smallest Mac screen is 512 pixels horizontally by 342 vertically.)\par \pard \s3\qj\sb160 INIT: (line 52) allows an object to respecify up to three pen state parameters (mode, size, and location) by way of a single message.  All parameters must be sent with the message, even if only one of them is to be changed.\par Line 55's method, PUTRANGE:, places values into an object's ivar slots that will be used as parameters for some fancy graphics later in the program.  The names stand for a change (delta) in degrees, a change in length, and an initial length.  \par PUTMAX: is the method that allows you to set a value for the maximum number of repetitions some of the graphics images should make.  The effect of the parameter will become more appar\-ent when we get to the figures themselves.\par \pard \s3\qj\sb160 In line 60, the now familiar CLASSINIT: method is performed when an object of this class is created.  It first saves a copy of the current pen state parameters (the ones the Toolbox starts up with) from the Toolbox into an object's first five ivars (get: self).  Finally, the maxReps ivar for the object is set to 200.\par \pard\plain \s253\li720\sb240\keepn \b\f21 Lines 62 - 98\par \pard\plain \s3\qj\sb160 \f20 In these lines are three methods that are largely Mops versions of math calculations for three types of graph\-ics images: spirals, dragon curves, and Lissajous (pronounced {\ul Lih-sah-zhoo}') fig\-ures.  It's not important for our discussion here to understand the inner workings of these graphic routines.  You can, of course, trace the processes yourself, if you like.\par \pard \s3\qj\sb160 We do, however, want to call your attention to the application of local variables in SPIRAL: (and in LJ:).  The backslash inside the curly brackets signifies that these names are local variables, rather than named input parameters (see MOVE: above).  As noted in an earlier lesson, the local variable names are used strictly in\-side a definition, and have no relation to named input parame\-ters in the same definition.\par \pard \s3\qj\sb160 In line 62, SPIRAL: declares four local variable names: dist, degrees, delta and reps.  In line 64, the pen is moved to the center of the current drawing window.  Dist and delta are given values in line 65 by first fetching values from two of the object's ivars, initLen and deltaLen, and then storing the values in their re\-spective local variables (via -> operations).  The third local variable, degrees, gets its value in line 66 after the deltaDeg ivar value is fetched from the object's mem\-ory.  Reps is initialized to zero, and will be used as a counter to compare to maxReps.  Once these local variables have values stored in them, they can be used throughout that method for whatever calculations are desired, as shown in the BEGIN...WHILE...REPEAT structure in lines 67 - 70.  Without local variables, you would have to arrange for a significant amount of stack manipulation to keep the right values in the right places for calculation.  It also simplifies your job of converting complex formulas into Mops, since you can construct your methods using familiar value names in your operations.\par \pard \s3\qj\sb160 This means, of course, that the program will have to load values into initLen, deltaLen, and deltaDeg before a SPIRAL: selector message can be sent.  But that's why PUTRANGE: was defined earlier.\par \pard \s3\qj\sb160 class Pen ends with the  ;class  delimiter on line 98.\par \pard\plain \s253\li720\sb240\keepn \b\f21 Lines 100 - 129\par \pard\plain \s3\qj\sb160 \f20 The next section is another class definition.  This class, Poly, is a subclass of Pen, so it inherits the methods and ivars of Pen.  Therefore, if you create an object of the class Poly, you can still issue messages with se\-lectors like MOVE: and HOME:.\par \pard \s3\qj\sb160 class Poly has two additional instance variables, both of them integers.  When you create an object of this class, the extra ivars are added to the list of ivars inherited from class Pen.  One ivar is for the number of sides of a polygon object created from this class.  The other is the length (in pixels) of each side (all sides are of equal length).  \par \pard \s3\qj\sb160 The DRAW: method is an extension of the MOVE: and TURN: methods defined in class Pen.  First the an\-gle of the turn is calculated by dividing 360 by the number of sides, and is saved in the local variable tur\-nAngle.  DRAW: then sets up a DO...LOOP that performs the actual poly\-gon drawing.  Using the Sides ivar as the limit for the loop, one side is drawn (GET: Length  MOVE: Self).  Then the direction is changed by the amount of turnAngle.  This draw...turn action is repeated until the index equals the limit of the loop.\par \pard \s3\qj\sb160 SIZE: is redefined for this subclass.  It takes two parameters: the length of each side and the number of sides for the polygon.  GET: self copies the current pen state into an object's PenState ivars when you specify the size of a new Poly object (SIZE: will be the first selector you'll send to a new poly object, and it needs the PenState variables in its ivars right away).  The size parameters are stored in their respective instance vari\-ables, Sides and Length.  This method also positions an object to the home position (as defined by the HOME: method in class Pen) and orients it facing to the top of the screen (from the UP: method also in class Pen).\par \pard \s3\qj\sb160 The SPIN: method is a routine that draws a sequence of polygons around a center point to make them look as if they are spinning.  Notice that this method has one local variable, reps, which is used as a counter for the number of repetitions through the BEGIN...WHILE...REPEAT loop.\par Finally, the default settings for an object of class Poly are set by CLASSINIT:.  Unless otherwise specified, a Poly object will be a polygon with 3 sides, each 30 pixels long.  This method also sets the ivar, maxReps, to 100.\par \pard\plain \s253\li720\sb240\keepn \b\f21 Lines 131 - 136\par \pard\plain \s3\qj\sb160 \f20 Next come two examples of objects created from the classes just defined.  The first, Bic, is an object of class Pen.  Anna is an object of class Poly.  In line 136, Anna is changed from its default 30-pixel triangle to a square (4 sides) of 60 pixels on a side.  \par \pard\plain \s254\sb240\keepn \b\f21 Experimenting with Turtle\par \pard\plain \s3\qj\sb160 \f20 Now that you have an understanding of the inner workings of the Turtle program, it's time to play around with it.  We'll start you off with some ideas of things you can do by creating some objects, defining new Mops words, defining new subclasses and even modifying the existing methods to do some tricks.  The more you play with Mops, the quicker you will become com\-fortable with all its powers.\par \pard \s3\qj\sb160 First, you must load the file Turtle.  Load it by either selecting the Load command from the File menu, or typing the "slash-slash" command, as in\par \pard\plain \s8\li720 \f22\fs20 // turtle\par \pard\plain \s3\qj\sb160 \f20 Now when the file loads, you see a series of dots and occasional messages when words are rede\-fined or if an object name is being reused (is not unique).\par \pard \s3\qj\sb160 Once the files are loaded, you might want to see what Lissajous figures are.  Use the Bic pen object as your drawing device.  If you look closely at the methods definition for LJ:, you'll see that it needs values in sev\-eral ivars of Bic for it to function: initLen, deltaLen, deltaDeg, and homeLoc (it also needs maxReps, but that value is set at 200 by CLASSINIT:).  For convenience sake, define a Mops word, "lj," that a) takes three input parameters and assigns them to the first three ivars (an operation that is performed by method PUTRANGE:), b) puts the homeLocation in the center of the screen (performed by method CENTER:), and c) draws the Lissajous figures (method LJ:).  Here's one way to do it:\par \pard\plain \s8\li720 \f22\fs20 : lj  cls  putrange: bic   \par \tab 250 160 center: bic   \par \tab lj: bic   cr   ;\par \pard\plain \s3\qj\sb160 \f20 Try typing in various three integer combinations (e.g., 9 11 301 lj  ) and watch the variety of curves that are drawn.  Try 2 2 2 lj, and you'll notice that the cursor prints on the screen at the last instant before the cr brings the prompt over to the left margin.  To eliminate this, you need to turn off the cursor with the Mops word -curs (the opposite, +curs, turns the cursor back on).  \par \pard \s3\qj\sb160 Now, define a new word that turns the cursor off before doing the Lissajous figures, and turns it on when the drawing is completed:\par \pard\plain \s8\li720 \f22\fs20 : cleanlj  -curs  lj  +curs   ;\par \pard\plain \s3\qj\sb160 \f20 On some integer combinations, the number of repetitions may not be sufficient for the Lissajous figures to complete their drawing (or before they start retracing previous steps).  For example, try 12 1 1949.  To in\-crease the number of repetitions, you can send a PUTMAX: message to Bic to change its maxReps ivar.\par \pard\plain \s8\li720 \f22\fs20 1000 putmax: bic\par \pard\plain \s3\qj\sb160 \f20 Now let's experiment with the Anna object.  Right now, it is a square of 60 pixels on a side.  Put the coor\-dinates for the center of the screen in Anna's homeLoc ivar by sending a message with the CENTER: selec\-tor:\par \pard\plain \s8\li720 \f22\fs20 250 160 center: Anna\par \pard\plain \s3\qj\sb160 \f20 Now, move Anna's PnLoc to the center with this message:\par \pard\plain \s8\li720 \f22\fs20 home: Anna\par \pard\plain \s3\qj\sb160 \f20 Draw Anna.  The square appears on the screen.  Now clear the screen (CLS) and resize Anna so the object has 8 sides, each 20 pixels long and draw the object:\par \pard\plain \s8\li720 \f22\fs20 20 8 size: Anna\par draw: Anna\par \pard\plain \s3\qj\sb160 \f20 In both drawings, the presence of the cursor and Mops prompt really messed things up.  Therefore, define a Mops word that: a) clears the screen, b) turns the cursor off, c) draws Anna, d) brings the prompt to the left margin, and e) turns the cursor back on:\par \pard\plain \s8\li720 \f22\fs20 : draw   cls  -curs  draw: anna  cr  +curs   ;\par \pard\plain \s15\qc\sb720 \f20 {\fs0 End of lesson 16\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 17\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 17\par \pard\plain \s254\sb240\keepn \b\f21 Create a mini-Logo language\par \pard\plain \s3\qj\sb160 \f20 The framework established by classes Pen and Poly allow you to create a miniature version of the Logo lan\-guage, which controls the position and painted trail on the screen of a triangular object called a turtle\emdash hence the name for this demo: Turtle.\par \pard \s3\qj\sb160 We'll show you a few ways to get started.  From there, you should be able to develop a rather sophisticated Logo-like environment.\par \pard \s3\qj\sb160 For this experimentation, we will be writing a customized version of Turtle, which we'll call Logo.  We'll be using an editor to modify Turtle and save it as Logo for later loading into Mops.dic.\par \pard \s3\qj\sb160 If you have come to this lesson without turning off your Mac or quitting Mops.dic from the last lesson, then you should remove all of Turtle's code from Mops.dic.  The fastest way to do this is to use Mops's FOR\-GET operation.  FORGET deletes from the current dictionary in memory all the definitions from a word you specify.  In other words, you type FORGET plus the first defini\-tion of the Turtle program (Pen) to remove Turtle from memory.\par \pard \s3\qj\sb160 To prove it, type:\par \pard\plain \s2\li720 \b\f22\fs20 forget pen\par \pard\plain \s3\qj\sb160 \f20 and then select Words from the List menu.  After several lines have printed on the screen, press any key (other than the space key) two times.  Notice that the word on the top of the dictionary (the one at the upper left of the listing) is Angle, which is the last definition of Sin\emdash the program loaded prior to Turtle.\par \pard \s3\qj\sb160 If, on the other hand, you are starting this lesson fresh, then start up Mops.dic and load Sin.  Our Logo program will load atop Sin.\par \pard\plain \s254\sb240\keepn \b\f21 Designing the language\par \pard\plain \s3\qj\sb160 \f20 We start by defining in our minds what we want our mini language to do.  First of all, we want a turtle on the screen that will be a triangular object from class Poly.  Next, we want to be able to perform a few ma\-neuvers, such as: centering the turtle on the screen; making it move forward in a given direction according to the number of pixels we specify, while the turtle leaves a trail of its pen on the screen; making it turn to the right or left according to the number of degrees we specify.  Finally, we'll define one shape, a square, which the turtle will draw if we tell it how long its sides should be.\par \pard \s3\qj\sb160 Looking through the methods available in Poly and Pen, we see that if we draw the turtle in one location and then move it to another, the original turtle on the screen will still be there, cluttering up the screen.  There\-fore, we need to define an additional method, called UNDRAW:, for class Pen that undraws a turtle where we tell it.  \par \pard \s3\qj\sb160 Since the UNDRAW: method will be adjusting the PenPattern (from black to white) and redraw\-ing the ob\-ject, this method will be defined in terms of the DRAW: method.  Therefore, we can place the UNDRAW: method anywhere in the class Poly definition after the DRAW: method.\par \pard \s3\qj\sb160 As far as the PenPattern parameters go, you can look in the QuickDraw chapter of {\ul Inside} {\ul Macintosh} for guidance.  If there is not enough information there to help (and sometimes there is not), you always have the powers of Mops to help you.  For example, while you are experiment\-ing with parameters, you can place a special method inside class Pen that fetches the current values of the parameters from an object:\par \pard\plain \s8\li720 \f22\fs20 :m INSPECT:\tab \\ (  --  HiPat  LoPat  mode w h x y )\par \tab get: PnPatHi  get: PenPatLo  get: PnMode  \par \tab get: PnSize  get: PnLoc   ;m\par \pard\plain \s3\qj\sb160 \f20 Send a message like:\par \pard\plain \s8\li720 \f22\fs20 inspect: Bic\par \pard\plain \s3\qj\sb160 \f20 Then perform a .S operation to view the parameters on the stack.  Experiment by placing other values in the parameters via a message that calls the INIT: method.  Try to draw some objects to learn the results of the new parameters.\par \pard \s3\qj\sb160 Back to the Logo example and UNDRAW:, the PenPattern values that make a white pen are 0,0 while the values for a black pen are -1,-1.  Place one integer of the pair in each variable, PnPatHi and PnPatLo, draw the object with a white pen, and then restore the pen to black.  The UNDRAW: method could look like this:\par \pard\plain \s8\li720 \f22\fs20 :m UNDRAW:\tab \\ Erases object before moving it and restore black pen\par \tab 0 0  put: PnPatHi  put: PnPatLo  draw: self\par \tab -1 -1  put: PnPatHi  put: PnPatLo  ;m\par \pard\plain \s254\sb240\keepn \b\f21 Implementing a Logo-like language\par \pard\plain \s3\qj\sb160 \f20 Here is the listing of Mops definitions added to the end of the modified Turtle listing:\par \pard\plain \s8\li720 \f22\fs20 \\ Create Logo-like environment\par \par poly turtle                   \\ the name of our Logo object\par 250 160 center: turtle        \\ define the center of the screen\par 10 3 size: turtle             \\ set turtle's size \par \par \par : SPOT\tab \\ Erases old Logo command onscreen and repositions prompt\par \tab 8 210 gotoxy  ;\par \par : .OK  -curs  spot  15 spaces  spot  +curs  ;\par \par \\ Shortcut definition for later:\par \par : TURN  -curs  undraw: turtle  turn: turtle  draw: turtle  .ok  ;\par \par \\ Logo-like commands:\par \par : HOME    -curs   cls   home: turtle   up: turtle  \par           draw: turtle  .ok  ;\par \par : FORWARD\tab \\ ( dist -- )\par \tab -curs   undraw: turtle   move: turtle\par             draw: turtle   .ok  ;\par \par : LEFT  ( deg -- )\tab \tab turn  ;\par \par : RIGHT  ( deg -- )\tab negate  turn  ;\par \par : SQUARE   \{ len -- \}\par            -curs   4 0  DO  len forward  90 right   LOOP\par \tab .ok  ;\par \pard\plain \s3\qj\sb160 \f20 The above Mops words should be self explanatory, except perhaps for the two that control the location of the Logo prompt.  In Logo, the traditional prompt location is near the lower left cor\-ner of the screen.  The Mops word .OK always moves the cursor to the prompt location after the object makes its mark on the screen.  The 15 SPACES operation is added to overprint the old command for a cleaner look on the screen.\par \pard \s3\qj\sb160 While in your editor, save the modified source as "Logo"  (perform a Save As... operation from the File menu).  Return to the Mops.dic window.  Select "Echo during load" from the Mops menu.  Then load Logo into memory with the Load selection from the File menu or by typing:\par \pard\plain \s2\li720 \b\f22\fs20 // logo\par \pard\plain \s3\qj\sb160 \f20 The program source code will appear on the screen, line by line, as it is being compiled into memory.  If you  used a word not previously defined, the load will stop, and a message will tell you what word you need to define.   Some other messages such as "object not unique" may appear as well.  As long as the load doesn't stop, however, nothing fatal is occurring in memory.  When the load is complete, clear the screen with CLS and check your program.\par \pard \s3\qj\sb160 Starting the turtle in the home location, try issuing some Logo commands to make the turtle draw lines, turn, and draw squares of various sizes.  You'll notice that after turning the turtle to some degree measures (especially those not multiples of 45), the turtle will not fully erase when you issue the subsequent com\-mand.  The reason is that when the Toolbox draws the turtle at odd angles, the finishing point of the pen may be a pixel off from the original starting point.  Then, when the UNDRAW: method is invoked, it un\-draws from the finishing point of the last opera\-tion\emdash off-register from the original motion by one pixel.\par \pard \s3\qj\sb160 But with Mops, that should present no difficulty.  Tackle this problem yourself.  Try adding another ivar to the object that remembers the starting point of the turtle, and use that point for the UNDRAW: operation.  Then, define new Mops-Logo words that make entry of commands easier (e.g., establish abbreviated Logo commands such as FD for Forward).  This is the playground on which to cut your teeth on the words in the Mops glossary and class-object-message relation\-ships.\par \pard \s3\qj\sb160 In the remaining lessons of this tutorial, we'll be exploring some of Mops's predefined classes more closely, with the help of an extension of the Turtle program that adds Macintosh-like features to it, such as scroll bars, mouse input, windows, and menus.\par \pard\plain \s15\qc\sb720 \f20 {\fs0 End of lesson 17\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 18\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 18\par \pard\plain \s254\sb240\keepn \b\f21 Inside grDemo\par \pard\plain \s3\qj\sb160 \f20 Before we begin to explain the inner workings of the graphics demonstration program (grDemo), you should be familiar with its basic operation.  First, print out the listing for the "grDemo" source file, which is located in the Demo folder.  You will need to follow along with the source code listing to understand the discussions in this lesson.  It will also be helpful if you have handy a printout of the following files: windowMod.txt, window+, ctl, view and QD.\par \pard \s3\qj\sb160 Next, load and run grDemo to gain an understanding about what it does.\par \pard \s3\qj\sb160 To load grDemo into Mops.dic, double-click Mops.dic to load Mops.dic into memory.  Then select Load...from the File menu.  When the dialog box appears, select grDemo and open it.  This file contains Need commands for the files it needs, and these will be loaded automatically.  As each file loads, you'll see a message telling you what is being loaded.  When all the files are loaded (the File title on the menubar re\-verts to black on white, and the flashing cursor appears at the start of a new line), type\par \pard\plain \s2\li720 \b\f22\fs20 go\par \pard\plain \s3\qj\sb160 \f20 Now the program (which we'll call "Curves") will begin.  Experiment by moving the scroll bars and selecting different routines from the Graphics menu.\par \pard \s3\qj\sb160 As we explain various parts of this program in these final lessons, we will be revealing many of the Macin\-tosh Toolbox features.  While this will in no way serve as a substitute for {\ul Inside} {\ul Macintosh}, it will nonethe\-less give you an appreciation for the many options available to you in programming with Mops.  You should also see enough here to guide you to designing other applications.\par \pard \s3\qj\sb160 It is important that you understand the desired results of this program before we explain it, just as it is im\-perative to know what you want a program to do before you begin writing it.  This demonstration program contains some simple examples of menus, {\ul controls} (like scroll bars) and a window with a separate area in which various graphics routines are displayed.  The graphics displayed in the window are the ones defined in the Turtle demo, explained in the last couple of lessons.\par \pard \s3\qj\sb160 If you were designing this program, this would be the time when you ask yourself two basic questions:\par \pard \s3\qj\sb160 (1) What kind of objects will be in the program?  What classes need to be defined?\par (2) What will be displayed on the screen?\par \pard \s3\qj\sb160 The first question relates more to the inner workings of the program, and the second to the "human interface" aspects.  Of course these two questions are interrelated, but it is often helpful at the start to look at them separately.\par \pard \s3\qj\sb160 In the case of our demo program, the question of the inner working is already largely answered, since we will be using the routines we have developed in the last few lessons.  The interface question remains, however, and a lot of work needs to be done here.  You'll find, however, that Mops has already taken care of most of the messy details.\par \pard\plain \s254\sb240\keepn \b\f21 Views \par \pard\plain \s3\qj\sb160 \f20 When thinking about the appearance of anything on the screen, the Mops class which does most of the hard work is class View.  In essence, a View is a rectangular area within a window, which displays something.  A window is not itself a view, but a window contains one special view which covers the whole of its area except its title bar.  This view is called the {\ul ContView} of the window (since it covers the whole of the window's {\ul cont}ents).  Everything else which displays in a window must display in a view.\par \pard \s3\qj\sb160 Class View has a number of features which make it quite easy to set the size and position of views, and control what happens when they are clicked or need to be drawn.\par \pard \s3\qj\sb160 Views are hierarchical.  That is, views can (and usually do) belong inside other views.  We call a view containing another view a {\ul parent} view, and the view it contains its {\ul child} view.  If you have done any Newton programming, you'll be familiar with this terminology.  In fact, you'll be pleased to know that many of the Mops view features will look rather familiar.\par \pard \s3\qj\sb160 Let's look again at the Curves window to identify the views.\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw446\pich280 1c8300000000011801be1101a10064000c574f524400000000011801be01000a00000000011801be98003800000000011701bd00000000011701bd00000000011701bd00000c0007e2ff00eff5ff00fef700040007ca00040006ca00070304000006cd0007030400000ccd000dfe00070800007800000303d4000cfe0006770000c4000003d3000ffe0004ff8000c0d9fee3011c38d6000ffe0004fe0000c0e2fe33013264d6000ffe0009fe0000dcc1f333333070d6000ffe0004ff8000ccc3fe33013038d6000ffe0004ff8000ccc3fe3301301cd6000ffe00047f0000ccc3fe3301324cd6000ffe000936000078c1f3e3331c38d60006f9000003d20006f9000003d20002c90002c90002c900060007cbff00f83202000003fdff0380000003fdff0380000003fdff0380000003fdff0380000003fdff0380000003fdff0380000003fdff00802c02000003fdfffe000003fdfffe000003fdfffe000003fdfffe000003fdfffe000003fdfffe000003fdff00003902000007feff00f8fe000007feff00f8fe000007feff00f8fe000007feff00f8fe000007feff00f8fe000007feff00f8fe000007feff01f8003902000007feff00b0fe000007feff00b0fe000007feff00b0fe000007feff00b0fe000007feff00b0fe000007feff00b0fe000007feff01b0003906000007fffffee0fe000407fffffee0fe000407fffffee0fe000407807ffee0fe000407fffffee0fe000407fffffee0fe000507fffffee000390200000ffeff00c0fe00000ffeff00c0fe00000ffeff00c0fe00040f003fffc0fe00000ffeff00c0fe00000ffeff00c0fe00000ffeff01c0000701003fccff00c007010020cc00007807010020cc00006007010020cc0000601201002febff00f8fb000003edff03fbffbf600f010020ea00010780e80003020880781401002febff02f80c40fd000003edff03fa08bf6013010020ea00050c0ccdb31e1cec0003020880601501002febff07f80c0cce33333203edff03fa08bf6013010020ea00050c0ccc333338ec0003020880601a01006ff3ff01fe7ffbff07f80c0ccc333f1c03edff03fbf8bf60170100e0f2000080fa00050c0ccc33300eec0003020080601a0101eff3ff01fedffbff07f80c4ccc32312603edff03fa00bf60170107e0f20000e0fa00050787cc3c1e1cec000302008060170107eff3ff01fef7fbff00f8fb000003edff03fbffbf600b0107e0f20000f8dc0000600b0107e0f20000fcdc0000600b0107e0f20000fedc0000600c0007f2ff02feff7fddff00e0100007f2ff02fef83fedfff30002200060110107f0f20000d8ed000001f30002200060110107f0f200008ced000001f30002200060110107f0f200000ced000001f30002200060110107f0f2000006ed000001f30002200078110107f0f2000006ed000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f30002200060180107f0dd0011010003fffc00007fff80000ffff000200060180107f0dd0011010002000400004000800008001000200060180107f0dd0011010002000400004000800008001000200060180107f0dd00110100020604000040c0800008181000200060180107f0dd0011010002090400004120800008241000200060180107f0dd0011010002108400004210800008421000200060180107f0dd00110100022044000044088000088110002000601d0107b0f000013fc0f000110100024024000048048000090090002000601d010630f100011fc0ef0011010002f0f400005e1e80000bc3d0002000601d010430f2000101e0ee00110100021084000042108000084210002000601c010030f200001eed00110100021084000042108000084210002000601c010030f20000e0ed00110100021084000042108000084210002000601c010030f3000007ec00110100021f84000043f08000087e10002000601c010030f3000038ec00110100020004000040008000080010002000601c010030f30000c0ec00110100020004000040008000080010002000601c010030f4000003eb0011010003fffc00007fff80000ffff0002000601c010030f400000ceb0011010003fffc00007fff80000ffff0002000601c010030f4000030eb0011010003000c0000600180000c0030002000601c010030f40000c0eb0011010003000c0000600180000c0030002000601c010030f5000001ea0011010003000c0000600180000c0030002000601c010030f5000006ea0011010003000c0000600180000c0030002000601c010030f5000018ea0011010003000c0000600180000c0030002000601c010030f5000020ea0011010003000c0000600180000c0030002000601c010030f5000040ea0011010003000c0000600180000c0030002000601d010030f600010180ea0011010003000c0000600180000c0030002000601c010030f6000002e90011010003000c0000600180000c0030002000601c010030f6000004e90011010003000c0000600180000c0030002000601c010030f6000008e90011010003000c0000600180000c0030002000601c010030f6000010e90011010003000c0000600180000c0030002000601c010030f6000020e90011010003000c0000600180000c0030002000601c010030f6000040e90011010003000c0000600180000c0030002000601c010030f6000080e90011010003fffc00007fff80000ffff0002000601c010030f7000001e800110100031114000051118000091110002000601c010030f7000002e8001101000244440000444480000c4450002000601c010030f7000004e800110100031114000051118000091110002000601c010070f7000008e8001101000244440000444480000c4450002000601c0100f0f7000010e800110100031114000051118000091110002000601c0101f0f7000020e8001101000244440000444480000c4450002000601c0107f0f7000040e800110100031114000051118000091110002000601c0107f0f7000080e8001101000244440000444480000c4450002000601c0107f0f8000001e700110100031114000051118000091110002000601c0107f0f8000002e7001101000244440000444480000c4450002000601c0107f0f8000002e700110100031114000051118000091110002000601c0107f0f8000004e7001101000244440000444480000c4450002000601c0107f0f8000008e700110100031114000051118000091110002000601c0107f0f8000008e7001101000244440000444480000c4450002000601c0107f0f8000010e700110100031114000051118000091110002000601c0107f0f8000020e7001101000244440000444480000c4450002000601c0107f0f8000020e700110100031114000051118000091110002000601c0107f0f8000040e7001101000244440000444480000c4450002000601c0107f0f8000040e70011010003111400005111800009111000200060200107f0f8000080f0000020f9001101000244440000444480000c445000200060200107f0f9000001ef000010f90011010003111400005111800009111000200060200107f0f9000001ef000010f9001101000244440000444480000c445000200060200107f0f9000001ef000010f90011010003111400005111800009111000200060200107f0f9000002ef000008f9001101000244440000444480000c445000200060200107f0f9000004ef000004f90011010003111400005111800009111000200060200107f0f9000004ef000004f9001101000244440000444480000c445000200060200107f0f9000004ef000004f90011010003111400005111800009111000200060200107f0f9000008ef000002f9001101000244440000444480000c445000200060200107f0f9000008ef000002f90011010003111400005111800009111000200060200107f0f9000008ef000002f9001101000244440000444480000c445000200060200107f0f9000010ef000001f90011010003111400005111800009111000200060200107f0f9000010ef000001f9001101000244440000444480000c445000200060200107f0f9000020ee000080fa0011010003111400005111800009111000200060200107f0f9000020ee000080fa001101000244440000444480000c445000200060200107f0f9000020ee000080fa0011010003111400005111800009111000200060200107f0f9000040ee000040fa001101000244440000444480000c445000200060200107f0f9000040ee000040fa0011010003111400005111800009111000200060200107f0f9000040ee000040fa001101000244440000444480000c445000200060200107f0f9000040ee000040fa0011010003111400005111800009111000200060200107b0f9000080ee000020fa001101000244440000444480000c44500020006020010630f9000080ee000020fa001101000311140000511180000911100020006020010430f9000080ee000020fa001101000244440000444480000c44500020006020010030f9000080ee000020fa001101000311140000511180000911100020006020010030f9000080ee000020fa001101000244440000444480000c44500020006020010030fa000001ed000010fa001101000311140000511180000911100020006020010030fa000001ed000010fa001101000244440000444480000c44500020006020010030fa000001ed000010fa001101000311140000511180000911100020006020010030fa000001ed000010fa001101000244440000444480000c44500020006020010030fa000001ed000010fa001101000311140000511180000911100020006020010030fa000001ed000010fa001101000244440000444480000c44500020006020010030fa000001ed000010fa001101000311140000511180000911100020006020010030fa000002ed000008fa001101000244440000444480000c44500020006020010030fa000002ed000008fa001101000311140000511180000911100020006020010030fa000002ed000008fa001101000244440000444480000c44500020006020010030fa000002ed000008fa001101000311140000511180000911100020006020010030fa000002ed000008fa001101000244440000444480000c44500020006020010030fa000002ed000008fa001101000311140000511180000911100020006020010030fa000002ed000008fa001101000244440000444480000c44500020006020010030fa000002ed000008fa001101000311140000511180000911100020006020010030fa000002ed000008fa001101000244440000444480000c44500020006020010030fa000002ed000008fa001101000311140000511180000911100020006020010030fa000002ed000008fa001101000244440000444480000c44500020006020010030fa000002ed000008fa001101000311140000511180000911100020006020010030fa000002ed000008fa001101000244440000444480000c44500020006020010030fa000002ed000008fa001101000311140000511180000911100020006020010030fa000002ed000008fa001101000244440000444480000c44500020006020010030fa000001ed000010fa001101000311140000511180000911100020006020010070fa000001ed000010fa001101000244440000444480000c445000200060200100f0fa000001ed000010fa0011010003111400005111800009111000200060200101f0fa000001ed000010fa001101000244440000444480000c445000200060200107f0fa000001ed000010fa0011010003111400005111800009111000200060200107f0fa000001ed000010fa001101000244440000444480000c445000200060200107f0fa000001ed000010fa0011010003111400005111800009111000200060200107f0f9000080ee000020fa001101000244440000444480000c445000200060200107f0f9000080ee000020fa0011010003111400005111800009111000200060200107f0f9000080ee000020fa001101000244440000444480000c445000200060200107f0f9000080ee000020fa0011010003111400005111800009111000200060200107f0f9000040ee000040fa001101000244440000444480000c445000200060200107f0f9000040ee000040fa0011010003111400005111800009111000200060200107f0f9000040ee000040fa001101000244440000444480000c445000200060200107f0f9000040ee000040fa0011010003111400005111800009111000200060200107f0f9000020ee000080fa001101000244440000444480000c445000200060200107f0f9000020ee000080fa0011010003111400005111800009111000200060200107f0f9000020ee000080fa001101000244440000444480000c445000200060200107f0f9000010ef000001f90011010003111400005111800009111000200060200107f0f9000010ef000001f9001101000244440000444480000c445000200060200107f0f9000010ef000001f90011010003111400005111800009111000200060200107f0f9000008ef000002f9001101000244440000444480000c445000200060200107f0f9000008ef000002f90011010003111400005111800009111000200060200107f0f9000008ef000002f9001101000244440000444480000c445000200060200107f0f9000004ef000004f90011010003111400005111800009111000200060200107f0f9000004ef000004f9001101000244440000444480000c445000200060200107f0f9000002ef000008f90011010003111400005111800009111000200060200107f0f9000002ef000008f9001101000244440000444480000c445000200060200107f0f9000001ef000010f90011010003111400005111800009111000200060200107f0f9000001ef000010f9001101000244440000444480000c445000200060200107f0f8000080f0000020f90011010003111400005111800009111000200060200107f0f8000080f0000020f9001101000244440000444480000c445000200060200107f0f8000040f0000040f90011010003111400005111800009111000200060200107f0f8000040f0000040f9001101000244440000444480000c445000200060200107f0f8000020f0000080f90011010003111400005111800009111000200060200107f0f8000010f1000001f8001101000244440000444480000c445000200060200107f0f8000010f1000001f80011010003111400005111800009111000200060200107b0f8000008f1000002f8001101000244440000444480000c44500020006020010630f8000008f1000002f8001101000311140000511180000911100020006020010430f8000004f1000004f8001101000244440000444480000c44500020006020010030f8000002f1000008f8001101000311140000511180000911100020006020010030f8000001f1000010f8001101000244440000444480000c44500020006020010030f8000001f1000010f8001101000311140000511180000911100020006020010030f7000080f2000020f8001101000244440000444480000c44500020006020010030f7000040f2000040f8001101000311140000511180000911100020006020010030f7000020f2000080f8001101000244440000444480000c44500020006020010030f7000010f3000001f7001101000311140000511180000911100020006020010030f7000008f3000002f70011010003fffc00007fff80000ffff00020006020010030f7000004f3000004f7001101000200040000400080000800100020006020010030f7000002f3000008f7001101000200040000400080000800100020006020010030f7000001f3000010f700110100021f84000043f08000087e100020006020010030f6000080f4000020f7001101000210840000421080000842100020006020010030f6000040f4000040f7001101000210840000421080000842100020006020010030f6000020f4000080f7001101000210840000421080000842100020006020010030f6000010f5000001f60011010002f0f400005e1e80000bc3d00020006020010030f6000008f5000002f6001101000240240000480480000900900020006020010030f6000004f5000004f6001101000220440000440880000881100020006020010030f6000002f5000008f6001101000210840000421080000842100020006020010030f6000001f5000010f6001101000209040000412080000824100020006020010030f50000c0f6000060f600110100020604000040c080000818100020006020010030f5000020f6000080f6001101000200040000400080000800100020006020010030f5000018f7000003f5001101000200040000400080000800100020006020010030f5000004f7000004f50011010003fffc00007fff80000ffff00020006015010030f5000003f7000018f5000001f3000220006015010030f40000c0f8000060f5000001f3000220006015010070f4000020f8000080f5000001f30002200060150100f0f400001cf9000007f4000001f30002200060200101f0f4000002f9000008f4000a01003fffffc007fffff800feff0300200060210107f0f4000101c0fa000070f40011010020000040040000080080000100200060210107f0f3000038fb00010380f40011010020000040040000080080000100200060200107f0f3000006fb00000cf30011010020040040040080080080100100200060210107f0f3000101c0fc000070f300110100200c0040040180080080300100200060210107f0f200003cfd00010780f30011010020040040040080080080100100200060210107f0f2000103e0fe0000f8f200110100200400400400800800801001002000601f0107f0f100031fc0007ff100110100200400400400800800801001002000601e0107f0f000023fff80f10011010020040040040080080080100100200060180107f0dd0011010020040040040080080080100100200060180107f0dd0011010020000040040000080080000100200060180107f0dd0011010020000040040000080080000100200060180107f0dd0011010020000040040000080080000100200060180107f0dd0011010020000040040000080080000100200060180107f0dd0011010020000040040000080080000100200060180107f0dd000a01003fffffc007fffff800feff03002000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600d0107f0dd000001f300022000600a0007dbfff30002200060060007cbff00e0090107e0ce0002200060090107e0ce0002200060090107e0ce000227f060090107a0ce000224106009010620ce0002241f6009010420ce000224116009010020ce000224116009010020ce000224116009010020ce000227f16009010020ce000221016009010020ce000221016009010020ce000221016009010020ce000221ff6009010020ce00022000600701003fccff00e00701001fccff00e01d0300000382fd000608020200020008fd000040f80004228a280c30eb001f130000078207ac79c79c03c21c724010f22b1e7022f80004028a2f1450eb00ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-17\par \pard\plain \s3\qj\sb160 \f20 This window has a pane in which the graphics are drawn\emdash clearly this will be a view.  There are also the three scroll bars and the digital displays beneath each one.  The scroll bars will be views, and the digital displays will also be views.\par \pard\plain \s254\sb240\keepn \b\f21 Positioning views \par \pard\plain \s3\qj\sb160 \f20 So far so good.  Now we also need to look at how these views will be positioned.  Clearly the digital display which belongs to each of the scroll bars should stay with its scroll bar, even if we reorganize things so the scroll bars go somewhere else in the window.  The simplest way to do this is to create some more views.  If both a scroll bar and its digital display are child views of one parent, it becomes easy to move them together.  So what we do in the Demo program, is to define three "indicator" views, where each indicator has a scroll bar and a digital display as its children.\par \pard \s3\qj\sb160 There is one more view, and this is the contView for the window\emdash the view which covers the whole of the window's area.\par \pard \s3\qj\sb160 Thus we have 11 views in all.  The contView is at the top level.  Then the graphic pane and the three indicators are at the next level\emdash these are the children of the contView.  Then each of the three indicators has two children\emdash a scroll bar and a digital display.\par \pard \s3\qj\sb160 The position and size of a view is defined in terms of its bounding rectangle, its viewRect.  However in a program you won't normally set the viewRect directly (although you can if you have to).  Normally you will specify the four sides of this rectangle relative to the view's parent or siblings, with a range of options, which can be independently set for the four sides.\par The measurement option for each side is called its "justification", and the corresponding number the "bound".  There are four justification values and four bounds for each view.  If a parent view moves or is resized, normally its child views are also moved/resized according to their bounds and justifications.\par \pard \s3\qj\sb160 Again, this scheme will be familiar to Newton programmers.  So will most of the justification options we provide, although we do have a few extras.  One such extra is that we have four justi\-fication values for each view, one for each side, instead of just two (for horizontal and vertical)\emdash this reflects the fact that views are more likely to be resized while a program is running, on a Mac than on a Newton.\par \pard \s3\qj\sb160 Here are the possible justification values (defined as constants):\par \pard\plain \f20 \par \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx3160\clshdng0\cellx9280\pard \intbl {\b Name\cell }\pard \intbl {\b Meaning\cell }\pard \intbl {\b Description\cell }\pard \intbl {\b \row }\trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx3160\clshdng0\cellx9280\pard \intbl \cell \pard \intbl \cell \pard \intbl \cell \pard \intbl \row \pard \intbl parLeft\cell \pard \intbl parent left\cell \pard \intbl the bound is measured from the left edge of the parent.\cell \pard \intbl \row \pard \intbl parRight\cell \pard \intbl parent right\cell \pard \intbl the bound is measured from the right edge of the parent.\cell \pard \intbl \row \pard \intbl parCenter\cell \pard \intbl parent center\cell \pard \intbl the bound is measured from the center of the parent.\cell \pard \intbl \row \pard \intbl parProp\cell \pard \intbl parent proportional\cell \pard \intbl the "bound" is a value out of 10000, expressing a proportional distance across the width of the parent.\cell \pard \intbl \row \pard \intbl parTop\cell \pard \intbl parent top\cell \pard \intbl the bound is measured from the top of the parent.\cell \pard \intbl \row \pard \intbl parBottom\cell \pard \intbl parent bottom\cell \pard \intbl the bound is measured from the bottom of the parent.\cell \pard \intbl \row \pard \intbl \cell \pard \intbl \cell \pard \intbl (Note that parCenter and parProp can also be used in the vertical direction, with the obvious meanings)\cell \pard \intbl \row \pard \intbl \cell \pard \intbl \cell \pard \intbl \cell \pard \intbl \row \pard \intbl sibLeft\cell \pard \intbl sibling left\cell \pard \intbl the bound is measured from the left of the previous sibling.\cell \pard \intbl \row \pard \intbl sibRight\cell \pard \intbl sibling right\cell \pard \intbl the bound is measured from the right of the previous sibling.\cell \pard \intbl \row \pard \intbl sibTop\cell \pard \intbl sibling top\cell \pard \intbl the bound is measured from the top of the previous sibling.\cell \pard \intbl \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx3160\clshdng0\cellx9280\pard \intbl sibBottom\cell \pard \intbl sibling bottom\cell \pard \intbl the bound is measured from the bottom of the previous sibling.\cell \pard \intbl \row \pard\plain \s3\qj\sb160 \f20 The default values are parLeft and parTop, which simply means that the child view's bounds are relative to the top left corner of its parent.\par \pard \s3\qj\sb160 This scheme may look complicated, but is really quite easy to use.  In most situations the bounds and justification values can be set up for a view at compile time (via the setJust: and setBounds: messages), and your program won't need to take any other action\emdash the view will keep moving itself automatically to the right position whenever the parent view moves.\par \pard \s3\qj\sb160 Let's look at how we've set up these quantities for the views in our grDemo application.  Look at the CLASSINIT: method in class Indicator:\par \pard\plain \s13\keepn \f22\fs20 :m CLASSINIT:\par \tab parCenter\tab parTop\tab parCenter\tab parBottom\tab setJust: theVscroll\par \tab -8\tab \tab 0\tab \tab 8\tab \tab -20\tab \tab setBounds: theVscroll\par \tab parCenter\tab parBottom\tab parCenter\tab parBottom\tab setJust: theReadout\par \tab -12\tab \tab -16\tab \tab 12 \tab \tab 0  \tab \tab setBounds: theReadout\par \tab classinit: super\par \pard \s13 ;m\par \pard\plain \s3\qj\sb160 \f20 Here we position the child views of the Indicator, namely the vertical scroll bar theVscroll, and the box with the digital display, theReadout.\par Note that both setJust: and setBounds: methods take four parameters, which are in the usual order left, top, right, bottom.\par \pard \s3\qj\sb160 In the horizontal direction, we want both the child views centered within the Indicator (theReadout will be directly underneath theVscroll).  The width of a scroll bar is always 16 pixels, so we set the left and right justification to parCenter, and its horizontal bounds to (-8, 8).  Our readout box is going to be 24 pixels wide, so again we set the left and right justification to parCenter, this time with the horizontal bounds (-12, 12).\par \pard \s3\qj\sb160 In the vertical direction, we want the top of the scroll bar to coincide with the top of the Indicator, and the bottom to be a fixed 20 pixels above the bottom of the Indicator, to allow room for the readout box.  So we set the top justification to parTop and the top bound to 0, and the bot\-tom justification to parBottom with the bound -20.  The readout box will have a fixed height of 16 pixels and always be right at the bottom of the Indicator, so we set both top and bottom justi\-fication to parBottom, with the bounds (-16, 0).\par \pard \s3\qj\sb160 If you try resizing the demo window, you'll see the results of these settings.  The vertical scroll bars will stretch or shrink according to the height of the window, while the readout boxes will remain at the same size.\par \pard \s3\qj\sb160 We should mention why we put the setting of these values into the CLASSINIT: method of Indicator.  It is primarily because theVscroll and theReadout are ivars of Indicator.  This strategy makes it easy for us to have more than one Indicator.  At the moment we have three, but it would be very easy to have more.\par \pard \s3\qj\sb160 In the case of the graphic display view, dPane, the three indicators themselves,  and the contView of the window, dView, we simply declare them in the dictionary.  We certainly could have made them ivars of the grWind class, since they really belong to the grWind object.  This would have been advantageous if we had a number of grWind objects instead of just one.  However if we had done things this way, the grWind class would need methods so that the views could be accessed from outside the grWind class.  In our  example here, since we have just one grWind object, it is a bit easier to declare the views as normal objects in the dictionary.\par \pard \s3\qj\sb160 This is an example of the kind of tradeoff that will frequently occur in designing a program.  In Mops, however, you will find that it is not very difficult to change your design in various ways even after much of the program is written.  This is one of the benefits of object-oriented programming.\par \pard \s3\qj\sb160 Since we declared these views in the dictionary, we don't need to set them up in grWind's CLASSINIT: method, and can simply set them up directly at compile time.  If you look at the lines where we do this, you should be able to work out how we these views are positioned.  We also give some alternative code, commented out.  If you use these lines instead, the Indicators will be evenly spaced along the bottom of the window, instead of at the right hand side.  Note how we use the parProp justification to achieve the even spacing.\par \pard\plain \s254\sb240\keepn \b\f21 Drawing views\emdash the DRAW: method \par \pard\plain \s3\qj\sb160 \f20 {\fs0 When a view is to be drawn on the screen, it will receive a DRAW: message.  The default behav\-ior is to execute the draw handler, which is an X-addr (execution address), which can be set to execute any word.  There are a number of other housekeeping actions to be done as well, which Mops does automatically.  When any view has its DRAW: method called:\par }\pard \s3\qj\sb160 {\fs0 (1) T}he screen coordinates will have been set so that the top left corner of the view is at (0,0).  In Mac terminology, this is called setting the {\ul origin} to be relative to the view.\par \pard \s3\qj\sb160 (2) The {\ul clip region} will have been set to coincide with the view.  Thus you can draw outside the view, but anything outside will not appear on the screen.  This can simplify things considerably, since you can draw in a view without having to worry about its exact size at that time (and of course its size might change while the program is running).\par (3) Mops has a Rect object, tempRect, which is used for a number of things.  When DRAW: is called on a view, tempRect will have been set to coincide with the boundary of the view.  This can be very handy.  We use this feature in the demo to draw a frame around the graphic, and to draw the readout boxes.\par {\fs0 The other thing that DRAW: does is to DRAW: on all the child views.  This way, when a win\-dow has to be drawn, all we have to do is ensure that the contView gets a DRAW: message.  This will ensure that all views get a DRAW:, and if everything has been properly set up, the window will be fully drawn.\par }\pard \s3\qj\sb160 {\fs0 Your code to draw a view can be placed in the draw handler, or you can subclass View and put the code directly in the DRAW: method of the subclass.  This is probably easier, in general, and is what we do in the Readout views.\par }\pard \s3\qj\sb160 Look at the DRAW: method for class Readout now.  Note how we exploit the fact that tempRect is set to the view's boundary, in local coordinates (which are in effect at this point).  Here we erase the previous number that was being displayed and draw the box around the view.  Next, the "cursor" where the digits are to be placed is positioned three pixels across and 10 pixels down from the top left corner of the rectangle.\par Now  the new digits are printed in a field of 3 digits.  First we set the set the textmode to 1, the textsize to 9, and the textfont to number 1.  Textmode determines how the pen that draws the numbers on the screen will react to the color of the screen below it.  With the mode set to 1, the pen draws black on the white background.  The textsize number is the actual font size, like the sizes you select in the MacWrite Font menu.  The textsize setting of 9 calls for 9-point type.\par \pard \s3\qj\sb160 The textfont number requires a little more explanation.  In the Mac Toolbox, fonts are assigned ID num\-bers.  Some commonly used ones are as follows:\par \pard\plain \tx5400\tqdec\tx6300 \f20 \par \trowd \trgaph80\trleft-80 \clbrdrt\brdrhair \clbrdrl\brdrhair \clshdng0\cellx2800\clbrdrt\brdrhair \clshdng0\cellx3520\clbrdrt\brdrhair \clbrdrr\brdrhair \clshdng0\cellx4240\pard \intbl SystemFont (Chicago)\cell \pard \intbl =\cell 0\cell \pard \intbl \row \trowd \trgaph80\trleft-80 \clbrdrl\brdrhair \clshdng0\cellx2800\clshdng0\cellx3520\clbrdrr\brdrhair \clshdng0\cellx4240\pard \intbl ApplicationFont (Geneva)\cell \pard \intbl =\cell 1\cell \pard \intbl \row \pard \intbl New York\cell \pard \intbl =\cell 2\cell \pard \intbl \row \pard \intbl Geneva\cell \pard \intbl =\cell 3\cell \pard \intbl \row \pard \intbl Monaco\cell \pard \intbl =\cell 4\cell \pard \intbl \row \trowd \trgaph80\trleft-80 \clbrdrl\brdrhair \clbrdrb\brdrhair \clshdng0\cellx2800\clbrdrb\brdrhair \clshdng0\cellx3520\clbrdrb\brdrhair \clbrdrr\brdrhair \clshdng0\cellx4240\pard \intbl Times\cell \pard \intbl =\cell 20\cell \pard \intbl \row \pard\plain \s3\qj\sb160 \f20 While in this list the application font is the same as Geneva, which is the default, in some pro\-grams, a special application font is inserted in its place.  Since we have not done this, our appli\-cation font will be Geneva.  For the digits in the readout box in grDemo, then, the Geneva font was selected.\par \pard \s3\qj\sb160 Now look at the DRAW: method for class Indicator.  It gets the current value from the vertical scroll bar, then sends that to the Readout view via Readout's PUT: method.  Finally it calls (DRAW): super which does whatever its superclass needs to do for drawing.  As we'll see later, we don't use DRAW: super here, because of the other automatic actions such as setting the clip which are done by DRAW:.  These actions have already been done for this view, and don't need to be done again.  And note that one of the things that we don't need to do again is to call DRAW: on the Readout view, since the Readout is a child view, and it will get a DRAW: automatically.\par \pard \s3\qj\sb160 The three scroll bars are objects of class VScroll, which is a subclass of Control, which is a sub\-class of View.  Mac controls are drawn by the system.  We handle this simply by defining DRAW: for class Control to make the appropriate system call.{\fs0   You won't normally need to make any changes to this behavior.\par }The NEW: method in class Indicator is called at run time, when the window containing the view is opened.  Here we need to set up which are the child views of this view.  This is done with the ADDVIEW: method.  We can't do this at compile time, since we have to pass in the address of the child view we're adding, and this might be different in different Mops runs.\par \pard \s3\qj\sb160 {\fs0 Finally, notice that the graphics drawing view, dPane, is an instance of a one-off View subclass, Pane.  For Pane, we don't write a DRAW: method.  This is because DRAW: for the superclass, View, already does exactly what we want.  For dPane, we need to change the drawing behavior while the program is running, as the user selects different options from the menu.  So in this case it is better to set a draw handler when a menu choice is made, via the SETDRAW: method (This is a good example of a situation where the use of a draw handler is appropriate.)  The draw han\-dler is called as part of the action of DRAW: for class View, so we don't need to modify this at all in class Pane.\par }\pard \s3\qj\sb160 {\fs0 In fact, Pane only has one method overriding what the superclass View does, and that is the MOVED: method.  MOVED: is called when the bounds or justification has changed, or when the parent view has moved, as any of these occurrences will require the view's position and size to be recalculated.  MOVED: in class View does this recalculation and resets the view's viewRect appropriately.\par }\pard \s3\qj\sb160 {\fs0 Often when a view moves it will need to erase its old position, and this is the case with our draw\-ing pane.  Therefore our MOVED: method just clears itself (it is still at the old position at this time), then calls moved: super to do the actual moving.\par }\pard\plain \s15\qc\sb720 \f20 {\fs0 End of lesson 18\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 19\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 19\par \pard\plain \s254\sb240\keepn \b\f21 Windows\par \pard\plain \s3\qj\sb160 \f20 Let's now return to the listing for grDemo.  After we set the bounds and justifications for the dPane and the three Indicators, we declare dView, which is to be the contView of our window.  This can be a plain View, since it doesn't need to have any other special properties.\par \pard \s3\qj\sb160 Five values are created next.  The first pair are the coordinate point on the Mac screen of the top left cor\-ner of the window that the program will occupy: coordinates 40,60.  The next two are the coordinates for the right bottom corner of the program window.  These values will be suitable for the small Mac screen (on e.g. a Classic), but should look all right on any Mac screen. These fig\-ures will be recalled later when it comes time to create the window for the program.  \par \pard \s3\qj\sb160 Next we come to a class that defines a special kind of window: one that has controls in it and has an area where graphics will be drawn.  \par The Macintosh Toolbox contains six predefined windows, each with a unique {\ul window} {\ul definition} {\ul ID} num\-ber.  The six windows, their names, and their IDs are illustrated in Figure\~I-19.\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw457\pich303 1fff00000000012f01c91101a10064000c574f524400000000012f01c901000a00000000012f01c998003a00000000012e01c800000000012e01c800000000012e01c8000002c70002c70002c7000f01003ff2ff02fe0007f1ff00e0ec000f010020f20002020004f1000020ec000f010020f20002020004f1000020ec0011010020f200030200047ff3ff01fe20ec001c06002fdffc7ffff8fd000003feff05effefe00047ff3ff01fe20ec001b0300201004fe00020fd8c6fc0005082202000460f300010620ec001d0b002fd0047ffff80300c60003feff05e822fe000460f300010620ec001c0300201004fe00030319e63cfd0005082202000460f300010620ec001d0b002fd0047ffff80318c66603feff05e822fe000460f300010620ec001c0300201004fe00030318c666fd0005082202000460f300010620ec001d0b002fd0047ffff80318c67e03feff05efe2fe000460f300010620ec001c0300201004fe00030318c660fd0005080202000460f300010620ec001d0b002fd0047ffff80318c66203feff05e802fe000460f300010620ec001c0300201004fe00030318663cfd0005080202000460f300010620ec001c06002fdffc7ffff8fd000003feff05effefe000460f300010620ec0011010020f2000302000460f300010620ec0015010020f2000302000460f300030620003ff1fffe0017010020f2000302000460f3000306200020f2000001fe001701003ff2ff03fe000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0023010020f3000980020004600004180002fe0002f0400cfe000306200020f2000001fe0023010020f3000980020004600004080002fe0002880004fe000306200020f2000001fe002e010020fe00070784000008000080fe00168002000460000a08717700e2e084c38438780006200020f2000001fe002e010020fe00070844000008000080fe000d8002000460000a08898201130084fe4405880006200020f2000001fe002e010020fe0007080e1c5878e2e780fe0016800200046000110889020112008443c444880006200020f2000001fe002e010020fe00070804226489130880fe000d8002000460001108f90201120084fe4405880006200020f2000001fe002e010020fe000707841e4488f20880fe000d8002000460003f88810201120084fe4405880006200020f2000001fe002d010020fd000644224489120880fe000d8002000460002088890201120088fe4405880006200020f2000001fe002d010020fd000644224489120880fe00168002000460002088710180e200f043c438780006200020f2000001fe0025010020fe00070844224489120880fe00048002000460f50005080006200020f2000001fe0025010020fe000707831e4478f20780fe00048002000460f50005880006200020f2000001fe001a010020f300048002000460f50005700006200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0026010020f300048002000460fc000107c0fa000306200020fd0005f8c004000f80fc000001fe0026010020f300048002000460fc00010420fa000306200020fd0005844000000840fc000001fe0031010020fe000078fb000080fe00048002000460fc000304238880fc000306200020fd000684438c58084711fd000001fe0031010020fe000044fb000080fe00048002000460fc000307c44880fc000306200020fd0006844444640f8891fd000001fe0033010020fe000742387112cc38b1c0fe00048002000460fc0002042445fb000306200020fd0006f843c44408488afd000001fe0033010020fe0007424489133244c880fe00048002000460fc0002042442fb000306200020fd000080fe4402084884fd000001fe0033010020fe00074244811222448880fe00048002000460fc0002042445fb000306200020fd000080fe440208488afd000001fe0034010020fe000742448112227c8880fe00048002000460fc000304244880fc000306200020fd000080fe4402084891fd000001fe0034010020fe00074244811222408880fe00048002000460fc000307c38880fc000306200020fd00068043c4440f8711fd000001fe0023010020fe00074444893222448880fe00048002000460f3000306200020f2000001fe0023010020fe0007783870d222388860fe00048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0028010020f300048002000460fd0004011e000004fc000306200020fc000408f0000070fc000001fe0028010020f300048002000460fd0004011100000cfc000306200020fc00040888000088fc000001fe0030010020fe00040101100020fb00048002000460fd00040110800004fc000306200020fc00040884000108fc000001fe0030010020fe00040101000020fb00048002000460fd00040110800004fc000306200020fc00040884000008fc000001fe0032010020fe000601113161e38888fd00048002000460fd0004011081f004fc000306200020fc000408840f8010fc000001fe0031010020fd0005921192244888fd00048002000460fd00040110800004fc000306200020fc00040884000020fc000001fe0031010020fd0005aa1112244550fd00048002000460fd00040110800004fc000306200020fc00040884000040fc000001fe0031010020fd0005aa1112244550fd00048002000460fd0004011101f004fc000306200020fc000408880f8080fc000001fe0031010020fd0005441112244220fd00048002000460fd0004011e000004fc000306200020fc000408f00001f8fc000001fe0021010020fd0005441112244220fd00048002000460f3000306200020f2000001fe0021010020fd0005441111e38220fd00048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0020010020fd00040478000030fc00048002000460f3000306200020f2000001fe0020010020fd00040444000048fc00048002000460f3000306200020f2000001fe0020010020fd00040442000084fc00048002000460f3000306200020f2000001fe0020010020fd00040442000084fc00048002000460f3000306200020f2000001fe0020010020fd0004044207c084fc00048002000460f3000306200020f2000001fe0020010020fd00040442000084fc00048002000460f3000306200020f2000001fe0020010020fd00040442000084fc00048002000460f3000306200020f2000001fe0020010020fd0004044407c048fc00048002000460f3000306200020f2000001fe0020010020fd00040478000030fc00048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe001c02002008f5000680800200046002f500048006200020f2000001fe002b0300201041fc000e400020220004408002000460041040fd000a1300202200044006200020f2000001fe002b0300201063fc000e4000202000044080020004600418c0fd000a1100202000044006200020f2000001fe002e26002020551c78700003c70e22262c3c2080020004600815471e1c0000f10f22262c3c2006200020f2000001fe002e26002020492244880004489112423244208002000460081248912200011111124232442006200020f2000001fe002e26002020412244803e0448901542224420800200046008104891200f811111154222442006200020f2000001fe002e26002020412244700004489015422244208002000460081048911c00011111154222442006200020f2000001fe002e26002020412244080004489008822244208002000460081048910200011111088222442006200020f2000001fe002e26002010412244883e0448910882224440800200046004104891220f811111088222444006200020f2000001fe002e26002010411c78700003c70e0882223c4080020004600410471e1c0000f10f0882223c4006200020f2000001fe002605002008000040f8000980800200046002000010fd000001fd00048006200020f2000001fe0024010020fe000040f700048002000460fe000010fd000011fc000306200020f2000001fe001c010020f300048002000460f900000efc000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe001701003ff2ff03fe000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300048002000460f3000306200020f2000001fe0018010020f300049fc2000460f3000306200020f2000001fe0018010020f300049042000460f3000306200020f2000001fe0018010020f30004907e000460f3000306200020f2000001fe0018010020f300049046000460f3000306200020f2000001fe0018010020f300049046000460f3000306200020f2000001fe0018010020f300049046000460f3000306200020f2000001fe0018010020f300049fc6000460f3000306200020f2000001fe0018010020f300048406000460f3000306200020f2000001fe0018010020f30004840600047ff3ff03fe200020f2000001fe0018010020f30004840600047ff3ff03fe200020f2000001fe0016010020f3000387fe0004f10002200020f2000001fe0016010020f3000380020004f10002200020f2000001fe001301003ff2ff02fe0007f1ff02e0003ff1fffe0002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70002c70004c80000ff02c70002c70002c70002c70002c70002c70002c70011ee000001f1ff03f000007ff3ff00f0fe0011ee000001f10002100001f2ff03fc0000ff10ee000001f10002100003f2ff00fefe000eee000001f10002100007f1fffe001aee0006017effe3ffffc0fd00001ffcff04f00007f800f3fffe0021ee000301008020fe00027ec630fa000410000ffbfefdff02f02739faff0080ff0023ee000b017e8023ffffc0180630001ffcff04f0000ffbfefdff02fcff39faff0080ff0023ee000301008020fe000318cf31e0fb000410000ffbfefdff03fce619c3fbff0080ff0024ee000b017e8023ffffc018c633301ffcff04f0000ffbfefdff03fce73999fbff0080ff0023ee000301008020fe000318c63330fb000410000ffbfefdff03fce73999fbff0080ff0024ee000b017e8023ffffc018c633f01ffcff04f0000ffbfefdff03fce73981fbff0080ff0022ee000301008020fe000218c633fa000410000ffbfefdff03fce7399ffbff0080ff0024ee000b017e8023ffffc018c633101ffcff04f0000ffbfefdff03fce7399dfbff0080ff0023ee000301008020fe000318c331e0fb000410000ffbfefdff03fce799c3fbff0080ff001cee0006017effe3ffffc0fd00001ffcff04f0000ff800f3ff0080ff0010ee000001f1000210000ff1ff0080ff0010ee000001f1000210000ff1ff0080ff001501003ff2ff02fe0001f1000210000ff1ff0080ff0015010020f20002020001f1ff02f0000ff1ff0080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0028010020fd00057c60020007c0fc0002030001f1000c1000080007c0000002000801e0fb000080ff0028010020fd0005422000000420fc0002030001f1000c10000800042000000200080210fb000080ff002d010020fd00074221c62c04238880fe0002030001f1001310000800042388961e38780201c5d61c5c000080ff002d010020fd00074222223207c44880fe0002030001f100131000080004244899224488020226192260000080ff002c010020fd00067c21e222042445fd0002030001f100131000080007c44891224489f20224112240000080ff002c010020fd000040fe2202042442fd0002030001f100131000080005044891227c88020224113e40000080ff002c010020fd000040fe2202042445fd0002030001f100131000080004844891224088020224112040000080ff0037010020fd000040fe220304244880fe0004030001001efb00042010110002fe00131000080004444991224488021224112240000080ff0037010020fd00074021e22207c38880fe00040300010011fb00042010100002fe001310000800042386911e387801e1c4111c40000080ff0022010020f2001503000100108e1c44b30e2c701113161e388880100008f1000080ff0022010020f200150300010010912244cc91322009211922448880100008f1000080ff0022010020f200150300010010912044889122200aa11122445500100008f1000080ff0022010020f200150300010010912044889f22200aa11122445500100008f1000080ff0022010020f2001503000100109120448890222004411122442200100008f1000080ff0022010020f20015030001001111224c8891222004411122442200100008f1000080ff0022010020f20015030001001e0e1c34888e22180441111e382200100008f1000080ff0027010020fd0006210800f1000040fd0002030001f10002100008fd00040202200040fa000080ff0027010020fd000601080109000040fd0002030001f10002100008fd00040202000040fa000080ff002b13002000000222638b010161c3c711100000030001f10002100008fd0006022262c3c71110fc000080ff002b13002000000222210c810192244891100000030001f10002100008fd000601242324489110fc000080ff002b13002000000154210880f111e4488aa00000030001f10002100008fd000601542224488aa0fc000080ff002b13002000000154210880091224488aa00000030001f10002100008fd000601542224488aa0fc000080ff002a010020fe000e882108800912244884400000030001f10002100008fc0005882224488440fc000080ff0033010020fe000e882108810912244884400000030001fc000020fc000140c0fe0002100008fc0005882224488440fc000080ff0033010020fe000e8820c880f111e3c704400000030001fc000020fc00014040fe0002100008fc0005882223c70440fc000080ff0022010020f20002030001fe000f161c700f2e71111c7843800000100008f1000080ff0022010020f20002030001fe000f19222011308911224444400000100008f1000080ff0022010020f20002030001fe000f112220112088aa1e4444400000100008f1000080ff0022010020f20002030001fe000f112220112088aa224447c00000100008f1000080ff0022010020f20002030001fe000911222011208844224444fe0002100008f1000080ff0022010020f20002030001fe000f11222011208844224444400000100008f1000080ff0022010020f20002030001fe000f111c180f2070441e7843800000100008f1000080ff002a010020fc000404780000fcfc0002030001fb000001f80002100008fc0005478000010380fc000080ff0029010020fc00040444000008fc0002030001fb000011f80002100008fc00044440000304fb000080ff0029010020fc00040442000010fc0002030001fb00000ef80002100008fc00044420000108fb000080ff0026010020fc00040442000030fc0002030001f10002100008fc0005442000010f80fc000080ff0026010020fc0004044207c008fc0002030001f10002100008fc000544207c010840fc000080ff0026010020fc00040442000004fc0002030001f10002100008fc0005442000010840fc000080ff0026010020fc00040442000004fc0002030001f10002100008fc0005442000010840fc000080ff002e010020fc0004044407c088fc0002030001fb000423c0000020fc0002100008fc000544407c010840fc00028000ff2e010020fc00040478000070fc0002030001fb00042220000060fc0002100008fc0005478000010780fc000080ff001d010020f20002030001fb000422100000a0fc0002100008f1000080ff001d010020f20002030001fb00042210000120fc0002100008f1000080ff001d010020f20002030001fb000422103e0220fc0002100008f1000080ff001d010020f20002030001fb00042210000420fc0002100008f1000080ff001d010020f20002030001fb000422100007f0fc0002100008f1000080ff001d010020f20002030001fb000422203e0020fc0002100008f1000080ff0022010020f20002030001fb000423c0000020fc00041000080010f6000302000080ff001f010020f20002030001f10005100008002082fb00070480880011000080ff001f010020f20002030001f100051000080020c6fb00070480800011000080ff0022010020f20002030001f100131000080040aa38f0e0000bac3c8898b0f0800080ff0022010020f20002030001f10013100008004092448910000c32444908c910800080ff0022010020f20002030001f100131000080040824489007c08224455088910800080ff0022010020f20002030001f100131000080040824488e00008224455088910800080ff0022010020f20002030001f100131000080040824488100008224422088910800080ff0022010020f20002030001f100131000080020824489107c08224422088911000080ff0022010020f20002030001f1001310000800208238f0e00008223c220888f1000080ff001d010020f20002030001f100071000080010000080f9000302000080ff0019010020f20002030001f10002100008fd000080f6000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0015010020f20002030001f10002100008f1000080ff0016010020f20002030001f10002100008f200010180ff0015010020f20002030001f10002100004f2000001fe0015010020f20002030001f10002100002f2000002fe0015010020f20002030001f10002100001f2000004fe001501003ff1ff010001f1ff03f00000c0f3000018fe000f01000ff1ffec00003ff3ff00e0fe0002c70002c70002c70002c70002c70002c70002c700ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-18\par \pard\plain \s3\qj\sb160 \f20 Whenever you define a new window, choose one of the window types by number.  Mops has established three constants\emdash docWind, dlgWind, and rndWind\emdash that you can substitute in place of the number, in case it's easier for you to remember names than numbers.  The Mops constant names are shown in Figure\~I-19.  This Mops demo graphics program uses docWind, since Apple's Human Interface Guidelines recommend we use this for a standard growable window.\par \pard \s3\qj\sb160 Even plain windows are relatively complex objects inside the Macintosh Toolbox.  To give you an idea of their complexity, look at the long list of instance variables in the predefined class, Window (in the file WindowMod.txt, in the folder "Module source").  Among the items you can control\emdash and sometimes must control\emdash in a window are:\par \pard\plain \f20 \bullet  the kind of window (from an inventory of six)\par \bullet  the rectangular area on the screen to enclose the window\par \bullet  whether a window is growable\par \bullet  the area on the screen within which a window can grow\par \bullet  whether a window is draggable\par \bullet  the area on the screen within which a window can be dragged\par \bullet  how it is to respond to key-down and mouse-down events\par \pard\plain \s254\sb240\keepn \b\f21 The grWind class\par \pard\plain \s3\qj\sb160 \f20 class grWind, a subclass of Window+ (itself a subclass of Window) lays the framework for the window of this graphics demonstration.   As we have seen in the last lesson, all Window+ objects contain a view, the contView, which simply covers the whole area of the window.  The window knows which view is its contView, since this is specified when the NEW: message is sent to the window object to fire it up.  In our example, the contView of our grWind window is called dView.\par \pard \s3\qj\sb160 Giving the window enough parameters to present itself on the screen is simplified in this pro\-gram in the NEW: method, which is an extension of the NEW: method of class Window+.  The only param\-eters needed are the address and length of the title of the window.  The other pieces\emdash the address of the window's rectangular bounds, the type of window (rndWind), flags for being visible on the screen and having no close box, and the address of the contView\emdash are supplied within the method or as constants already defined.  Once all the items are on the stack in the proper order, the method calls the superclass' NEW: method.\par \pard \s3\qj\sb160 One of the actions performed by the NEW: method in class Window+ is to send NEW: to the contView.  This will cause NEW: to also be sent to every view in the window, since one of the actions of NEW: in class View is to send NEW: to all its child views.\par \pard \s3\qj\sb160 Once the window and all its views have been fired up, the views will draw themselves.  As we have seen, views draw themselves when they get a DRAW: message.  And what do we have to do to start this process off?  You may remember we mentioned this in the last lesson, but by now you might be able to guess it anyway.  The answer: we have to send DRAW: to the contView!\par \pard \s3\qj\sb160 On the Mac, drawing in a window normally takes place when a window is {\ul updated}.  Drag the grDemo window to the bottom of the screen so part of it runs off the screen.  Release the mouse button.  Now drag it back near the center of the screen.  For everything in the window to be visi\-ble again requires updating.  When the Mac system recognizes that a window has to be updated, it sends an "{\ul update event}" to the application which owns the window.  You don't need to worry about the details at this stage, but Mops catches this update event and sends a DRAW: message to the window.\par \pard \s3\qj\sb160 And this is how the contView gets the DRAW: message that will cause all the views to be drawn.  The DRAW: method in the Window+ class basically just sends DRAW: to the contView.  Easy!\par \pard\plain \s254\sb240\keepn \b\f21 dWind\par \pard\plain \s3\qj\sb160 \f20 Continuing with the grDemo listing, straight after our definition of the grWind class, we define our window, dWind, which is an object of the class grWind we just defined.\par \pard \s3\qj\sb160 A new definition, @DPARMS, gets things ready for the drawing of the graphics in the view dPane.  This definition is a shortcut that allows us to use one word to do work which is needed for each of the four following definitions.\par \pard \s3\qj\sb160 The first thing we have to do is erase whatever was in the view area before, and then we have to draw a rectangle as a border around the view,  Now remember that the graphic drawing will be done as a result of a DRAW: message being sent to dPane, and that at this time the rectangle tempRect will have been set to the border of the view.  This makes our job easy\emdash we simply write  clear: tempRect  draw: tempRect.\par \pard \s3\qj\sb160 The other task for @DPARMS is to fetch the current readings of each control.\par \pard \s3\qj\sb160 The words of the four following definitions should look familiar.  The definitions are extensions of the spiral, spin, lj, and dragon curves defined in Turtle.  Here, however, they have been modi\-fied to fetch three control pa\-rameters, place those numbers as ivars of the drawing device (the pen or poly, as the case may be), and draw the graphics accordingly.\par \pard \s3\qj\sb160 You will notice that instead of using : and ; in these definitions, we have used :a and ;a.  We did this because these words are action handlers\emdash their addresses will later be stored in a Menu ob\-ject, to define the actions that are to take place when the user makes a menu selection.  We will see in a later section when discussing modules, that action handlers in modules need to be de\-clared with :a and ;a.  This is not strictly necessary in the main dictionary, where we are now, but it does no harm either.  It is therefore a good idea to always use :a and ;a for action handlers, as it will make your programs clearer and also make it easier for you if you later move code into modules.\par \pard \s3\qj\sb160 Because each of the drawing types has a different range of parameters, the !ranges definition lets us set the maximum number for each control, depending on which graphics type we select from the menu.  The mini\-mum values are always one.  (We will discuss controls in more detail shortly.)\par \pard \s3\qj\sb160 In the next three lines of code, the text of the message that appears on the screen in response to the "About Curves" menu items is assigned to two string constants, AB1 and AB2.  Following that come three program lines that define what is to happen when that selection is made.  It selects the font Times in 14-point (Times has font number 20), positions the cursor at point 28,40, and "types" the two strings on the screen.  It then calls the word WaitClick, which will just wait for the user to click the mouse or type a key.  Then it sends an UPDATE: message to dWind to cause it to redraw itself, erasing the text we "typed".\par \pard \s3\qj\sb160 Next, both the pen Bic and the polygon Anna are told where the center point of the graphics rect\-angle is lo\-cated.  Importantly, the coordinates given are relative to the top left corner of the view dPane, since that is where the origin will be whenever dPane receives a DRAW: message. \par \pard\plain \s254\sb240\keepn \b\f21 Controls\par \pard\plain \s3\qj\sb160 \f20 In the Macintosh environment, a control is a screen object that responds to interaction from the mouse in such a way that the mouse causes either instant action or a change in function for a later operation.  A good example of the "instant action" kind of control is the elevator knob on the volume control in the Sound Control Panel.  By adjusting the knob with the mouse, you immedi\-ately adjust the volume of the sound played by the Mac through its speaker.  Likewise, when you click an "OK" button in a dialog box, you are working with a control for immediate action.  A "delayed action" control would be something like the check box inside a Get Info dialog window that locks or unlocks documents for dragging to the trash.  When you click the mouse pointer in an empty box, an "X" fills in the box, and the document is locked, but no particular action occurs in response.  Click the pointer again, and the X disappears, so you can go ahead and trash the document.\par \pard \s3\qj\sb160 In Mops, controls are View subclasses.  Thus, they are sized and positioned via the justification and bounds quantities we talked about in the last lesson, and they are drawn when they get a DRAW: message.  But as well as this, they have a number of interactions with the Mac system.\par \pard \s3\qj\sb160 A scroll bar is one of the most common kind of control.  It consists of five parts, each of which responds differently in the course of a program.  The five parts are:\par \pard\plain \s8\li720 \f22\fs20 Up arrow\par Page Up region\par Thumb\par Page Down region\par Down arrow\par \pard\plain \s3\qj\sb160 \f20 Each region is programmed to respond as needed.  \par \pard \s3\qj\sb160 Like many objects that the Macintosh Toolbox predefines, controls have specific identification numbers, called {\ul control} {\ul definition} {\ul IDs}, which tell the Mac what function the control is to play and how it is to look.  The four standard control types and their definitions IDs are:\par \pard\plain \s6\li720\tqr\tx4320\tqr\tx5040 \f20 simple button\tab =\tab 0\par check box\tab =\tab 1\par radio button\tab =\tab 2\par scroll bar\tab =\tab 16\par \pard\plain \s3\qj\sb160 \f20 All controls also need to specify actions based on their interaction with the mouse.  Scroll bars, with their five distinct parts, need separate actions specified for each part.  An action is nothing more than a set of in\-structions to follow when a control part is activated by the mouse.  In a Mops program, the actions, or rather the addresses of the action definitions, are stored as instance variables of a control object.  Moreover, each control part has a distinct ID number so the Toolbox knows to link a given action with a given mouse inter\-action.  The IDs for all Macintosh predefined controls are as follows:\par \pard\plain \s6\li720\tqr\tx4320\tqr\tx5040 \f20 simple button\tab =\tab 10\par check box or radio button\tab =\tab 11\par scroll bar Up arrow\tab =\tab 20\par scroll bar Down arrow\tab =\tab 21\par scroll bar Page Up region\tab =\tab 22\par scroll bar Page Down region\tab =\tab 23\par scroll bar Thumb\tab =\tab 129\par \pard\plain \s254\sb240\keepn \b\f21 GrDemo scroll bars\par \pard\plain \s3\qj\sb160 \f20 The scroll bars in grDemo inherit their instance variables from the superclasses View, and Control.  The list of available ivars includes an integer for the definition ID, an X-array for the addresses of a scroll bar's five possible actions, and an Ordered-col for the actions' corresponding part numbers.\par \pard \s3\qj\sb160 Whenever a VScroll object is created, its CLASSINIT: method automatically makes it a scroll bar by putting the control ID number 16 into its ID ivar.  The method also places null values in each of the object's actions.  When it receives a NEW: message, which all views do when they are to display themselves, it makes the appropriate call to the system to cause itself to appear.  It also makes this call whenever it gets a DRAW: message.  (The definition for the VScroll class is in the file Ctl in the Toolbox Classes folder.)\par \pard\plain \s254\sb240\keepn \b\f21 Scroll bar actions\par \pard\plain \s3\qj\sb160 \f20 Continuing down the demo program, the list of 5 definitions are the actions that occur when you click each part of each scroll bar.  The formats for each action handler definition is much like the other except for the amount of increment.  A key element of these definitions, however, is that they call upon a special Mops construction, called MyCtl.\par \pard \s3\qj\sb160 MyCtl is what is known as a {\ul vector}.  MyCtl  essentially tracks the address of the most recently activated control.  Therefore, if you click the PageUp part of the second of our three scroll bars, MyCtl remembers that it was the second scroll bar you activated.  In the action handler defini\-tion, then, get: MyCtl fetches the previous value of the second scroll bar.  The object of the get: method is determined dynamically at runtime, a technique explained in Part II as late-binding.  After the value of the second scroll bar is decremented by 10, a put: MyCtl stores the value in the second scroll bar's ivar before sending the update message to the window.  The importance of this myCtl mechanism is that is eliminates the need for us to define five action handlers for each scroll bar or concocting some algorithm to keep all that code to a minimum.  MyCtl allows us full control flexibility with a minimum of code.\par \pard \s3\qj\sb160 The doThumb definition is a special one that automatically calculates a value based on the rela\-tive position of the thumb along the range of the scroll bar.  The doPgUp and doPgDn increment and decrement (respectively) the value of the scroll bar by 10.  And the doLnUp and doLnDn adjust the figure by one in their respective directions.\par \pard \s3\qj\sb160 In the line after the action handler definitions, the address of the lj definition (the one that draws Lissajous figures) is plugged into dwind as the type of graphic that gets drawn when grDemo first fires up.  The no\-tation ' ("tick") returns an execution token or xt, a quantity which can be saved and used later to execute the word.  In this case, the xt of lj, which was defined a bit earlier in this program, is passed as a parameter in the setdraw: dwind mes\-sage.  Checking at dwind's class definition, we find that the setdraw: method stores the xt of a graphics routine (lj, spin, etc.) in the draw ivar of dwind.  This will all come together at the end of the program.\par \pard \s3\qj\sb160 A small digression: in Mops, as in many Forths, this execution token is actually the address of the compiled, executable code for the word.  However this isn't true of all Forths, and so the new ANSI standard now uses the more general term "execution token".\par Next, the xts of the five control actions are stored in each scroll bar's actions ivars.  The syntax here, xts\{ ... \} is a shortcut for entering the xt of each action handler word.  Addresses for each defi\-nition are passed as parameters to the scroll bars' actions ivars.\par \pard\plain \s15\qc\sb720 \f20 End of lesson{\fs0  19\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 20\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 20\par \pard\plain \s254\sb240\keepn \b\f21 Menus\par \pard\plain \s3\qj\sb160 \f20 A Mops program uses menus which are stored as separate resources.  This is the normal Mac method for defining menus, since it makes it easy for users to customize the menu text with ResEdit.\par \pard \s3\qj\sb160 Menus work in a way analogous to controls in that the program contains definitions of menu handler words, which the menu selections invoke.  Menu selections are usually more powerful in a Mac program than con\-trols, because menus typically divert the program into a relatively drastic change in program mode.  In a typical File menu, for example, selecting the Load... option halts the main program, while the user's atten\-tion is shifted to the dialog box for the selection of a file to open.  In grDemo, the primary menu, Graphics, changes the type of graphics the program will draw, sending you from Lissajous mode to Dragon Curves mode, for example.\par \pard \s3\qj\sb160 Menus take a bit more setting up than controls, since there are two separate steps.  First, you have to create a resource file to contain the menu resources.  This can be done with ResEdit.  For the demo program, we have provided a resource file called "Demo.rsrc".  This is in the Mops \'c4 folder.  Then the second step is to set up your Mops menu objects to correspond with the resources\emdash we'll talk about this now.\par \pard \s3\qj\sb160 Menus have an ID number associated with them.  It's important to note that this menu ID is dif\-ferent to the resource ID that menu resources have.  The existence of two separate ID numbers for a menu frequently causes confusion, but this can be minimized if you normally make these numbers the same.\par By convention, the Apple menu is ID=1.  We've assigned ID=2 to Graphics.  These ID numbers are stored in the menu resources, and are used by the Mac system to identify which menu has been selected.  You will see now that in Mops there is a simple way of associating a set of actions with a particular menu, using the menu ID number to identify the menu.\par \pard \s3\qj\sb160 Returning to the grDemo program listing, we now define a menu object called grafMen, specify\-ing that it has six members.  AppleMen does not need to be defined here, because Mops has already defined it in Mops.dic.\par \pard \s3\qj\sb160 Next come the menu handler word definitions for grafMen.  Each one places the xt of the draw\-ing word in the draw ivar of dwind.  Yet another syntax for obtaining the xt of a word is demon\-strated here: ['] lj.  ['] is the equivalent of ' {\ul within a definition}.  Each definition also places the maximum control values for each type of drawing.  Then it sends an update message for the entire window, which draws the revised scroll bar values and the drawing for the current settings.\par SetReps is a word that establishes the maximum number of repetitions for drawings created using the pen bic and the polygon anna.  You may wish to increase the value for bic if you find your numeric selections on the scroll bars don't draw complete figures.  Conversely, some draw\-ings may repeat on themselves after only 100 or fewer repetitions, in which case it seems that the program is unresponsive for several seconds.\par \pard \s3\qj\sb160 Next we set up the menus.  We do this by sending an INIT: message to each menu object.  As you can see, this method takes a xt list on the stack, which we specify using the xt\{ ... \} syntax.  It also takes another number, which is the menu ID number we've already talked about.  The xts in each list refer to the words which will be executed when a selection is made from the menu, starting from the top item.  Thus if the first item of GrafMen is selected, the word that will be executed is doLiss.  This corresponds to the item "Lissajous" which is in the menu resource.  It is your responsibility to make sure that the words that you put in your xt lists correspond, item for item, with the text that you have put in the items in your menu resource.  The Mac has no way of knowing that doLiss corresponds to the text "Lissajous".  If you get the xts in the wrong order, you will get some interesting things happening when you make menu selections, but it won't be what you want!\par \pard \s3\qj\sb160 In the grafMen resource, we have included a gray line between "Dragon curves" and "Quit", which (as is customary) is the last item.  Even this gray line must have a corresponding xt in the list.  You can use any word at all here, since it will never be executed; however to make our intention clearer we have used the word Null, which is a word which does nothing anyway.\par \pard \s3\qj\sb160 You will notice that for the Apple menu, appleMen, we have put only two items in the xt list.  All right, what about all the dozens of items that may be sitting under your Apple menu?  We are actually taking care of them, with the use of another feature of Mops\emdash if there are more items in a menu than were present in the xt list, and one of the "excess" items is selected, the {\ul last} xt in your list is called.  The word DoDsk handles the firing up of a DA or whatever is under the Apple menu.  In our program here it will handle everything except the first item, which (as is normal Mac practice) is "About...", in this case "About Curves".\par \pard\plain \s254\sb240\keepn \b\f21 Running the program\par \pard\plain \s3\qj\sb160 \f20 The last definition of this program is that of a word that gets the whole program running.  This is where ev\-erything done so far comes together when you type the word, GO.\par \pard \s3\qj\sb160 In the first line we do a couple of things if the value Instld? is False.  Now this value will be True if this is a stand-alone (double-clickable) application, and False otherwise, that is if we have just loaded this program into the Mops dictionary.  (We will see in the next lesson how to {\ul install} our demo program as a double-clickable application.)\par \pard \s3\qj\sb160 These two actions, then, are things we need to do when testing our program in Mops.  The first action is to open the resource file, demo.rsrc, which contains the menu resources we need.  In a stand-alone application we don't want to carry around a separate resource file, so our normal practice will be first, to create the stand-alone application via Install, and then to add any extra needed resources with ResEdit.  In this case the resources will be available without any other file having to be opened.  During testing, however, it is more convenient for extra resources to be in a separate file.\par \pard \s3\qj\sb160 In the next line, we bring our window, dWind, to life with a NEW: message.  We pass in the address and length of the text that will appear as the title of the window.  The syntax " Curves" (with a space after the first ") compiles the text "Curves" into the dictionary, and at run time pushes the address and length of the text on to the stack, which is what we need to pass with the NEW: message.\par \pard \s3\qj\sb160 Next we fire up the Menu objects.  The GETNEW: messages sent to each Menu object gets the needed Menu resources and initializes the menu.  We then set up the menu bar (at the top of the screen) by sending an INIT: message to our Menubar object.  This message takes the menu object addresses on the stack, followed by a count of the number of menus.\par Newobjs, as defined earlier, brings the dwind and VS objects to life.  Bic and Anna have their respective maximum repetitions set, and the cursor is turned off.  At the end, the word EventLoop enters an endless loop which continually "listens" to mouse events as they affect controls and menus.\par \pard \s3\qj\sb160 Last of all we define the error word.  This is needed for an installed application, since the full Mops system won't be there, so you have to provide a word to be executed if some error arises which normally gives a Mops error message.  We customarily call this word CRASH, which is a good description!  Here it just beeps twice and quits to the Finder.  A "real" application would need to do something more helpful, probably with an alert box, but this is, after all, a demo.\par \pard \s3\qj\sb160 If you want the program to start up right away after loading, all you have to do is enter the startup word, GO, as the last word of the grDemo source file.  When the file is loaded, Mops will act on that startup word as if you had typed it at the Mops prompt.\par \pard\plain \s254\sb240\keepn \b\f21 In summary\par \pard\plain \s3\qj\sb160 \f20 Now that you have seen the entire grDemo program, you should notice some key points about Mops pro\-grams.  First come the definition of the classes of objects that appear on the screen.  The balance of the pro\-gram concerns itself with defining handler words that work their wonders when controls and menus are ac\-tivated by the mouse.  It is wise to think of your program action in terms of handler words.  And lastly comes the definition of the word that starts your program.  it calls the words you've defined in the dictionary to create objects and let the program respond to your input.\par \pard\plain \s15\qc\sb720 \f20 End of lesson{\fs0  20\par }\pard\plain \f20 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 I-\chpgn \tab Mops Tutorial\par }{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqc\tx4680\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Lesson 21\tab I-\chpgn \par }{\footerr \pard\plain \li200 \f20 {\f21 \par }}{\headerf \pard\plain \f20 \par }{\footerf \pard\plain \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Lesson 21\par \pard\plain \s254\sb240\keepn \b\f21 Installing an application\par \pard\plain \s3\qj\sb160 \f20 In this lesson we will install our Curves program as a double-clickable application.  First, load GrDemo as we described in lesson 18.  But this time, don't start it up.  Either type\par \pard\plain \s2\li720 \b\f22\fs20 install\par \pard\plain \s3\qj\sb160 \f20 or select Install... from the Utilities menu.  Either way, the following dialog box will appear:\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw461\pich234 19d500000000012f01cd1101a10064000c574f524400000000012f01cd01000a00000000012f01cd98003a00000000012e01cc00000000012e01cc00000000012e01cc00000ae2ff00fbf2ff00fef7000c00c0eb000001f9ff00f0e8000c0080eb000001f9ff00f0e8000f0300000180ee000001f9ff00f0e8000e02000003ed000001f9ff00f0e800242000000200003e66000003e06630000c1801800038c0000001ff99ce66739ffffff0e800241c00001dc0003006000003006030000c0001800064c0000001ff99cfe7f3feff00f0e800242000003fe00030663c000303e678000c18e3c00060f878ccc1ff998666619c3c7ff0e800241300003f80003066660003066630000c1991800070fecc09c1ff99ce66739999bff0e800241300003f80003c66660003c66630000c19c1800038fecc09c1ff99ce66739998fff0e800241300003fe00030667e0003066630000c18e180001cfecc09c1ff99ce6673981c7ff0e800241300003fe0003066600003066630000c187180000cfecc09c1ff99ce667399fe3ff0e800241300001fc0003066620003066630000c193180004cfecc0981ff99ce667399db3ff0e800242000000d800030663c0003e3e618000f98e0c00038cc78ff01ffc3e666799c3c7ff0e8000cea000001f9ff00f0e900000f0aea000001f9ff00f0e8000aea000001f9ff00f0e8000aea000001f9ff00f0e8000aea000001f9ff00f0e80004c8ff00e02d010000fdff00e0fe00fdff00e0fe00fdff00e0fe00fdff00e0fe00fdff00e0fe00fdff00e0fe00fdff00e0fe002d010000fdff00c0fe00fdff00c0fe00fdff00c0fe00fdff00c0fe00fdff00c0fe00fdff00c0fe00fdff00c0fe0039010001feff00fefe000001feff00fefe000001feff00fefe000001feff00fefe000001feff00fefe000001feff00fefe000001feff00fefd0039010001feff00ecfe000001feff00ecfe000001feff00ecfe000001feff00ecfe000001feff00ecfe000001feff00ecfe000001feff00ecfd003b010001feff00b8fe000001feff00b8fe000001feff00b8fe000401e01fffb8fe000001feff00b8fe000001feff00b8fe000001feff00b8fe0000203b010003feff00f0fe000003feff00f0fe000003feff00f0fe000403c00ffff0fe000003feff00f0fe000003feff00f0fe000003feff04f0000003c03b01000ffeff0080fe00000ffeff0080fe00000ffeff0080fe00040f8007ff80fe00000ffeff0080fe00000ffeff0080fe00000ffeff048000000f802c01001ffeff0080fe00001ffeff0080fe00001ffeff0080fe00041f8787ff80fe00001ffeff01807fefff00e02a01003ffeff0080fe00003ffeff0080fe00003ffeff0080fe00043f8847ff80fe00003ffeff018040ee002604003ffffff8fd00033ffffff8fd00033ffffff8fd00033f8847f8fd00053ffffff80040ee002604007ffffff8fd00037ffffff8fd00037ffffff8fd00037f8847f8fd00057ffffff80040ee00060000c9ff00e00e0201ffe0f900001fdbff00fefa000e0203ffe0f9000010db000002fa000e0203ffe0f9000010db000002fa000e020fffe0f9000013dbff00f2fa000e021fffe0f9000013dbff00f2fa000e023fffe0f9000013db000032fa000e027fffe0f9000013db000032fa000e02ffffe0f9000013db000032fa000e02ffffe0f9000013db000032fa000e02ffffe0f9000013db000032fa000e02ffffe0f9000013db000032fa000e02ffffe0f9000013db000032fa000e02ffffe0f9000013db000032fa000e02ffffe0f9000013db000032fa000e02ffffe0f9000013db000032fa000e02ffffe0f9000013db000032fa000e02ffffe0f9000013db000032fa000cf6ff00f3db000033fbff00e00cf6ff00f3db000033fbff00e00e02fffff0f9000013db000032fa000e02fffff0f9000013db000032fa001206fffff003840004fd000013db000032fa001206fffc3004440004fd000013db000032fa00190bfffc30040e3ce48400039e73eb000201fffef4000032fa00190bfffc30038445150000045553eb0002010002f4000032fa00190bfffc3000444507000007d553eb0002010002f4000032fa001b0bfffc3004444d048000041553eb000401030203c0f6000032fa001b0bffc030038334f4440003d573eb00040104820c30f6000032fa001d02ffc030f9000053eb00040108421008fe00000ffdff03c0000032fa001d02ffc030f9000053eb0008011022100804080030fd000330000032fa001d02ffc030f9000013eb0008012012200404080020fd000310000032fa001d02ffc030f9000013eb000801787a20041f3e0040fd000308000032fa002002ff8030f9000013ee000b080000010842200404080040fd000308000032fa002102ff8030f9000013ee000c0c000001084220040408004070fe000308000032fa002102ff0030f9000013ee00070e00000108421008fe000140c8fe000308000032fa002102ff0030f9000013ee00070f0000010fc21008fe000840c0f198f008000032fa002102fe0030f9000013ee00070f80000100020c30fe000840e119999808000032fa002402fe0030f9000313000001f1ff07efdff801000203c0fe00084070f9999808000032fa002202fc0030f9000313000001f100050fe00801fffefc000840399999f808000032fa002202f80030f9000313000001f100050ff00801fffefc0008401999998008000032fa002202e00030f9000313000001f100050f8008018006fc0008409999918808000032fa002202800030f9000313000001f100050d8008018006fc00084070f9e0f008000032fa002d02000030f9000813000001070c0000c0fb00010fc7fe870588c008018006fc000040fd000308000032fb00000f2b02000030f90008130000010c8c0000c0fb00010c0cfecc05c0c008018006fc000040fd000308000032fa002c02000030f90009130000010c1e3c38ccc0fc00010c0cfecc05c06008018006fc000040fd000308000032fa002c02000030f90009130000010e0c4664d8c0fc00010f8cfecc05c06008018006fc000020fd000310000032fa002802000030f9000813000001070c3e60f0fa00fdcc05c00008018006fc000030fd000330000032fa002802000030f9000813000001038c6660e0fa00fdcc05c00008018006fc00000ffdff03c0000032fa002102000030f9000813000001018c6660f0fa00fdcc05c00008018006f4000032fa002402000030f9000913000001098c6664d8c0fc000008fdcc05c00008018006f4000032fa002402000030f900091300000107063e38ccc0fc000007fd8705800008018006f4000032fa001802000070f9000313000001ef000308018006f4000032fa0018020000f0f9000313000001ef000308018006f4000032fa001d020000f0f9000313000001ef000308018006fc00003ffbff01c032fa001d020001f0f9000313000001ef00030801fffefc0000c0fb00013032fa001d020001f0f9000313000001ef00030801fffefc000080fb00011032fa001d020001f0f9000313000001efff03f8010002fd000001fa00010832fa0019020003f0f9000013eb0002010002fd000001fa00010832fa001e02000ff0f9000013eb0010010fc203c000000100300001800cc00832fa001e02001ff0f9000013eb00100108420c3000000100300001800cc00832fa001e02003ff0f9000013eb001001084210080000010031f0e3c78cc00832fa001e02003ff0f9000013eb001001084210080000010031999188ccc00832fa001e02007ff0f9000013eb001001787a2004000001003199c187ccc00832fa001e0200fff0f9000013eb001001201220041f3e01003198e18cccc00832fa001e0201fff0f9000013eb00100110222004000001003198718cccc00832fa001e0203fff0f9000013eb00100108422004000001003199318cccc00832fa001e0203fff0f9000013eb00100104821008000001003198e0c7ccc00832fa001a020ffff0f9000013eb00070103021008000001fa00010832fa001a021ffff0f9000013eb00070100020c30000001fa00010832fa001a023ffff0f9000013eb000701000203c0000001fa00010832fa0019027ffff0f9000013eb000201fffefc000080fb00011032fa001302fffff0f9000013e30000c0fb00013032fa001a02fffff0f9000313000001efff00f8f900003ffbff01c032fa001502fffff0f9000313000001ef000008f1000032fa001502fffff0f9000313000001ef000008f1000032fa001502fffff0f9000313000001ef000008f1000032fa001502fffff0f9000313000001ef000008f1000032fa001e02fffff0f90005130000010cc0f8000730fc0c78fc780008f1000032fa002402fffff0f90005130000010cc0f80007700c1ccc0ccc0008f900003ffcff02f00032fa002702fffff0f90008130000010cc7878f8cfb0007300c2ccc0ccc0008f90000c0fc00020c0032fa002702fffff0f90008130000010cccc8ccccfb0007300c4ccc0ccc0008f9000080fc0002040032fa002702fffff0f90008130000010fccc7ccc0fb000730188ccc18cc0008fa000001fb0002020032fa002702fffff0f90008130000010ccfccccc0fb00073030fe7c30cc0008fa000001fb0002020032fa002a02fffff0f90008130000010ccc0cccc0fb000730300c0c30cc0008fa00020101e0fe000306020032fa002a02fffff0f90008130000010ccc4cccccfb000730300c1830cc0008fa0002010310fe000306020032fa002a02fffff0f90008130000010cc787cf8cfb000730300c7030780008fa0009010301e3e1c3c6020032fa002202fffc30f9000313000001fe00000cf3000008fa000901030233332666020032fa002202fffc30f9000313000001fe00000cf3000008fa0009010301f3330666020032fa001e02fffc30f9000313000001ef000008fa0009010303333307e6020032fa001e02fffc30f9000313000001ef000008fa000901030333330606020032fa001e02fffc30f9000313000001ef000008fa000901031333332626020032fa001e02ffc030f9000313000001efff00f8fa00090101e1f331c3c6020032fa001402ffc030f9000013e4000001fb0002020032fa001a02ffc030f9000013eb000201fffefd000001fb0002020032fa001a02ffc030f9000013eb0002010002fd000001fb0002020032fa001a02ffc030f9000013eb0002010002fc000080fc0002040032fa001c02ff8030f9000013eb000401030203c0fe0000c0fc00020c0032fa001c02ff8030f9000013eb00040104820c30fe00003ffcff02f00032fa001602ff0030f9000013eb00040108421008f6000032fa001802ff0030f9000013eb000601102210080408f8000032fa001802fe0030f9000013eb000601201220040408f8000032fa001802fe0030f9000013eb000601787a20041f3ef8000032fa001802fc0030f9000013eb000601084220040408f8000032fa001802f80030f9000013eb000601084220040408f8000032fa001602e00030f9000013eb00040108421008f6000032fa001602800030f9000013eb0004010fc21008f6000032fa001602000030f9000013eb00040100020c30f6000032fa001a02000030f9000313000001efff05f801000203c0f6000032fa001802000030f9000313000001ef00030801fffef4000032fa001802000030f9000313000001ef00030801fffef4000032fa001802000030f9000313000001ef000308018006f4000032fa001802000030f9000313000001ef000308018006f4000032fa002102000030f90007130000010f8c00c6fa0000fcfc78040008018006f4000032fa002102000030f90007130000010cc000c0fa000018fccc040008018006f4000032fa002502000030f9000f130000010ccc71e63c7c3c6d99800030fccc040008018006f4000032fa002502000070f9000f130000010cccc8c66666467199800078fccc040008018006f4000032fa0025020000f0f9000f130000010cccc0c666663e619800000cfccc040008018006f4000032fa0026010000f8ff07f30000010cccc0c6fe6604619800000cfccc040008018006f4000033fbff00e025020001e0f90007130000010cccc0c6fe6604619800000cfccc040008018006f4000032fa0025020001e0f90007130000010cccc8c6fe6604619980008cfccc040008018006f4000032fa0024020001e0f9000e130000010f8c70663c663e60f98000fb78040008018006f4000032fa001c020003e0f9000313000001f9000018f8000308018006f4000032fa001d02000fe0f9000313000001fa00010118f8000308018006f4000032fa001c02001fe0f9000313000001f90000f0f8000308018006f4000032fa001802003fe0f9000313000001ef00030801fffef4000032fa001802003fe0f9000313000001ef00030801fffef4000032fa001802007fe0f9000313000001efff03f8010002f4000032fa00140200ffe0f9000013eb0002010002f4000032fa00160201ffe0f9000013eb0004010fc203c0f6000032fa00160203ffe0f9000013eb00040108420c30f6000032fa00160203ffe0f9000013eb00040108421008f6000032fa0016020fffe0f9000013eb00040108421008f6000032fa0016021fffe0f9000013eb000401787a2004f6000032fa0018023fffe0f9000013eb000601201220041f3ef8000032fa0016027fffe0f9000013eb00040110222004f6000032fa001602ffffe0f9000013eb00040108422004f6000032fa001602ffffe0f9000013eb00040104821008f6000032fa001602ffffe0f9000013eb00040103021008f6000032fa001602ffffe0f9000013eb00040100020c30f6000032fa001602ffffe0f9000013eb000401000203c0f6000032fa001402ffffe0f9000013eb000201fffef4000032fa000e02ffffe0f9000013db000032fa000e02ffffe0f9000013db000032fa000e02ffffe0f9000013db000032fa001303ffffe0f0fe00048000088013db000032fa001103ffffe088fc0002080013db000032fa00130bffffe089c73c008b00788713db000032fa00130bffffe0f228aa008c80888893db000032fa00130bffffe08a28aa008880888813db000032fa00130bffffe08a28aa008880888813db000032fa00130bfffc2089c72a008880788793db000032fa000e02fffc20f9000013db000032fa000e02fffc20f9000013db000032fa001602fffc20f9000013ee00000ffaff00c0f7000032fa001602fffc20f9000013ee000030fa000030f7000032fa001a05ffc020f08008fd00018013ee000020fa000010f7000032fa001a05ffc020880008fd00018013ee000040fa000008f7000032fa001b0bffc02088879c7ac71c01c713ee000040fa000008f7000032fa001f0bffc0208888088b28a2008893ee0008480400000cc0000008f7000032fa001f0bffc0208887088a283e008893ee00084c0c00000cc0000008f7000032fa001f0bff80208880889a2820008893ee00084e1c78cc0cc7878f88f7000032fa001f0bff8020f08f066a279e006713ee00084f3c8ccc0cccc8ccc8f7000032fa001a02ff0020f9000013ee00084bec7ccc0fccc7ccc8f7000032fa001a02ff0020f9000013ee000849cccc780ccfccccc8f7000032fa001a02fe0020f9000013ee0008488ccccc0ccc0cccc8f7000032fa001a02fe0020f9000013ee0008480ccccc0ccc4cccc8f7000032fa001f07fc0020f802002008fe000013ee0008480c7ccc0cc787cf88f7000032fa001c07f800202002002008fe000013ee000040fb00010c08f7000032fa001c0be0002021c71e200f1c7bc013ee000040fb00010c08f7000032fa001b02800020fe22052008a28a2013ee000040fa000008f7000032fa001b02000020fe22052008be8a2013ee000020fa000010f7000032fa001b0b0000202222262008a09a2013ee000030fa000030f7000032fa001b0b00002021c19a20089e6bc013ee00000ffaff00c0f7000032fa001002000020fb0002020013db000032fa001002000020fb0002020013db000032fa000e02000020f9000013db000032fa000e02000020f9000013db000032fa00130300002080fe00040200808013db000032fa00130300002080fe00040200808013db000032fa00130b00006081eb1e71e700f08713db000032fa00130b0000e0822ca28a02008888b3db000032fa00130b0000e0822822f9c2008888b3dbff00f2fa00130b0001e08268228022008888b3dbff00f2fa00130b0001e0f9a81e7bc180f08710db000002fa0011050001e0000002fc000010db000002fa0011050003e000001cfc00001fdbff00fefa000602000fe0ca000602001fe0ca000602003fe0ca000602003fe0ca000602007fe0ca00060200ffe0ca00060201ffe0ca00060203ffe0ca00060203ffe0ca0006020fffe0ca0006021fffe0ca0006023fffe0ca0006027fffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca000802ffffe0cb00000f0602ffffe0ca000602ffffe0ca000602ffffe0ca000602fffc20ca000602fffc20ca000602fffc20ca000602fffc20ca000602fffc20ca000802ffc020cb00000f0602ffc020ca000602ffc020ca000602ffc020ca000602ffc020ca000602ff8020ca000602ff8020ca000602ff0020ca000602ff0020ca000602fe0020ca000602fe0020ca000602fc0020ca000602f80020ca000602e00020ca000602800020ca000602000020ca000602000020ca000602000020ca000602000020ca000602000020ca000602000020ca000602000020ca000602000020ca000602000020ca000602000060ca0006020000e0ca0006020000e0ca0006020001e0ca0006020001e0ca0006020001e0ca0006020003e0ca000602000fe0ca000602001fe0ca000602003fe0ca000602003fe0ca000602007fe0ca00060200ffe0ca00060201ffe0ca00060203ffe0ca00060203ffe0ca0006020fffe0ca0006021fffe0ca0006023fffe0ca0006027fffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca000602ffffe0ca00ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-19\par \pard\plain \s3\qj\sb160 \f20 Experiment with clicking in the controls.  (Don't click the buttons yet.)  You will see that if the Dictionary number increases, the Heap number reduces by the same amount, and similarly for the Stack.  You are here defining how the available memory will be used in your application.  The "stack" space is for your parameter stack and your return stack.  The system will also use the parameter stack space when various system calls are made, which can use a lot of stack space, so we suggest you don't reduce this figure below 20000.\par \pard \s3\qj\sb160 The Dictionary number refers to the amount of memory allocated for the dictionary, {\ul above what is allocated already}.  What we are doing now is installing an application which is already loaded, so that we won't need a very big number here, since no more definitions will be getting compiled into the dictionary when our application is running.\par \pard \s3\qj\sb160 The Heap number refers to the memory that is available on request from the system, when your program is running.  The number here is the maximum amount of this kind of memory that is available.  Basically whatever is left over after the stack and dictionary space is allocated will be used for the heap.  The number that appears here is only a guide, since when your installed appli\-cation runs there mightn't be the same total amount of memory available as there was when you ran the install.  It is good, then, to use only what you really require for the stack and dictionary, to make the best use of whatever memory is available when your application runs.\par \pard \s3\qj\sb160 Normally the easiest way to do this when you are installing an application, is to click on the "Max Heap" button.  Do it now.  Your window should now appear something like this, perhaps with a different number for the Heap:\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw453\pich230 19d000000000011b01c51101a10064000c574f524400000000011b01c501000a00000000011b01c598003a00010000011b01c400010000011b01c400000000011a01c400000a00e0ea00f9ff00f8e8000a00c0ea00f9ff00f8e8000d03800000c0ed00f9ff00f8e8000d0380000180ed00f9ff00f8e800241400000100001f33000001f0331800060c00c0001c60fe0008ffcce73339cffffff8e800241400000ee000180300000180301800060000c0003260fe0004ffcce7f3f9feff00f8e800242000001ff00018331e000181f33c00060c71e000307c3c6660ffccc33330ce1e3ff8e800241300001fc000183333000183331800060cc8c00038fe660960ffcce73339ccccdff8e800271300001fc0001e33330001e3331800060ce0c0001cfe660960ffcce73339cccc7ff8ea00010f00241300001ff00018333f000183331800060c70c0000efe660960ffcce73339cc0e3ff8e800241300001ff000183330000183331800060c38c00006fe660960ffcce73339ccff1ff8e800241300000fe000183331000183331800060c98c00026fe660940ffcce73339cced9ff8e8002420000006c00018331e0001f1f30c0007cc7060001c663c7f80ffe1f3333cce1e3ff8e80008e900f9ff00f8e80008e900f9ff00f8e80008e900f9ff00f8e80008e900f9ff00f8e8000be900f9ff00f8ea00010fff05c9ff01f0003a0200007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe003a0200007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe0022010000fdfffd00fdfffd00fdfffd00fdfffd00fdfffd00fdfffd00fdff0300000fff2d010000feff00f6fd00feff00f6fd00feff00f6fd00feff00f6fd00feff00f6fd00feff00f6fd00feff00f6fd002e010000feff00dcfd00feff00dcfd00feff00dcfd0003f00fffdcfd00feff00dcfd00feff00dcfd00feff00dcfd0039010001feff00f8fe000001feff00f8fe000001feff00f8fe000401e007fff8fe000001feff00f8fe000001feff00f8fe000001feff00f8fd0039010007feff00c0fe000007feff00c0fe000007feff00c0fe000407c003ffc0fe000007feff00c0fe000007feff00c0fe000007feff00c0fd002d01000ffeff00c0fe00000ffeff00c0fe00000ffeff00c0fe00040fc3c3ffc0fe00000ffeff01c03ff0ff01f0002a01001ffeff00c0fe00001ffeff00c0fe00001ffeff00c0fe00041fc423ffc0fe00001ffeff01c020ee002604001ffffffcfd00031ffffffcfd00031ffffffcfd00031fc423fcfd00051ffffffc0020ee002604003ffffffcfd00033ffffffcfd00033ffffffcfd00033fc423fcfd00053ffffffc0020ee000501007fc9ff0c0200fff0f900000fdafffa000e0201fff0f9000008db000001fa000e0201fff0f9000008db000001fa000e0207fff0f9000009dbff00f9fa000e020ffff0f9000009dbff00f9fa0012021ffff0f900010980dc000019fc00010fff12023ffff0f900010980dc000019fc00010fff1202fffff0f900010980dc000019fc00010fff0f02fffff0f900010980dc000019fa000f02fffff0f900010980dc000019fa000f02fffff0f900010980dc000019fa000f02fffff0f900010980dc000019fa000f02fffff0f900010980dc000019fa000f02fffff0f900010980dc000019fa000f02fffff0f900010980dc000019fa000f02fffff0f900010980dc000019fa000f02fffff0f900010980dc000019fa000bf6ff01f980dc000019faff0ef6ff01f980dc000019fcff01f0000f02fffff8f900010980dc000019fa000f02fffff8f900010980dc000019fa001306fffff801c20002fd00010980dc000019fa001306fffe1802220002fd00010980dc000019fa00190cfffe1802071e72420001cf3980eb0001fffff4000019fa00190cfffe1801c2228a8000022aa980eb00018001f4000019fa00190cfffe1800222283800003eaa980eb00018001f4000019fa001e0cfffe18022226824000020aa980eb0003818101e0f6000019fc00010fff1b0cffe01801c19a7a220001eab980eb000382410618f6000019fa001d02ffe018f900012980eb000384210804fe000007fdff03e0000019fa001d02ffe018f900012980eb00078811080402040018fd000318000019fa001d02ffe018f900010980eb00079009100202040010fd000308000019fa001d02ffe018f900010980eb0007bc3d10020f9f0020fd000304000019fa001d02ffc018f900010980eb00078421100202040020fd000304000019fa001e02ffc018f900010980eb0008842110020204002038fe000304000019fa001e02ff8018f900010980eb000384210804fe00012064fe000304000019fa002102ff8018f900010980eb000387e10804fe0008206078cc7804000019fc00010fff1e02ff0018f900010980eb000380010618fe000820708ccccc04000019fa002202ff0018f9000309800000efff05fc00800101e0fe000820387ccccc04000019fa002102fe0018f900040980000080f000030400fffffc0008201cccccfc04000019fa002402fc0018f900040980000080f000030400fffffc0008200cccccc004000019fc00010fff2102f00018f900040980000080f000030400c003fc0008204cccc8c404000019fa002102c00018f900040980000080f000030400c003fc000820387cf07804000019fa002a02800018f90008098000008386000060fb000003fdc305c0000400c003fc000020fd000304000019fa002a02000018f90008098000008646000060fb000004fd660560000400c003fc000020fd000304000019fa002902000018f9000909800000860f1e1c6660fb00fd660560000400c003fc000020fd000304000019fa002902000018f9000909800000870623326c60fb00fd660560000400c003fc000010fd000308000019fa002a02000018f900080980000083861f3078fa0000c6fe660560000400c003fc000018fd000318000019fa002b02000018f900080980000081c6333070fb00010186fe660560000400c003fc000007fdff03e0000019fa002402000018f900080980000080c6333078fb00010306fe660560000400c003f4000019fa002502000018f900090980000084c633326c60fc00010606fe660560000400c003f4000019fa002502000018f900090980000083831f1c6660fc000107e3fec305c0000400c003f4000019fa001902000038f900040980000080f000030400c003f4000019fa001902000078f900040980000080f000030400c003f4000019fa001e02000078f900040980000080f000030400c003fc00001ffbff01e019fa001e020000f8f900040980000080f000030400fffffc000060fb00011819fa001e020000f8f900040980000080f000030400fffffc000040fb00010819fa001d020000f8f9000309800000efff03fc008001fc000080fb00010419fa0019020001f8f900010980eb00018001fc000080fb00010419fa001e020007f8f900010980eb000387e101e0fe000880180000c006600419fa001e02000ff8f900010980eb000384210618fe000880180000c006600419fa001e02001ff8f900010980eb000384210804fe00088018f871e3c6600419fa001e02001ff8f900010980eb000384210804fe00088018ccc8c466600419fa001e02003ff8f900010980eb0003bc3d1002fe00088018cce0c3e6600419fa001e02007ff8f900010980eb000f900910020f9f008018cc70c666600419fa001e0200fff8f900010980eb000388111002fe00088018cc38c666600419fa001e0201fff8f900010980eb000384211002fe00088018cc98c666600419fa001e0201fff8f900010980eb000382410804fe00088018cc7063e6600419fa001b0207fff8f900010980eb000381810804fe000080fb00010419fa001b020ffff8f900010980eb000380010618fe000080fb00010419fa001b021ffff8f900010980eb0003800101e0fe000080fb00010419fa0019023ffff8f900010980eb0001fffffc000040fb00010819fa001402fffff8f900010980e4000060fb00011819fa001a02fffff8f9000309800000efff00fcf900001ffbff01e019fa001602fffff8f900040980000080f0000004f1000019fa001902fffff8f900040980000080f0000004f1000019fc00010fff1602fffff8f900040980000080f0000004f1000019fa001602fffff8f900040980000080f0000004f1000019fa001e02fffff8f90005098000008660f800077e3c063c063c0004f1000019fa002402fffff8f90005098000008660f8000760660e660e460004f900001ffcff02f80019fa002702fffff8f90008098000008663c3c7c6fb00076066166616060004f9000060fc0002060019fa002702fffff8f90008098000008666646666fb00077c66266626060004f9000040fc0002020019fa002702fffff8f900080980000087e663e660fb00070666463c460c0004f9000080fc0002010019fa002702fffff8f90008098000008667e66660fb000706667f667f180004f9000080fc0002010019fa002902fffff8f90008098000008666066660fb00070666066606300004f9000180f0fe000303010019fa002902fffff8f90008098000008666266666fb00074666066606600004f900018188fe000303010019fa002902fffff8f90008098000008663c3e7c6fb00073c3c063c067e0004f900088180f1f0e1e3010019fa002102fffe18f900070980000080000006f3000004f90008818119999333010019fa002102fffe18f900070980000080000006f3000004f900088180f9998333010019fa001e02fffe18f900040980000080f0000004f900088181999983f3010019fa001e02fffe18f900040980000080f0000004f90008818199998303010019fa001e02fffe18f900040980000080f0000004f90008818999999313010019fa001d02ffe018f9000309800000efff00fcf9000880f0f998e1e3010019fa001702ffe018f900010980e4000080fc0002010019fb0000ff1a02ffe018f900010980eb0001fffffc000080fc0002010019fa001a02ffe018f900010980eb00018001fc000080fc0002010019fa001a02ffe018f900010980eb00018001fc000040fc0002020019fa001c02ffc018f900010980eb0003818101e0fe000060fc0002060019fa001c02ffc018f900010980eb000382410618fe00001ffcff02f80019fa001602ff8018f900010980eb000384210804f6000019fa001802ff8018f900010980eb0005881108040204f8000019fa001802ff0018f900010980eb0005900910020204f8000019fa001802ff0018f900010980eb0005bc3d10020f9ff8000019fa001802fe0018f900010980eb0005842110020204f8000019fa001802fc0018f900010980eb0005842110020204f8000019fa001602f00018f900010980eb000384210804f6000019fa001602c00018f900010980eb000387e10804f6000019fa001602800018f900010980eb000380010618f6000019fa001a02000018f9000309800000efff05fc00800101e0f6000019fa001902000018f900040980000080f000030400fffff4000019fa001902000018f900040980000080f000030400fffff4000019fa001902000018f900040980000080f000030400c003f4000019fa001902000018f900040980000080f000030400c003f4000019fa002202000018f900070980000087c60063f900090183c3c000000400c003f4000019fa002202000018f900070980000086600060f900090384666000000400c003f4000019fa002702000018f9001909800000866638f31e3e1e36ccc000000180666000000400c003f4000019fa002702000038f90019098000008666646333332338ccc000000180666000000400c003f4000019fa002702000078f9000c098000008666606333331f30ccfe00090180c3c000000400c003f4000019fa002a0200007ff9ff07f980000086666063fe330130ccfe00090181866000000400c003f4000019fcff01f00027020000f0f900070980000086666063fe330130ccfe00090183066000000400c003f4000019fa002a020000f0f900070980000086666463fe330e30ccc000000186066000000400c003f4000019fc00010fff27020000f0f900190980000087c638331e331f307cc000000187e3c000000400c003f4000019fa001d020001f0f900040980000080fa00000cf800030400c003f4000019fa001d020007f0f900040980000080fa00008cf800030400c003f4000019fa001d02000ff0f900040980000080fa000078f800030400c003f4000019fa001902001ff0f900040980000080f000030400fffff4000019fa001902001ff0f900040980000080f000030400fffff4000019fa001802003ff0f9000309800000efff03fc008001f4000019fa001402007ff0f900010980eb00018001f4000019fa00160200fff0f900010980eb000387e101e0f6000019fa00160201fff0f900010980eb000384210618f6000019fa00160201fff0f900010980eb000384210804f6000019fa00160207fff0f900010980eb000384210804f6000019fa0016020ffff0f900010980eb0003bc3d1002f6000019fa0018021ffff0f900010980eb0005900910020f9ff8000019fa0016023ffff0f900010980eb000388111002f6000019fa001602fffff0f900010980eb000384211002f6000019fa001602fffff0f900010980eb000382410804f6000019fa001902fffff0f900010980eb000381810804f6000019fc00010fff1602fffff0f900010980eb000380010618f6000019fa001602fffff0f900010980eb0003800101e0f6000019fa001402fffff0f900010980eb0001fffff4000019fa000f02fffff0f900010980dc000019fa000f02fffff0f900010980dc000019fa000f02fffff0f900010980dc000019fa001403fffff078fe0005400004400980dc000019fa001203fffff044fc000304000980dc000019fa00140cfffff044e39e0045803c438980dc000019fa00140cfffff079145500464044444980dc000019fa00140cfffff045145500444044440980dc000019fa00140cfffff045145500444044440980dc000019fa00140cfffe1044e3950044403c43c980dc000019fa000f02fffe10f900010980dc000019fa000f02fffe10f900010980dc000019fa001702fffe10f900010980ef000007faff00e0f7000019fa001702fffe10f900010980ef000018fa000018f7000019fa001e05ffe010784004fd0002400980ef000010fa000008f7000019fc00010f001b05ffe010440004fd0002400980ef000020fa000004f7000019fa001c0cffe0104443ce3d638e00e38980ef000020fa000004f7000019fa00200cffe01044440445945100444980ef0008240200000660000004f7000019fa00200cffe01044438445141f00444980ef0008260600000660000004f7000019fa00200cffc0104440444d141000444980ef0008270e3c660663c3c7c4f7000019fa00200cffc0107847833513cf00338980ef0008279e46660666646664f7000019fa001b02ff8010f900010980ef000825f63e6607e663e664f7000019fa001b02ff8010f900010980ef000824e6663c0667e66664f7000019fa001d02ff0010f900010980ef0008244666660666066664f7000019fb0000ff1b02ff0010f900010980ef0008240666660666266664f7000019fa002007fe00107c01001004fe00010980ef000824063e660663c3e7c4f7000019fa002007fc00101001001004fe00010980ef000020fe00042000000604f7000019fa00200cf0001010e38f10078e3de00980ef000020fe00043000000604f7000019fa002002c00010fe110610045145100980ef000020fe000038fe000004f7000019fa002002800010fe110610045f45100980ef000010fe00003cfe000008f7000019fa00200c0000101111131004504d100980ef000018fe00003efe000018f7000019fa00200c00001010e0cd10044f35e00980ef000007feff04bf7fffffe0f7000019fa001802000010fb000301000980eb00013f80f4000019fb0000ff1602000010fb000301000980eb00013fc0f4000019fa001302000010f900010980eb00003ef3000019fa001302000010f900010980eb000036f3000019fa00180300001040fe0005010040400980eb000023f3000019fa00180300001040fe0005010040400980eb000003f3000019fa00190c00003040f58f38f38078438980eb00010180f4000019fa001c0c00007041165145010044445980eb00010180f4000019fc00010f001b0b0000704114117ce100444459eaff01fe3ff4ff00f9fc00010f00160b0000f0413411401100444459dbff00f9fc00010f00130b0000f07cd40f3de0c0784388db000001fa0011050000f0000001fc000008db000001fa000f050001f000000efc00000fdafffa0006020007f0ca000602000ff0ca000602001ff0ca000602001ff0ca000602003ff0ca000602007ff0ca00060200fff0ca00060201fff0ca00060201fff0ca00060207fff0ca0006020ffff0ca0006021ffff0ca0009023ffff0cc00010fff0602fffff0ca000602fffff0ca000602fffff0ca000602fffff0ca000602fffff0ca000602fffff0ca000602fffff0ca000602fffff0ca000602fffff0ca000602fffff0ca000602fffff0ca000602fffff0ca000602fffff0ca000602fffff0ca000602fffff0ca000602fffe10ca000602fffe10ca000602fffe10ca000602fffe10ca000602fffe10ca000602ffe010ca000602ffe010ca000602ffe010ca000602ffe010ca000602ffe010ca000602ffc010ca000602ffc010ca000602ff8010ca000602ff8010ca000602ff0010ca000602ff0010ca000602fe0010ca000602fc0010ca000602f00010ca000902c00010cc00010f000602800010ca000602000010ca000602000010ca000602000010ca000602000010ca000602000010ca000602000010ca000602000010ca000602000010ca000602000030ca000602000070ca000602000070ca0006020000f0ca0006020000f0ca0006020000f0ca0006020001f0ca0006020007f0ca00ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-20\par \pard\plain \s3\qj\sb160 \f20 You will see that the stack allocation is now 20000, which is the mimimum we recommend, and the dictionary only 128.  This just allows a safety margin in case your application executes code that moves a string to HERE.  (If you know that your application will need more room at HERE, you can adjust this number.  For the demo program, however, there's no need.)\par \pard \s3\qj\sb160 Now that you have specified your memory requirements, click Install.  You will get the follow\-ing dialog:\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw466\pich311\picscaled 1bc700000000015602001101a10064000c574f5244000000000156020001000a00000000015602009800400001000101560200000100010156020000000000015501ff00000400c0c200040080c2000602000001c4000602000002c4001dfc000f1444000003e066300004100100001040fd00044411110440df001f14000008800020020000030060300008000080002080fd000322200808de00221e0000154000104414000303e678000410414000405050444000445111144141e000221300002a8000202222000306663000080880800020fe88078000222088882222e000221300001500001444440003c6663000041141000010fe44074000441111044445e000231300002aa00020222a0003066630000808a0800008fe880880002220888822a280e10023130000154000104440000306663000041051000004fe4408400044111104440140e100231300000a8000202222000306663000080820800008fe8808800022208888222080e100221e00000500001044140003e3e618000510404000104450550000141111044141e00002c10002c10002c10002c10002c10004c2ff00fc34010000fdff00e0fe00fdff00e0fe00fdff00e0fe00fdff00e0fe00fdff00e0fe00fdff00e0fe00fdff04e00000027ffeff01e00034010000fdff00c0fe00fdff00c0fe00fdff00c0fe00fdff00c0fe00fdff00c0fe00fdff00c0fe00fdff09c00000023fbfffffc00041010001feff00fefe000001feff00fefe000001feff00fefe000001feff00fefe000001feff00fefe000001feff00fefe000001feff00fefe0004069f3ffffeff0041010001feff00ecfe000001feff00ecfe000001feff00ecfe000001feff00ecfe000001feff00ecfe000001feff00ecfe000001feff00ecfe00041e9e3fffecff0041010001feff00b8fe000001feff00b8fe000001feff00b8fe000401e01fffb8fe000001feff00b8fe000001feff00b8fe000001feff00b8fe00043d9cbfffb8ff0041010003feff00f0fe000003feff00f0fe000003feff00f0fe000403c00ffff0fe000003feff00f0fe000003feff00f0fe000003feff08f0000003cf89bffff0ff004101000ffeff0080fe00000ffeff0080fe00000ffeff0080fe00040f8007ff80fe00000ffeff0080fe00000ffeff0080fe00000ffeff088000000f9741bfff80ff002c01001ffeff0080fe00001ffeff0080fe00001ffeff0080fe00041f8787ff80fe00001ffeff01807fe9ff00fc2a01003ffeff0080fe00003ffeff0080fe00003ffeff0080fe00043f8847ff80fe00003ffeff018040e800070001c4ff01fe00070001c400010200070001c4000103fc0801013fc5ff01f2000801033fc5ff01f20008010330c50001320008010f30c50001320008011f30c50001320008013f30c50001320008017f30c5000132000801ff30c5000132000801ff30c5000132000801ff30c5000132000801ff30c5000132000801ff30c5000132000801ff30c5000132000801ff30c5000132000801ff30c5000132000801ff30c5000132002104ff3000001efc0004018000000cf800007cfb0002060006fe000030e9000132001b04ff30000033f800000cf8000066fb000006fc000030e9000133fc2e03ff300000fe330be1e360718f9f0f1e666cf180fc0011663c38ccff878f8f01c63e7c3c7999b3c38ced000133802b03ff300000fc330980c99999918c66719980fc0002666664fdcc0ac603266666463199c6664ced000132802903ff300000fc330800e199998f8c666198fb0002666660fdcc09c6038666663e31998667ec000132802c03ff300000fd3302f30071fe99038c6661f8fb0009666660cccccfccc601c6fe6604319987e380ed000132802c03ff300000fd3302030039fe99038c666180fb0002666660fecc030cc600e6fe660431998601c0ed000132802c09ff300000333323331300fd99048c66618980fc0002666664fecc024cc602fd660431998624cced000132802e12ff3000001e3fc331e300718f998f863e60f180fc00117c3c387cccc78cc301c63e663e18f983c38ced000132801101ff30f800010180ec000006e6000132801101ff30f800011180ec000046e6000132801001ff30f800000feb00003ce6000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132802503ff300000fafff5000001fbff03fe00003ffbff02c00007fbff02f80000fafffe000132802b04ff30000080fc000001f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802b04ff30000080fc000001f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802b04ff3000009ffcff00f9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802b04ff3000009ffcff00f9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802b04ff3000009ffcff00f9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802d0afd3000009bfdc383c7fff9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802d0af930000099f999999bfff9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802d0ae130000098f199999ffff9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802d0a81300000986199998ffff9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802d0a013000009a099983c7fff9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802d0a013000009b19999fe3fff9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802d0a013000009bb9999ff3fff9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802d0a013000009bf9999fb3fff9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802d0a013000009bf9c39fc7fff9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802b04013000009ffcff00f9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802b04013000009ffcff00f9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802b04013000009ffcff00f9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802b04013000009ffcff00f9f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802b040130000080fc000001f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802b040130000080fc000001f5000001fb000302000020fb0002400004fb000308000080fc000001fe000132802b040130000080fc000001f5000001fb000302000020fb0002400004fb000308000080fc000001fe00013280250301300000fafff5000001fbff03fe00003ffbff02c00007fbff02f80000fafffe0001328008010130c50001328008010130c50001328008010130c50001328008010130c50001328008010130c50001328008010130c50001328008010130c50001328008010130c50001328008010130c50001328008010130c50001328008010330c50001328008010330c500013280140d0f30000033000001800000018030d10001328010041f30000033fb00010180d000013280160f3f300000331e36718f1f00e3cdb3e1f3d300013280150c7f300000333338c9999981918efe33d300013280160fff300000333330e1999981c18c333330d300013281160fff300000333f3071999980e18c333330d300013280160fff30000033303039999980718c333330d3000132801506ff300000323130fe990281318cfe33d300013280160fff3000003c1e30718f1980e0cc3331f3d3000132800c01ff30f4000030d3000132801301ff30f500010230e7000203ffc0f0000132801e01ff30f5000101e0e7000d020040c0000c000c0003b3330003fb000132801901ff30d9000d020040c0000c000c000633300003fb000132801901ff30d9000d020040c7c38ccc7c780f33333e1ffb000132801701ff30d90005020040c6664cfecc0006fd33fb000132801701ff30d90005020040c6660cfecc0006fd33fb000132801701ff30d90009020040c6660cccccfc06fd33fb000132801d03ff300000e0ff00fcfd0009020040c6660cccccc006fd33fb000132802004ff30000080e1000004fd000d020040c6664cccccc40633233333fb000132802004ff30000080e1000004fd000d020040c6638c7c7c78063fc3331ffb000132801504ff30000080e1000004fd0002020040f0000132801504ff30000080e1000004fd000203ffc0f0000132800f04ff30000080e1000004e900013280180dff30000083c006003c000003c7e0ea000004e900013280180dff30000084600e006600000660c0ea000004e900013280180dff3000008060160066663e066180ea000004e9000132801807ff30000080602600fe66020663c0ea000004e900013280180dff30000080c046007e6666066060ea000004e9000132801807ff30000081807f00fe660203e060ea000004e9000132811807ff30000083000600fe6602006060ea000004e9000132801807ff30000086060600fe660200c460ea000004e900013280180dff30000087e60600663e3e0383c0ea000004e9000132801304ff30000080fc000006e7000004e9000132801304ff30000080fc000046e7000004e9000132801304ff30000080fc00003ce7000004e9000132801504fd30000080e1000004fd000203ffc0f0000132801f04f930000080e1000004fd000c020040766660006000600cc0c0fa000132801f04e130000080e1000004fd0007020040c666000060fe0001c0c0fa0001328020048130000080e1000004fd000d020041e66667c3e066638cf8c780fb000132801f0301300000e0ff00fcfd0003020040c6fe66066066664cccccc0fb0001328019010130d90003020040c6fe66066066670cccccc0fb0001328019010130d90003020040c6fe66066066638ccccfc0fb0001328017010130d90003020040c6fe6602606661feccfa0001328019010130d90009020040c6646666606464fecc0040fb0001328019010130d9000d020040c7f86663e078638cf8c780fb000132800e010130d90002020040f0000132800e010130d9000203ffc0f00001328008010130c50001328008010130c50001328008010130c50001328008010130c50001338008010130c500013280160f013000001e0000330000318000007660d300013280160a0130000033000030000030fe0001c060d3000132fc1c1501300000333e3e331c3c798f1f01e663c7c3c7fc3c60d9000132801b0301300000fd3309324631999980c6666664fe660060d9000132801b04013000003ffe330c303e31999980c6666663e66666d8000132801a0301300000fd3308306631999980c667e6fe66007ed8000132801a0301300000fd3308306631999980c66606fe660060d8000132841b0301300000fd3308326631999980c66626fe66016260d9000132881c1501300000333e3e331c3e198f1980c663c663e6663c60d9000132900d010130fe00013030ca000132bc0d010330fe00013030ca0001328408010330c50001328408010f30c50001328408011f30c50001328408013f30c50001328008017f30c5000132800801ff30c5000132fc0e03ff300000e0ff00fce9000132800f04ff30000080e1000004e9000132800f04ff30000080e1000004e9000132800f04ff30000080e1000004e9000132800f04ff30000080e1000004e9000132800f04ff30000080e1000004e9000132801005ff3000008402e2000004e9000132801005ff3000008606e2000004e9000132801308ff300000870e3c7c38e5000004e9000132801308ff300000879e666664e5000004e9000132801308ff30000085f6666670e5000004e9000132801308ff30000084e6666638e5000004e9000132801308ff300000844666661ce5000004e9000132801308ff300000840666664ce5000004e9000132801308ff30000084063c7c38e5000004e9000132801207ff30000080000060e4000004e9000132801207ff30000080000060e4000004e9000132800f04ff30000080e1000004e9000132800f04ff30000080e1000004e9000132800f04ff30000080e1000004e9000132800f04ff30000080e1000004e9000132800f04ff30000080e1000004e9000132800e03ff300000e0ff00fce9000132800801ff30c5000132810801ff30c5000132800801ff30c5000132800801ff30c5000132800c01ff30d6000020f1000132800c01ff30d6000030f1000132800c01ff30d6000038f1000132800c01fd30d600003cf1000132800c01f930d600003ef1000132800c01e130d600003ff1000132800d018130d600013f80f2000132800d010130d600013fc0f2000132800c010130d600003ef1000132800c010130d6000036f1000132800c010130d6000023f1000132800c010130d6000003f1000132800d010130d600010180f2000132800d010130d600010180f20001328008010130c50001328008010130c50001328008010130c50001328008010130c5000132801207013000001c300003fd000006d00001328012070130000032300003fd000006d000013280140d013000003078f1b781998f1b3e60d100013280140d01300000383119c30199999c6660d100013281130c013000001c30f9830199999866d000013281130c013000000e3199830199999866d000013281130c01300000063199830199999866d000013281140d0130000026319983019919986660d100013281140d013000001c18f98181fe0f183e60d10001328108010130c50001328108010130c50001328108010130c50001328008010330c50001328008010330c50001328010010f30e6000007faff0080e90001328010011f30e600001ffaff00e0e90001328010013f30e600003ffaff00f0e90001328010017f30e600007cfa0000f8e9000132801703ff300000ecff00f8fe000071fbff01fe38e9000132801804ff30000080ed000008fe0000f2fb0001013ce9000132801704ff30000080ed000008fe0000e4fa00009ce9000132801704ff30000080ed000008fe0000e8fa00005ce9000132801704ff30000080ed000008fe0000e8fa00005ce9000132801704ff30000080ed000008fe0000e8fa00005ce9000132801704ff30000080ed000008fe0000e8fa00005ce9000132801b04ff30000080ed000008fe0008e800000f18c000005ce9000132801d06ff30000083e3c0ef000008fe0008e8000019998000005ce9000132801d06ff300000866660ef000008fe0004e80000199bfe00005ce9000132801d06ff300000866660ef000008fe0004e80000199efe00005ce9000132801d06ff300000866660ef000008fe0004e80000199cfe00005ce9000132801d06ff300000866660ef000008fe0004e80000199efe00005ce9000132801d06ff300000866660ef000008fe0004e80000199bfe00005ce9000132801d06ff30000083e3c0ef000008fe0008e8000019998000005ce9000132801c05ff3000008060ee000008fe0008e800000f18c000005ce9000132801805ff3000008460ee000008fe0000e8fa00005ce9000132811805ff30000083c0ee000008fe0000e8fa00005ce9000132801704ff30000080ed000008fe0000e8fa00005ce9000132801704ff30000080ed000008fe0000e8fa00005ce9000132801704ff30000080ed000008fe0000e4fa00009ce9000132801804ff30000080ed000008fe0000f2fb0001013ce9000132801804ff30000080ed000008fe000071fbff01fe38e9000132801603ff300000ecff00f8fe00007cfa0000f8e9000132801001ff30e600003ffaff00f0e9000132801001ff30e600001ffaff00e0e9000132801001ff30e6000007faff0080e9000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801fd30c5000132800801f930c5000132800801e130c50001328008018130c50001328008010130c5000132800f04013000003efa000006d0000132800f040130000030fa000006d000013280140d01300000306db3c6c1998f1b3e60d100013280140d013000003071c6670199999c6660d100013280130c013000003c6186660199999866d000013280130c01300000306186660199999866d000013280130c01300000306186660199999866d000013280140d0130000030618666019919986660d100013280140d013000003e6183c601fe0f183e60d10001328008010130c50001328008010130c50001328008010130c50001328008010130c50001328008010130c50001328008010130c50001328008010130c50001328008010130c50001328008010130c5000132800e0301300000ecff00f8dd0001328013040130000080ed000008fd00faffe80001328017040130000080ed000008fe000001fa000080e90001328017040130000080ed000008fe000002fa000040e90001328017040330000080ed000008fe000004fa000020e90001328017040330000080ed000008fe000004fa000020e9000132801b040f30000080fe000060f1000008fe000004fa000020e9000132801b041f30000080fe000060f1000008fe000004fa000020e9000132801f083f300000838d9e1c7cf1000008fe00020400f0fe0002030020e9000132801f087f300000864e233266f1000008fe0002040188fe0002030020e9000132801f08ff300000860c1f3866f1000008fe0008040180f1f0e1e30020e9000132811f08ff300000860c331c66f1000008fe0008040181199993330020e9000132801f08ff300000860c330e66f1000008fe0008040180f99983330020e9000132801f08ff300000864c332666f1000008fe0008040181999983f30020e9000132801f08ff300000838c1f1c66f1000008fe0008040181999983030020e9000132801b04ff30000080ed000008fe0008040189999993130020e9000132801b04ff30000080ed000008fe00080400f0f998e1e30020e9000132801704ff30000080ed000008fe000004fa000020e9000132801704ff30000080ed000008fe000004fa000020e9000132801704ff30000080ed000008fe000004fa000020e9000132801704ff30000080ed000008fe000004fa000020e9000132801704ff30000080ed000008fe000002fa000040e9000132801704ff30000080ed000008fe000001fa000080e9000132801203ff300000ecff00f8fd00faffe8000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801ff30c5000132800801fd30c5000132800801f930c5000132810801e130c5000132800801813fc5ff01f2800801013fc5ff01f2fc070001c400010280070001c400010280070001c4ff01fe840802000020c50000840802000020c50000840802000020c50000850802000020c50000bd0802000020c50000910802000060c500008908020000e0c500008508020000e0c5000081ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-21\par \pard\plain \s3\qj\sb160 \f20 This dialog allows you to set your application and document signatures.  These are both 4-char\-acter quantities, and are described in detail in Inside Macintosh.  If you are going to release your application widely, you will need to register these signatures with Apple (this avoids having dif\-ferent programs using the same signatures).   For your private use, however, you can use any four upper-case letters you like.  For this demo program, Curves, we've chosen CRVS.  Curves will have no documents of its own, so leave the other boxes blank.  Type the name of the application, Curves, in the appropriate box, and anything you like for a "version string".  In the example here, we've put "version 1" which seems to make sense.  The dialog box will now look like this:\par \pard\plain \s16\qc\sb160\keepn \f20 {{\pict\macpict\picw467\pich313\picscaled 1bf000000000015802011101a10064000c574f5244000000000158020101000a000000000158020198004000000000015702000000000001570200000000000157020000000400e0c2000400c0c200070380000080c5000602800001c4001dfc000f0a22000001f033180002080080000820fd00042208888220df001f14000004400010010000018030180004000040001040fd000311100404de00231f00000aa00008220a000181f33c00020820a0002028282220002228888a20a080e10022130000154000101111000183331800040440400010fe44074000111044441111e000231300000a80000a22220001e33318000208a0800008fe2208200022088882222280e10023130000155000101115000183331800040450400004fe4408400011104444115140e100231300000aa000082220000183331800020828800002fe22082000220888822200a0e10023130000054000101111000183331800040410400004fe4408400011104444111040e100231f000002800008220a0001f1f30c0002882020000822282a80000a08888220a080e10002c10002c10002c10002c10002c10002c1ff410200007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe00007ffeff00f0fe00007ffeff04f00000013ffeff01f000410200007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe00007ffeff00e0fe00007ffeff09e00000011fdfffffe00027010000fdfffd00fdfffd00fdfffd00fdfffd00fdfffd00fdfffd00fdfffe0004034f9fffffff0035010000feff00f6fd00feff00f6fd00feff00f6fd00feff00f6fd00feff00f6fd00feff00f6fd00feff00f6fe00040f4f1ffff6ff0036010000feff00dcfd00feff00dcfd00feff00dcfd0003f00fffdcfd00feff00dcfd00feff00dcfd00feff00dcfe00041ece5fffdcff0041010001feff00f8fe000001feff00f8fe000001feff00f8fe000401e007fff8fe000001feff00f8fe000001feff00f8fe000001feff08f8000001e7c4dffff8ff0041010007feff00c0fe000007feff00c0fe000007feff00c0fe000407c003ffc0fe000007feff00c0fe000007feff00c0fe000007feff08c0000007cba0dfffc0ff002a01000ffeff00c0fe00000ffeff00c0fe00000ffeff00c0fe00040fc3c3ffc0fe00000ffeff01c03fe8ff2a01001ffeff00c0fe00001ffeff00c0fe00001ffeff00c0fe00041fc423ffc0fe00001ffeff01c020e800060000c3ff000008010080c50001010008010080c5000101ff0801009fc5ff01f9000801019fc5ff01f90008010198c50001190008010798c50001190008010f98c50001190008011f98c50001190008013f98c5000119000801ff98c5000119000801ff98c5000119000801ff98c5000119000801ff98c5000119000801ff98c5000119000801ff98c5000119000801ff98c5000119000801ff98c5000119000801ff98c5000119002004ff9800000ffb0003c0000006f800003efb0002030003fe000018e9000119001c05ff9800001980f9000006f8000033fb000003fc000018e9000119ff2e12ff980000199999f0f1b038c7cf878f333678c0fc0011331e1c667fc3c7c780e31f3e1e3cccd9e1c6ed000119c02c04ff98000019fd9909c064ccccc8c63338ccc0fc0002333332fd660a63019333332318cce33326ed000119402b04ff98000019fd99088070ccccc7c63330ccfb0002333330fd660a6301c333331f18ccc33380ed000119402d04ff98000019fe9902f98038fecc03c63330fcfb0009333330666667e66300e3fe330418ccc3f1c0ed000119402d04ff98000019fe990281801cfecc03c63330c0fb0002333330fe660306630073fe330418ccc300e0ed000119402d0aff9800001999919989804cfecc04c63330c4c0fc0002333332fe6602266301fd330418ccc31266ed000119402e12ff9800000f1fe198f18038c7ccc7c31f3078c0fc00113e1e1c3e6663c66180e31f331f0c7cc1e1c6ed000119401001ff98f70000c0ec000003e6000119401101ff98f8000108c0ec000023e6000119401101ff98f800010780ec00001ee6000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119402704ff9800007ffbff0080f500faff0200001ffbff02e00003fbff03fc00007ffbff0480000019402a04ff98000040fb000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402a04ff98000040fb000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402a04ff98000040fb000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402a04ff98000040fb000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402a04ff98000040fb000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402d0bfe98000041e3e331c0000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402d0bfc9800004313333320000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402d07f098000043033333fe000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402d0bc09800004303333380000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402d0b809800004303e331c0000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402d0b0098000043033330e0000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402d0b009800004303333060000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402d0b009800004313332260000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402d0b0098000041e333c1c0000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402a040098000040fb000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402a040098000040fb000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402a040098000040fb000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402a040098000040fb000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402a040098000040fb000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402a040098000040fb000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402a040098000040fb000080f5000080fc000301000010fb0002200002fb000304000040fb000480000019402704009800007ffbff0080f500faff0200001ffbff02e00003fbff03fc00007ffbff04800000194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010198c50001194008010198c50001194014080798000019800000c0fe0001c018d10001194010050f9800001980fb0000c0d00001194017101f980000198f1b38c78f8071e6d9f0f980d40001194017103f98000019999c64ccccc0c8c719999980d400011940160fff98000019999870ccccc0e0c6199998d300011940160fff980000199f9838ccccc070c6199998d300011940160fff9800001998181cccccc038c6199998d3000119401710ff9800001918984cccccc098c619999980d4000119401710ff9800001e0f1838c78cc070661998f980d4000119400c01ff98f4000018d3000119401301ff98f500010118e7000201ffe0f0000119401e01ff98f40000f0e7000e01002060000600060001d999800180fc000119401a01ff98d9000e010020600006000600031998000180fc000119401a01ff98d9000e01002063e1c6663e3c0799999f0f80fc000119401a01ff98d90005010020633326fe66010319fe990080fc000119401a01ff98d90005010020633306fe66010319fe990080fc000119401a01ff98d9000a01002063330666667e0319fe990080fc000119402104ff9800007fe1ff00fefd000a0100206333066666600319fe990080fc000119402104ff98000040e1000002fd000e010020633326666662031991999980fc000119402104ff98000040e1000002fd000e0100206331c63e3e3c031fe1998f80fc000119401504ff98000040e1000002fd0002010020f0000119401504ff98000040e1000002fd000201ffe0f0000119400f04ff98000040e1000002e9000119401604ff98000040fe000318000006e8000002e9000119401304ff98000040fb00000ee8000002e900011940160bff9800004331e36718f1f006e8000002e900011940160bff9800004333338c99999806e8000002e900011940160bff9800004333330e19999806e8000002e900011940160bff9800004333f30719999806e8000002e900011940160bff9800004333030399999806e8000002e900011940160bff9800004323130999999806e8000002e900011940160bff98000043c1e30718f19806e8000002e9000119400f04ff98000040e1000002e9000119400f04ff98000040e1000002e9000119400f04ff98000040e1000002e9000119401504fe98000040e1000002fd000201ffe0f0000119401f04fc98000040e1000002fd000c0100203b333000300030066060fa000119401f04f098000040e1000002fd00070100206333000030fe00016060fa000119402004c098000040e1000002fd000d010020f33333e1f03331c67c63c0fb000119402004809800007fe1ff00fefd000301002063fe330630333326666660fb0001194019010098d9000301002063fe330630333386666660fb0001194019010098d9000301002063fe3306303331c66667e0fb0001194018010098d9000301002063fe3305303330e66666fa0001194019010098d9000901002063323333303232fe660020fb0001194019010098d9000d01002063fc3331f03c31c67c63c0fb000119400e010098d90002010020f0000119400e010098d9000201ffe0f00001194008010098c50001194008010098c50001194008010098c50001194008010098c5000119c008010098c500011940160f009800000f000019800018c000003b30d300011940160a0098000019800018000018fe00016030d30001197f1c1500980000199f1f198e1e3cc78f80f331e3e1e3fe1e30d9000119401b040098000019fd99082318ccccc063333332fe330030d9000119401b04009800001ffe990c981f18ccccc063333331f33333d8000119401b040098000019fe9908983318ccccc06333f3fe33003fd8000119411b040098000019fe9908983318ccccc0633303fe330030d8000119421b040098000019fd99073318ccccc0633313fe33013130d9000119441c1500980000199f1f198e1f0cc78cc06331e331f3331e30d9000119480d010098fe00011818ca0001195e0d010198fe00011818ca0001194208010198c50001194208010798c50001194208010f98c50001194308011f98c50001194008013f98c5000119400801ff98c50001197f0f04ff9800007fe1ff00fee9000119400f04ff98000040e1000002e9000119400f04ff98000040e1000002e9000119401304ff98000040fc000040e7000002e9000119401304ff98000040fc000040e7000002e9000119401304ff98000040fc000040e7000002e9000119401405ff98000041e0fd000040e7000002e9000119401405ff9800004310fd000040e7000002e900011940150aff9800004303336cc78740e7000002e900011940150aff9800004303338cccccc0e7000002e900011940150aff9800004303330cccce40e7000002e900011940150aff9800004303330ccfc740e7000002e900011940150aff9800004303330ccc03c0e7000002e900011940150aff9800004313330c8c49c0e7000002e900011940150aff98000041e1f30f078740e7000002e9000119401304ff98000040fc000040e7000002e9000119401304ff98000040fc000040e7000002e9000119401304ff98000040fc000040e7000002e9000119401304ff98000040fc000040e7000002e9000119400f04ff98000040e1000002e9000119400f04ff98000040e1000002e9000119400f04ff98000040e1000002e9000119400f04ff9800007fe1ff00fee9000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801fe98c5000119400801fc98c5000119400801f098c5000119400801c098c50001194008018098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c5000119401308009800000e18000180fe000003d0000119401308009800001918000180fe000003d000011940140d00980000183c78dbc0ccc78d9f30d100011940140d009800001c188ce180ccccce3330d1000119401308009800000e187cc180fecc0033d0000119401308009800000718ccc180fecc0033d0000119401308009800000318ccc180fecc0033d000011940140d009800001318ccc180cc8ccc3330d100011940140d009800000e0c7cc0c0ff078c1f30d10001194008010098c50001194008010098c50001194008010098c50001194008010198c50001194008010198c50001194010010798e6000003faff00c0e90001194010010f98e600000ffaff00f0e90001194010011f98e600001ffaff00f8e90001194010013f98e600003efa00007ce9000119401704ff9800007fedff00fcfe000038faff001ce9000119401704ff98000040ed000004fe000079fa00009ee9000119401704ff98000040ed000004fe000072fa00004ee9000119401704ff98000040ed000004fe000074fa00002ee9000119401704ff98000040ed000004fe000074fa00002ee9000119401704ff98000040ed000004fe000074fa00002ee9000119401704ff98000040ed000004fe000074fa00002ee9000119401b04ff98000040ed000004fe0008740000078c6000002ee9000119401d06ff98000041f1e0ef000004fe00087400000cccc000002ee9000119402106ff980000433330ef000004fe00087400000ccd8000002efc000080ef000119402106ff980000433330ef000004fe00047400000ccffe00002efc0000c0ef000119402106ff980000433330ef000004fe00047400000ccefe00002efc0000e0ef000119402106ff980000433330ef000004fe00047400000ccffe00002efc0000f0ef000119402106ff980000433330ef000004fe00087400000ccd8000002efc0000f8ef000119402106ff98000041f1e0ef000004fe00087400000cccc000002efc0000fcef000119402005ff9800004030ee000004fe0008740000078c6000002efc0000feef000119401c05ff9800004230ee000004fe000074fa00002efc0000ffef000119401c05ff98000041e0ee000004fe000074fa00002efc0000f8ef000119401b04ff98000040ed000004fe000074fa00002efc0000d8ef000119401b04ff98000040ed000004fe000074fa00002efc00008cef000119401b04ff98000040ed000004fe000072fa00004efc00000cef000119401b04ff98000040ed000004fe000079fa00009efc000006ef000119401b04ff98000040ed000004fe000038faff001cfc000006ef000119401704ff9800007fedff00fcfe00003efa00007ce9000119401001ff98e600001ffaff00f8e9000119401001ff98e600000ffaff00f0e9000119401001ff98e6000003faff00c0e9000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801fe98c5000119400801fc98c5000119400801f098c5000119400801c098c50001194008018098c5000119400f04009800001ffa000003d0000119400f040098000018fa000003d000011940140d009800001836d9e360ccc78d9f30d100011940140d009800001838e33380ccccce3330d1000119401308009800001e30c33300fecc0033d0000119401308009800001830c33300fecc0033d0000119401308009800001830c33300fecc0033d000011940140d009800001830c33300cc8ccc3330d100011940140d009800001f30c1e300ff078c1f30d10001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c50001194008010098c5000119400f04009800007fedff00fcdd0001194017040098000040ed000004fd00007ffbff0080e90001194017040098000040ed000004fd000080fb000040e90001194017040098000040ed000004fe000001fa000020e90001194017040198000040ed000004fe000002fa000010e90001194017040198000040ed000004fe000002fa000010e9000119401b040798000040fe000030f1000004fe000002fa000010e9000119401b040f98000040fe000030f1000004fe000002fa000010e9000119401f081f98000041c6cf0e3ef1000004fe0002020078fe0002018010e9000119401f083f9800004327119933f1000004fe00020200c4fe0002018010e9000119401f08ff98000043060f9c33f1000004fe00080200c078f870f18010e9000119401f08ff9800004306198e33f1000004fe00080200c08cccc9998010e9000119401f08ff9800004306198733f1000004fe00080200c07cccc1998010e9000119401f08ff9800004326199333f1000004fe00080200c0ccccc1f98010e9000119401f08ff98000041c60f8e33f1000004fe00080200c0ccccc1818010e9000119401b04ff98000040ed000004fe00080200c4ccccc9898010e9000119401b04ff98000040ed000004fe00080200787ccc70f18010e9000119401704ff98000040ed000004fe000002fa000010e9000119401704ff98000040ed000004fe000002fa000010e9000119401704ff98000040ed000004fe000002fa000010e9000119401704ff98000040ed000004fe000002fa000010e9000119401704ff98000040ed000004fe000001fa000020e9000119401704ff98000040ed000004fd000080fb000040e9000119401704ff9800007fedff00fcfd00007ffbff0080e9000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801ff98c5000119400801fe98c5000119400801fc98c5000119400801f098c5000119400801c09fc5ff01f9400801809fc5ff01f97f08010080c50001014008010080c500010140060000c3ff00430802000010c50000420802000010c50000420802000010c50000420802000010c500005e0802000010c50000480802000030c50000440802000070c50000420802000070c500004108020000f0c500004008020000f0c5000040ff}}\par \pard\plain \s251\qc\sb80 \b\f20\fs20 Figure\~I-22\par \pard\plain \s3\qj\sb160 \f20 We explained the "start word" and the "error word" in the last lesson.   The dialog suggests the names GO and CRASH respectively, which are, in fact, the names of the words we've used, so we can leave them unchanged.\par \pard \s3\qj\sb160 The way these words are handled in an installed application is quite simple, thanks to the mecha\-nism of vectors, which we introduced in lesson 20.  A vector is basically the same as what some Forth systems call a DEFERred word.  A vector contains an address.  You call a vector in the same way as for an ordinary word, but it is the word where the address points which is actually executed.  The address can be changed at any time.  The start word and the error word addresses are put into two vectors, QuitVec and AbortVec.\par \pard \s3\qj\sb160 QuitVec is executed whenever the word QUIT is executed, which is at the start of each time around the Mops interpretation loop (the loop which waits for keyboard input, then executes it).  Normally QuitVec does nothing (it points to NULL), but in an installed application it is set to point to the start word.  The start word should loop indefinitely, handling incoming clicks or whatever, and never terminate itself.  Of course the application will eventually terminate, but this should be in response to some user action which is being handled by some word called from the start word\emdash what we mean is that the start word should not exit through its ending semicolon.  If it did, the rest of QUIT would be executed, which would attempt to interpret keyboard input as Mops words.  This is definitely not what you want in an installed application\emdash for one thing, the Mops window would probably not be there.\par \pard \s3\qj\sb160 AbortVec is called when Mops detects an error which normally gives a Mops error message.  Like QuitVec it initially points to NULL.  In an installed application you don't want your users to see a stack dump (and anyway the Mops window probably wouldn't be there at all), so your error word should do whatever is appropriate for your application, and perhaps then execute BYE to quit to the Finder.  Like the start word, it shouldn't exit through its final semicolon, since that would lead to Mops trying to give a Mops-style error message and stack dump.\par \pard \s3\qj\sb160 Now to continue with the dialog box.  Leave "Include fWind" and "fWind visible" unchecked.  These refer to a simple window for keyboard input and text output which can be used for "quick and dirty" applications.  (This is actually the window used by the basic nucleus before the rest of the Mops system is loaded.)  Curves makes no use of this window, since it has its own, so by leaving these boxes unchecked, we are telling Install that it can omit the resources for fWind.\par \pard \s3\qj\sb160 Now that all the relevant parts of the dialog have been filled in, click OK.  After a few seconds you will be returned to the Finder.  If you now look in the "Mops \'c4" folder, you will find a new icon named "Curves".  This is your installed application.\par \pard \s3\qj\sb160 But the application still isn't ready to run, since the menu resources haven't been included in it.  This can be done with ResEdit.  Start ResEdit and open demo.rsrc, or just double-click demo.rsrc.  Do "Select All", then Copy.  Then (still in ResEdit), open Curves, and do Paste.  Then choose Save to save the updated copy of Curves, and quit ResEdit.\par \pard \s3\qj\sb160 Your new application still won't have a proper icon\emdash it will have just the generic "application" icon\emdash but otherwise it is finished.  You can double-click it and run it.  We will discuss icons later in part II, chapter 5.\par \pard\plain \s254\sb240\keepn \b\f21 Where to go from here\par \pard\plain \s3\qj\sb160 \f20 You've already had quite an exposure to Mops and object oriented programming.  You've seen how Mops interacts with the Macintosh Toolbox to simplify the way your programs communi\-cate with the Mac.  Now, it's time for you to start experimenting with programs of your own.  Several chapters in Part II should point you in the right direction with details of the finer points of Mops programming on the Macintosh.\par \pard \s3\qj\sb160 It is important that you have an acquaintance with the powers of the predefined classes and the words in the Mops dictionary.  While there is more to it than a casual reading will ever reveal, you should spend some time studying the methods of the predefined classes as detailed in Part III of this manual to discover what building blocks are available to you.  You should also browse through the Mops Index and Glossary in Part IV, where you'll likely discover many built-in words that give you ideas about the operations you can spec\-ify for methods.\par \pard \s3\qj\sb160 A vast amount of reference material is available in this manual and in the various Mops files.  The best way to make use of it all is to start defining some classes on your own and experiment sending messages to the objects you create.  Just as with a spoken language, the more you prac\-tice with Mops the faster you'll be comfortable with it.\par }