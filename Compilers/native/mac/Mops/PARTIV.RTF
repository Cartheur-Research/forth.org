{\rtf1\mac\deff2 {\fonttbl{\f0\fswiss Chicago;}{\f2\froman New York;}{\f3\fswiss Geneva;}{\f4\fmodern Monaco;}{\f6\fdecor London;}{\f11\fnil Cairo;}{\f13\fnil Zapf Dingbats;}{\f14\fnil Bookman;}{\f15\fnil N Helvetica Narrow;}{\f16\fnil Palatino;}{\f18\fnil Zapf Chancery;}{\f20\froman Times;}{\f21\fswiss Helvetica;}{\f22\fmodern Courier;}{\f23\ftech Symbol;}{\f33\fnil Avant Garde;}{\f34\fnil New Century Schlbk;}{\f128\fnil Boston IIx;}{\f192\fnil Mangia;}{\f220\fnil MiniBoston IIx;}{\f221\fnil MicroBoston IIx;}{\f222\fnil Line & Lead;}{\f1024\fnil American Heritage;}{\f1025\fnil ClosedCaption2;}{\f1026\fnil XPGildedCD-IN;}{\f1133\fnil Century Cond;}{\f1148\fnil XPCompacta;}{\f1202\fnil XPOxfordText-Normal;}{\f1238\fnil XPCopperhead;}{\f1269\fnil Futena;}{\f1397\fnil XPCabotOpen;}{\f1639\fnil XPRadial;}{\f1792\fnil Lucida Bright;}{\f2000\fnil Garamond Narrow;}{\f2007\fnil Delphian;}{\f2017\fnil Lubalin Graph;}{\f2024\fnil Machine;}{\f2029\fnil Nadianne;}{\f2036\fnil Old English Text;}{\f2038\fnil Onyx;}{\f2040\fnil Oxford;}{\f2046\fnil Swing;}{\f2052\fnil Zeal;}{\f2091\fnil Cursive-Elegant;}{\f2096\fnil XPKaleph-Bold;}{\f2121\fnil Garamond;}{\f2247\fnil XPGildedCD;}{\f2385\fnil XPJasmine;}{\f2429\fnil XPSchooner;}{\f2435\fnil Fruit;}{\f2490\fnil DeltaSymbol;}{\f2503\fnil Technical;}{\f2515\fnil MT Extra;}{\f2686\fnil Caslon;}{\f2689\fnil Trade Condensed;}{\f2799\fnil XPTechno;}{\f2835\fnil XPFortunaCD;}{\f2999\fnil eWorld Tight;}{\f4950\fnil TTYFont;}{\f7715\fnil XPFortuna-XB;}{\f9840\fnil Espy Sans;}{\f9842\fnil Espy Sans Bold;}{\f10840\fnil Klang MT;}{\f10890\fnil Script MT Bold;}{\f10897\fnil Old English Text MT;}{\f10909\fnil New Berolina MT;}{\f10957\fnil Bodoni MT Ultra Bold;}{\f10967\fnil Arial MT Condensed Light;}{\f14811\fnil Helvetica Compressed;}{\f14974\fnil Helvetica Black;}{\f15011\fnil Gill Sans Condensed Bold;}{\f32525\fnil VT100;}}{\colortbl\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;}{\stylesheet{\s231\fi-360\li1440\ri1080\tqdec\tldot\tx8640 \f20\fs20 \sbasedon232\snext0 toc 3;}{\s232\fi-360\li1080\ri1080\tqdec\tldot\tx8640 \f20\fs20 \sbasedon233\snext0 toc 2;}{\s233\li720\ri1080\sb360\tqdec\tx8640 \b\f20 \sbasedon0\snext0 toc 1;}{\s242 \f20 \sbasedon0\snext0 page number;}{\s243\tx720\tqr\tx8640\tqr\tx9360 \f20 \sbasedon244\snext243 footer;}{\s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 \sbasedon0\snext244 header;}{\s250\sb120\keepn\tx5040 \b\f21 \sbasedon252\snext0 heading 6;}{\s251\qc\sb120\tx2160 \b\f21 \sbasedon252\snext0 heading 5;}{\s252\sb120\keepn\tx2160 \b\f21 \sbasedon253\snext0 heading 4;}{\s253\li720\sb120\keepn \b\f21 \sbasedon254\snext0 heading 3;}{\s254\sb240\keepn \b\f21 \sbasedon255\snext0 heading 2;}{\s255\qr\sb240\sa720\keepn \b\f21\fs36 \sbasedon0\snext0 heading 1;}{\f20 \sbasedon222\snext0 Normal;}{\s1\sb240\keepn \b\f20 \sbasedon0\snext3 head;}{\s3\qj\sb120 \f20 \sbasedon0\snext3 body;}{\s4\li720\sb120 \f22\fs20 \sbasedon0\snext4 example;}{\s5\li720 \f22\fs20 \sbasedon4\snext5 code;}{\s6\sb80 \f15\fs20 \sbasedon0\snext6 Instruction table;}{\s7 \f15\fs20 \sbasedon0\snext7 notes;}{\s8\ri-3960\sb240\keepn \b\f20 \sbasedon1\snext8 Notes head;}{\s9\qc\sb120\keepn \f20 \sbasedon3\snext9 figure graphic;}{\s10\sb240\keepn \b\f21 \sbasedon253\snext10 subhead (non TOC);}{\s11\qj\sb120 \f20 \sbasedon0\snext11 preamble;}}{\info{\title Part IV-Assembler}{\*\verscomm Converted by John Robinson}}\margl1080\margr1080\margb1080\facingp\gutter720\widowctrl\ftnbj\ftnrestart\fracwidth \sectd \pgnlcrm\linemod0\linex0\cols1\colsx0\endnhere {\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 \par \par \par \pard \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \par }\pard\plain \qc \f20 {\b\fs96 Mops\par }\pard \qc {\b\i\fs28 Mike's Object-oriented Programming System\par }\pard \qc {\b\fs48 \par Version 2.6\par }\pard \qc\posy3601\dxfrtext180 {\b\fs96 Part IV\par }\pard \qc\posy3601\dxfrtext180 {\b\fs48 Assembler\par }\pard\plain \s11\qj\sb120\posyb\dxfrtext180 \f20 Mops is an object-oriented programming system, derived from the Neon language developed by Charles Duff and sold by Kriya, Inc.  Kriya have discontinued support for Neon, and have released all the source code into the public domain, retaining only the ownership of the name Neon.\par \pard \s11\qj\sb120\posyb\dxfrtext180\tx3240 Mops implemented by:\tab Michael Hore\par Able assistance from:\tab Doug Hoffman\par \pard \s11\qj\posyb\dxfrtext180\tx3240 \tab Greg Haverkamp\par \tab Xan Gregg\par \pard \s11\qj\sb120\posyb\dxfrtext180\tx3240 Documentation updated:\tab Version 2.6, June1995\par Documentation formatted by:\tab Craig Treleaven\par \pard\plain \s10\sb240\keepn \b\f21 \page Printing this document\par \pard\plain \s11\qj\sb120 \f20 This document is in Microsoft Word Version 5.1 format and uses the fonts Times, Courier, and Helvetica, only.  It is formatted using the Laserwriter 7 driver for US Letter paper, portrait orien\-tation, with fractional widths enabled.  If you want to print any other way, you will probably need to repaginate and regenerate the table of contents.  See below.\par \pard \s11\qj\sb120 Almost every paragraph in this document is formatted using a Word style.  Formatting is consis\-tent throughout and can be reformatted in moments this way.  \par \pard\plain \s10\sb240\keepn \b\f21 Viewing on-line\par \pard\plain \s11\qj\sb120 \f20 Of course, you can read the whole manual on-screen.  Word\rquote s Find\'c9 command can help to locate items of interest.  One other technique is useful but not well known.  Use the Outline View and click the \ldblquote 2\rdblquote  in the ruler at the top of the screen.  Word will then show the chapters and the sub-headings within.  Whichever line is at the top of the window in outline view will become the line at the top of the window when you switch back to Normal View.  By scrolling in Outline View, you can quickly find the section of interest and position the window for reading in Normal View.  \par \pard\plain \s10\sb240\keepn \b\f21 Two-sided printing\par \pard\plain \s11\qj\sb120 \f20 As shipped, this document is formattted for 2-sided printing to save paper.  If you haven\rquote t printed two-sided documents with your printer before, you might want to practise with the first few pages before sending the whole thing.  On most printers, you need to use Word\rquote s option to print first the odd numbered pages (in the Print\'c9 dialog), reload the paper and then print the even numbered pages.  \par \pard\plain \s10\sb240\keepn \b\f21 Single-sided printing\par \pard\plain \s11\qj\sb120 \f20 If you don\rquote t want to bother with two-sided printing, use the Document dialog and make the Gutter margin zero.  If you adjust the Left and Right margins so the printable width is still 6.5 inches, the page breaks should stay in the same places.  Blank pages may pop out here and there as all chapters start on an odd-numbered page.  \par \pard\plain \s10\sb240\keepn \b\f21 A4 Paper\par \pard\plain \s11\qj\sb120 \f20 If you select A4 paper in the Page Setup\'c9 dialog, the page breaks will change.  Regenerate the table of contents, as below.  As far as I can tell, the paragraph styles all do the right thing and ajust to the paper width.  Well, all except one:  the header on odd-numbered pages will extend a quarter inch into the margin because the tab stop is at 6.5 inches.  Redefine the Header style to set it to 6.25, if you feel the need.  \par \pard\plain \s10\sb240\keepn \b\f21 Table of Contents\par \pard\plain \s11\qj\sb120 \f20 Use the Table of Contents\'c9 dialog to col\-lect headings from level 1 to level 3 for the Table of Contents.  Figure captions have Heading 5 style, but I didn\rquote t see a reason to create a table of figures.  Similarly, the instructions in Chapter 3 have Heading 4 style and the error codes in the appendix have Heading 6 style.  \par \pard\plain \li1440\tx2700\tqr\tx6480 \f20 \sect \sectd \sbkodd\pgnlcrm\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 \par \par \par \pard \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \par }{\headerf \pard\plain \s244\qc\tx720\tqr\tx8640\tqr\tx9360 \f20 {\b\f21\fs36 \par Contents}\par }\pard\plain \s233\li720\ri1080\sb360\tqdec\tx8640 \b\f20 Chapter 1\emdash Using the Assembler\tab 1\par \pard\plain \s232\fi-360\li1080\ri1080\tqdec\tldot\tx8640 \f20\fs20 About this chapter\tab 1\par Getting started\tab 1\par Recompiling the Assembler\tab 1\par Assembler colon definitions\tab 1\par Assembler method definitions\tab 2\par Accessing the dictionary\tab 2\par Executing Mops-defined words\tab 3\par Toolbox calls\tab 4\par Syntax\tab 5\par \pard\plain \s233\li720\ri1080\sb360\tqdec\tx8640 \b\f20 Chapter 2\emdash Registers and Addressing Modes\tab 7\par \pard\plain \s232\fi-360\li1080\ri1080\tqdec\tldot\tx8640 \f20\fs20 About this chapter\tab 7\par Registers\tab 7\par \pard\plain \s231\fi-360\li1440\ri1080\tqdec\tldot\tx8640 \f20\fs20 Data Registers\tab 7\par Address Registers\tab 7\par Uses of Data and Address Registers\tab 7\par \pard\plain \s232\fi-360\li1080\ri1080\tqdec\tldot\tx8640 \f20\fs20 Condition Codes\tab 10\par \pard\plain \s231\fi-360\li1440\ri1080\tqdec\tldot\tx8640 \f20\fs20 Interrupt Mask\tab 10\par Supervisor Bit\tab 10\par Trace Bit\tab 10\par \pard\plain \s232\fi-360\li1080\ri1080\tqdec\tldot\tx8640 \f20\fs20 Data Addressing Modes\tab 10\par \pard\plain \s231\fi-360\li1440\ri1080\tqdec\tldot\tx8640 \f20\fs20 Addressing Modes\tab 11\par Data Register Direct\tab 11\par Address Register Direct\tab 11\par Other Register Direct\tab 11\par Address Register Indirect\tab 11\par Address Register Indirect with PostIncrement\tab 11\par Address Register Indirect with PreDecrement\tab 12\par Address Register Indirect with Displacement\tab 12\par Address Register Indirect with Displacement and Index\tab 12\par Program Counter Indirect with Displacement\tab 12\par Program Counter Indirect with Displacement and Index\tab 12\par Absolute Short Address\tab 12\par Absolute Long Address\tab 12\par Immediate Data\tab 12\par Implicit Reference\tab 13\par \pard\plain \s233\li720\ri1080\sb360\tqdec\tx8640 \b\f20 Chapter 3\emdash Instructions\tab 15\par \pard\plain \s232\fi-360\li1080\ri1080\tqdec\tldot\tx8640 \f20\fs20 About this chapter\tab 15\par Motorola 68000 Instructions\tab 15\par Instruction Descriptions\tab 19\par \pard\plain \s233\li720\ri1080\sb360\tqdec\tx8640 \b\f20 Appendix\emdash Error Messages\tab 27\par \pard\plain \s232\fi-360\li1080\ri1080\tqdec\tldot\tx8640 \f20\fs20 About this Appendix\tab 27\par \pard\plain \li1440\tx2700\tqr\tx6480 \f20 \sect \sectd \sbkodd\pgnrestart\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 IV-{\chpgn }\tab {\f21 Mops Assembler\par }}{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 \tab \tab Chapter 1\emdash Using the Assembler\tab IV-{\chpgn }\par }{\headerf \pard\plain \s244\tx720\tqr\tx8640\tqr\tx9360 \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Chapter 1\emdash Using the Assembler\par \pard\plain \s254\sb240\keepn \b\f21 About this chapter\par \pard\plain \s3\qj\sb120 \f20 With the Mops Assembler module you can write colon definitions and method definitions in assembly code and you can also reference Mops data and executable words.  This chapter explains how the assembler interfaces with Mops.  The various Macintosh models use a Motorola 68000, 68020, 68030 or 68040 microprocessor, and the assembler syntax is based on standard 68000 assembly language.  This chapter is not a tutorial and assumes a basic knowledge of 680x0 assembly programming.  We recommend you obtain the User's Manual for your particular microprocessor, published by Motorola.\par \pard \s3\qj\sb120 Only the 68000 instruction set is supported by the Assembler.  The 68020 and later have some additional instructions and addressing modes.  If you were to use these, however, your program would not run on earlier Macs which have a 68000 processor (Mac Plus, SE, Classic, and PowerBook 100).\par \pard\plain \s1\sb240\keepn \b\f20 *** WARNING ***\par \pard\plain \s3\qj\sb120 \f20 While the Assembler gives you absolute control over the machine, it may give you problems in when (not if) you want to run on Power Macs.  Your 680x0 code, assembled with this assembler, will only be able to run under emulation on the Power Mac, which means that later when we have a native Power Mac version of Mops, you would have to make a mixed-mode call to your assembled code.  This will be far slower than if you had written the code in high-level Mops to start with.  Mops code on the 680x0 is quite fast anyway, so you should really only be using assembly code if you are doing some very low-level machine-specific things.  You may have perfectly good reasons for doing this, and if so, fine.\par \pard\plain \s254\sb240\keepn \b\f21 Getting started\par \pard\plain \s3\qj\sb120 \f20 Like most assemblers, the Mops Assembler is a two pass assembler.  It does not run interactively.  Assembly code must be in a source file.  The normal Mops "//" load command will load and assemble it.\par \pard\plain \s254\sb240\keepn \b\f21 Recompiling the Assembler\par \pard\plain \s3\qj\sb120 \f20 The assembler is a standard Mops module, called AsmMod.  It may be recompiled in the usual way, namely \par \pard\plain \s4\li720\sb120 \f22\fs20 compile: asmMod\par \pard\plain \s3\qj\sb120 \f20 The source file AsmMod.txt, which is compiled by the above command, consists of a series of // commands to load the actual assembler source files.  These are located in the folder Asm Source, in the Mops Source folder.\par \pard\plain \s254\sb240\keepn \b\f21 Assembler colon definitions\par \pard\plain \s3\qj\sb120 \f20 To write a colon definition with the assembler, just use ":code" for ":" and ";code" for ";".  The name of the new word follows the ":code" on the same line.\par \pard\plain \s4\li720\sb120 \f22\fs20 Example:\par \pard\plain \s5\li720 \f22\fs20 :code demo1\tab \\ adds two numbers and puts the sum onto the stack\line \tab move.l\tab #4,D0\tab \tab \\ puts 4 into register D0\line \tab add.l\tab #8,D0\tab \tab \tab \\ adds 8 to register D0\line \tab move.l\tab D0,-(A6)\tab \\ pushes contents of register D0 onto data\line \tab \tab \tab \\  stack\line ;code\par \par demo1\par . cr\par 12\par \pard\plain \s254\sb240\keepn \b\f21 Assembler method definitions\par \pard\plain \s3\qj\sb120 \f20 To write a method definition with the assembler, just use ":mcode" for ":m" and ";mcode" for ";m".  The name of the new selector follows the ":mcode" on the same line.  In the following example, the "put:" and the "asmput:" of class demo2 are synonymous, as are the "get:" and the "asmget:".  You will see that in a method, the base address of the current object is in register A2.  See Chapter 2 for more information on addressing modes and Mops's usage of registers.\par \pard\plain \s4\li720\sb120 \f22\fs20 Example:\par \pard\plain \s5\li720 \f22\fs20 \par :class DEMO2  super\{ object \}\par \par    var int1\par \par :m PUT:   put: int1  ;m\par \par :m GET:   get: int1  ;m\par \par :mcode  ASMGET:\par \tab move.l\tab (A2),-(A6)\par ;mcode\par \par :mcode  ASMPUT:\par \tab move.l\tab (A6)+,(A2)\par ;mcode\par \par ;class\par \par demo2 test2\par {\f20 \par }put: test2\par asmget: test2 . cr\par 26\par 34 asmput: test2\par get: test2 . cr\par 34\par \pard\plain \s254\sb240\keepn \b\f21 Accessing the dictionary\par \pard\plain \s3\qj\sb120 \f20 There is a special syntax in the Mops Assembler that obtains the address of a word in the dictionary, and assembles an An-relative memory reference.  An will be A3, A4 or A5 depending on exactly where  the addressed word  is in the dictionary.  The assembler looks after these details.  The syntax is "dic[name]".  If the word in the dictionary is a Mops object, you can obtain the address of the beginning of the object's ivars with "dicobj[name]".  The following example shows this usage, and also how an assembler defined word (demo3) can be accessed in Mops just like any regular definition.\par \pard\plain \s4\li720\sb120 \f22\fs20 var\tab FUN\par \pard\plain \s5\li720 \f22\fs20 0\tab value\tab AVALUE\par \par :code demo3\par \tab move.l\tab #1234,dic[avalue]\par \tab moveq\tab \tab #10,D0\par \tab move.l\tab D0,dicobj[fun]\par ;code\par \par : test3\par    1  -> avalue   0 put: fun\par    demo3\par    avalue . cr  get: fun . cr  ;\par \par test3\par 1234\par 10\par \pard\plain \s3\qj\sb120 \f20 The following example shows an array being accessed with dicobj[name].  Five long words of data starting at the absolute address of the array "joe" plus 6 is moved to five registers.  The contents of the five registers are then pushed onto the stack.  The displacement of 6 is necessary because the first 6 bytes of an array are for record keeping.\par \pard\plain \s4\li720\sb120 \f22\fs20 5 array joe\par \pard\plain \s5\li720 \f22\fs20 \par :code demo4\par \pard \s5\li720\tx2160 \tab lea\tab dicobj[joe],A0\par \tab movem.l\tab 6(A0),D0-D2/A0-A1\par \tab movem.l\tab D0-D2,A0-A1-(A6)\par \pard \s5\li720 ;code\par \par : test4\par    7 fill: joe\par    demo4\par    . . . . . cr  ;\par \pard\plain \s4\li720\sb120 \f22\fs20 {\f21 \par }\pard\plain \s5\li720 \f22\fs20 test4\par 7 7 7 7 7\par \pard\plain \s3\qj\sb120 \f20 Alternatively, the first two lines of demo4 could have been written:\par \pard\plain \s4\li720\sb120 \f22\fs20 lea\tab 6(dicobj[edmund]),A0\par \pard\plain \s5\li720 \f22\fs20 movem.l\tab (A0),D0-D2/A0-A2\par \pard\plain \s3\qj\sb120 \f20 As you can see from this example, you can add a displacement to a dictionary address.  This displacement is incorporated at compile time into the displacement assembled into the instruction.\par If you require a PC-relative mode to be generated (which might happen, for example, in an interrupt routine where the A registers aren't set up for Mops when the code executes), then use e.g.\par \pard\plain \s4\li720\sb120 \f22\fs20 MOVE.L\tab rel[name],D0\par \pard\plain \s3\qj\sb120 \f20 Note that a memory store or test can't use this mode on a 68000 processor, but can on a 68020 or later.\par \pard\plain \s254\sb240\keepn \b\f21 Executing Mops-defined words\par \pard\plain \s3\qj\sb120 \f20 Words defined with ":code" become normal Mops words in every respect.  All Mops words are called with a JSR or BSR instruction, as in this example:\par \pard\plain \s4\li720\sb120 \f22\fs20 :code demo5\par \pard\plain \s5\li720 \f22\fs20 \tab move.l\tab #55,-(A6)\par \tab jsr\tab dic[dup]\par \par : test5  demo5 . . cr  ;\par \par test5\par 55 55\par \pard\plain \s3\qj\sb120 \f20 In this example, you could equally well have used\par \pard\plain \s4\li720\sb120 \f22\fs20 bsr\tab dic[dup]\par \pard\plain \s3\qj\sb120 \f20 provided dup was not more than 32K away in the dictionary.\par As all code called with JSR/BSR, Mops definitions must return with an RTS instruction.  However you don't need to put RTS explicitly at the end of your assembly definitions, since when the Assembler encounters ;code or ;mcode it always assembles an RTS.  If, however, you have a routine which returns from the middle, you will have to put RTS there.\par \pard\plain \s254\sb240\keepn \b\f21 Toolbox calls\par \pard\plain \s3\qj\sb120 \f20 The Mops Assembler simplifies doing register based toolbox calls.  To do a toolbox call, have the needed parameters in the proper locations (registers or the data stack), use "call" as the opcode and the toolbox name as the operand.  There are many examples of toolbox calls in the floating point code.  Details on toolbox calling can be found in your Mops manual and in {\i Inside Mac}.  The following example tests two strings to find if they are equal.  {\i Inside Mac}  describes which parameters go into which registers.\par \pard\plain \s4\li720\sb120 \f22\fs20 :code  demo8\tab \\ tests two "addr len" strings for being equal\par \pard\plain \s5\li720 \f22\fs20 \tab move.l (A6)+,D0\tab \\ pop len of first string\par \tab swap D0\tab \tab \\    onto high order word of D0\par \tab movea.l (A6)+,A0\tab \\ pop addr of first string\par \tab or.l (A6)+,D0\tab \\ pop len of 2nd str onto low order word of D0\par \tab movea.l (A6)+,A1\tab \\ pop addr of second string\par \tab exg A6,A7\par \tab call cmpstring\tab \\ IF equal THEN returns 0 ELSE 1\par \tab exg A6,A7\par \tab move.l D0,-(A6)\tab \\ push answer onto stack\par ;code\par \par : test8  " Mops"  " Assembler"  demo8  . cr  ;\par \par test8\par 1\par \pard\plain \s3\qj\sb120 \f20 For a stack-based trap, there are a couple of extra points to note.  Since we use A6 as the data stack, parameters will normally be there.  But the Mac uses A7 as its only stack pointer.  The easiest course of action is to precede and follow any stack-based Toolbox call with an exg instruction, thus:\par \pard\plain \s4\li720\sb120 \f22\fs20 exg\tab A6,A7\par \pard\plain \s5\li720 \f22\fs20 call\tab <someTrap>\par exg\tab A6,A7\par \pard\plain \s3\qj\sb120 \f20 If the Toolbox call uses A5, which all QuickDraw calls do, then we have an extra problem in that Mops uses A5 to address modules.  In these situations you will need to save A5 (the return stack is a good place), and load A5 with the global CurrentA5 which contains the value the System expects to be in A5.  Then restore Mops' value to A5 after the call.  Thus, a typical call might be as follows:\par \pard\plain \s4\li720\sb120 \f22\fs20 move.l A5,-(A7)\tab \tab \tab \\ Save Mops' A5\par \pard\plain \s5\li720 \f22\fs20 move.l glob[CurrentA5],A5\tab \\ Set System's A5\par exg A6,A7\par call <anotherTrap>\par exg A6,A7\par move.l (A7)+,A5\tab \tab \tab \\ Restore Mops' A5\par \pard\plain \s3\qj\sb120 \f20 Note the way we access the System global CurrentA5.  You may remember that in high-level Mops code, we access globals thus:\par \pard\plain \s4\li720\sb120 \f22\fs20 global <name>\par \pard\plain \s3\qj\sb120 \f20 In the assembler, we access globals with glob[globalName], as in the code above.\par Likewise, in high-level Mops code we access the system constants thus:\par \pard\plain \s4\li720\sb120 \f22\fs20 konst <name>\par \pard\plain \s3\qj\sb120 \f20 In the assembler, the usage is, e.g.\par \pard\plain \s4\li720\sb120 \f22\fs20 move.l konst[PixMapTooDeepErr],D0\par \pard\plain \s3\qj\sb120 \f20 which will compile an immediate mode move.\par \pard\plain \s254\sb240\keepn \b\f21 Syntax\par \pard\plain \s3\qj\sb120 \f20 The Mops Assembler uses a standard syntax.  In Mops parentheses denote comments, but not in the assembler.  The assembler supports "\\" and ";" as the start of a comment.\par A label may not have the same spelling as an opcode and an opcode can start in the first column if there is no label.  Labels do not have to start in column one.  After the opcode you may define the operand size as byte, word, or long word, e.g.:\par \pard\plain \s4\li720\sb120 \f22\fs20 MOVE.B\par \pard\plain \s5\li720 \f22\fs20 MOVE.W\par MOVE.L\par \pard\plain \s3\qj\sb120 \f20 The Mops Assembler's default is long word because Mops's stacks have long word sized elements.  Most 68000 assemblers use word as the default.\par The Mops Assembler is case insensitive.\par Labels may be used as in other assemblers.  We don't automatically clear the assembler's symbol table after each definition is completed.  This means that labels in one definition can be referred to in a later definition.  To clear the symbol table, use the pseudo-op  LOC.  You can refer to a label with instructions other than branches, and add a displacement as well, e.g.\par \pard\plain \s4\li720\sb120 \f22\fs20 LEA\tab lab,A0\par \pard\plain \s5\li720 \f22\fs20 MOVE\tab 4(lab),D3\par \pard\plain \s3\qj\sb120 \f20 Many examples of the use of labels can be found in the files StrUtilities and String+.\par Another pseudo-op is DC, which works exactly as in other assemblers, e.g.\par \pard\plain \s4\li720\sb120 \f22\fs20 DC.W\tab $A9FF\tab \tab ; Call macsbug\par \pard\plain \s5\li720 \f22\fs20 DC.B\tab 3,4,$FF\tab ; A list of bytes\par \pard\plain \s3\qj\sb120 \f20 All the floating-point unit (FPU) operations are included in the assembler.  This means that if your machine has an FPU coprocessor, you can use it directly from assembled code.  To check at run time if the machine has an FPU, look at the value FPU?  If it is non-zero, the FPU is there.  Here's a rather silly example, which just multiplies two floating numbers.  The addresses of the two numbers are on the stack, and the result replaces the first number.  We are assuming that the Floating Point package is loaded, and that the FP numbers themselves are in the "Floating point heap" defined there.\par \pard\plain \s4\li720\sb120 \f22\fs20 :code (F*)\tab \\ ( flt1 flt2 -- prod )  Uses the FPU.\par \pard\plain \s5\li720 \f22\fs20 \tab POP.L A0\tab \tab \tab ; Pop flt2 addr to A0\par \tab MOVE.L (A6),A1\tab \tab ; Flt1 addr to A1, and leave on stk\par \tab \tab \tab \tab \tab ;  as result address\par \tab FMOVE.X (A1),FP0\tab \tab ; Flt1 to FP0\par \tab FMUL (A0),FP0\tab \tab ; Floating multiply\par \tab BSR dic[(fltDisp)]\tab ; Dispose of flt2 heap storage\par \tab \tab \tab \tab \tab ; (This will overlap in execution \par \tab \tab \tab \tab \tab ;  with the floating mult)\par \tab FMOVE.X FP0,(A1)\tab \tab ; Move result back\par ;code\par \par : SMART_F*\tab \\ ( flt1 flt2 -- prod )  This is the word you call.\par \tab FPU?  IF  (f*)  ELSE  f*  THEN  ;\par \pard\plain \s3\qj\sb120 \f20 WARNING:  I don't use floating-point in my own work, so I haven't really been able to test all the FPU instructions and modes thoroughly.  The ones I have looked at certainly seem to be all right, though.  I haven't listed the FPU instructions here\emdash if you are programming the FPU directly you will really need to be referring to a manual such as Motorola's {\i MC68881/MC68882 Floating-Point Coprocessor User's Manual}.\par \pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 IV-{\chpgn }\tab Mops {\f21 Assembler\par }}{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 \tab \tab Chapter 2\emdash Registers and Addressing Modes\tab IV-{\chpgn }\par }{\headerf \pard\plain \s244\tx720\tqr\tx8640\tqr\tx9360 \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Chapter 2\emdash Registers and Addressing Modes\par \pard\plain \s254\sb240\keepn \b\f21 About this chapter\par \pard\plain \s3\qj\sb120 \f20 This chapter describes the registers which you can work with and the addressing modes that can be used on operands.\par \pard\plain \s254\sb240\keepn \b\f21 Registers\par \pard\plain \s3\qj\sb120 \f20 There are 18 registers that you should concern yourself with: the 8 data registers, the 8 address registers, the program counter and the status register.  They are each 32 bits in size with the exception of the status register, which is 16 bits.  They are numbered with 0 as the right most bit.  See Figure 1 for a chart of all 18 registers.  Whenever a long word is referenced, all 32 bits are being referenced.  With a word sized operand the low order 16 bits are intended.  The low order 8 bits are used in a byte reference.\par \pard\plain \s253\li720\sb120\keepn \b\f21 Data Registers\par \pard\plain \s3\qj\sb120 \f20 The 8 data registers (D0 - D7) are each 32 bits wide and are primarily used to hold 32 bit (long word) data, 16 bit (word) data, and 8 bit (byte) data.  They can also be used for indexing.\par \pard\plain \s253\li720\sb120\keepn \b\f21 Address Registers\par \pard\plain \s3\qj\sb120 \f20 The first 7 address registers (A0 - A6) are 32 bits wide and are used to hold addresses although they can also be used for indexing.  For addressing references the low order 24 bits are used.\par {\b A7} is the stack pointer (SP).  When the system is in supervisor mode, it is the supervisor stack pointer, and in user mode it is the user stack pointer.  The Macintosh operates in supervisor mode.\par \pard\plain \s253\li720\sb120\keepn \b\f21 Uses of Data and Address Registers\par \pard\plain \s3\qj\sb120 \f20 Some of the 68000's registers are used by Mops and the Macintosh for themselves.  See Figure 2 for a memory map of the Macintosh while Mops is running.\par You may safely manipulate in a ":code" or a ":mcode" definition all D registers, as well as A0 and A1.  If you are not in a :mcode definition, A2 is also free.  But note that you can't rely on data in ANY register remaining there across calls of your definition.  The assignments of each register are:\par \pard\plain \s4\li720\sb120 \f22\fs20 D0\tab Free\par \pard\plain \s5\li720 \f22\fs20 D1\tab Free\par D2\tab Free\par D3\tab Free\par D4\tab Free\par D5\tab Free\par D6\tab Free\par D7\tab Free\par \par A0\tab Free\par A1\tab Free\par A2\tab Address of first ivar in current object in a :mcode\par A3\tab Lobase pointer\par A4\tab Hibase pointer\par A5\tab Module base pointer, or -1 if not in a module\par A6\tab Data stack pointer.  Also may be referred to as SP.\par A7\tab Return stack pointer (in supervisor mode)\par \pard\plain \s9\qc\sb120\keepn \f20 {{\pict\macpict\picw437\pich570\picscaled 4d3000000000026c01db1101a10064000c574f524400000000026c01db01000a00000000026c01db98003c00000000026b01e000000000026b01da00000000026b01da00010cee000601000002080010df000cee000601000002080010df000cee0006010671c1519670df000cee000601094a41525890df000cee000601094a40a25090df000cee000601094a40a25090df000cee000601e649c0a19070df0006eb000040dc0007ec00010180dc0002c500080003d1ff00f0f70008000cd100000cf700080010d1000002f700080020d1000001f7000f0040df000304100020f6000080f8000f0040df000304100020f6000080f8000f0080df000302a32ce0f6000040f8000f0080df000302a4b120f6000040f8000f0080df00030144a120f6000040f8000f0080df00030144a120f6000040f8000f0080df0003014320e0f6000040f800080080d0000040f800080080d0000040f8000d0080e600007fedff01f040f8000e0080e700010180ed00010c40f8000d0080e7000002ec00010240f800120080e7000004f200017802fd00010140f800110080e7000008f200014402fc0000c0f800120080e7000008f20002452730fd0000c0f800120080e7000010f20002792248fd000040f800120080e7000010f20002452278fd000040f800120080e7000010f20002452240fd000040f800120080e7000010f2000278e130fd000040f800100080e7000010f1000020fc000040f800100080e7000010f10000c0fc000040f800110080e7000010f500000ff9ff01f040f800110080e7000010f5000030f900010c40f800110080e7000010f5000040f900010240f800110080e7000010f5000080f900010140f800100080e7000010f5000080f80000c0f800100080e7000010f5000080f80000c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80036329f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c40f80039358232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c41122461224000e1c0fb0039358412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240009220fb0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c80924471044212240008a20fb00393581120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e409084212240008a20fb00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240008a20fb0039358e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c40009220fb00393580020008002000800200080020008002000800400100080040020010008004002000800400200400802008010040100401004000e1c0fb003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80036329f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c40f80039358232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c41122461224000e080fb0039358412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240009180fb0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c80924471044212240008880fb00393581120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e409084212240008880fb00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240008880fb0039358e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c40009080fb00393580020008002000800200080020008002000800400100080040020010008004002000800400200400802008010040100401004000e080fb003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f800393580020008002000800200080020008002000800400100080040020010008004002000800400200400802008010040100401004000e1c0fb0039359f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c40009220fb0039358232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c411224612240008820fb0039358412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240008840fb0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c80924471044212240008880fb00383481120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e4090842122400091fa00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a04444842228890448910421224000e3e0fb0036328e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c40f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80039359f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c4000e3e0fb0039358232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c411224612240009040fb0039358412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240008880fb0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c809244710442122400089c0fb00393581120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e409084212240008820fb00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240009220fb0039358e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c4000e1c0fb003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80039359f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c4000e040fb0039358232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c4112246122400090c0fb0039358412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240008940fb0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c80924471044212240008a40fb00393581120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e409084212240008be0fb00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240009040fb0039358e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c4000e040fb003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80039358002000800200080020008002000800200080040010008004002001000800400200080040020040080200801004010040100400071f0fb0038349f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c400049fa0039358232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c4112246122400045e0fb0039358412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240004410fb0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c80924471044212240004410fb00393581120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e409084212240004910fb00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a0444484222889044891042122400070e0fb0036328e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c40f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80039359f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c4000e0c0fb0038348232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c4112246122400091fa0038348412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240008afa0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c80924471044212240008bc0fb00393581120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e409084212240008a20fb00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240009220fb0039358e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c4000e1c0fb003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80039359f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c4000e3e0fb0039358232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c411224612240009020fb0039358412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240008840fb0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c80924471044212240008840fb00393581120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e409084212240008880fb00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240009080fb0039358e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c4000e080fb003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f80002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c5000ef20008080000104000808108dd000ef20008080000104000808108dd0011f2000b08338e0a8cb381473acc7380e00010f2000a084a520a92c481494b1284df0010f2000a084a5205128483e94a1e63df0011f2000b084a5205128482294a101080e00010f2000a0f324e050c8382273a0ce7df0006f0000002d70006f000000cd70002c5000af3000003dfff00f0f7000af300000cdf00000cf7000af3000010df000002f7000af3000020df000001f70013f3000040ed0005041000202042f8000080f80013f3000040ed0005041000202042f8000080f80016f3000080ed000802a32ce051ceb31ce0fb000040f80015f3000080ed000702a4b1205252c4a1fa000040f80016f3000080ed00080144a120fa528798c0fb000040f80016f3000080ed00080144a1208a52840420fb000040f80016f3000080ed0008014320e089ce8339c0fb000040f8000af3000080de000040f8000af3000080de000040f8000ff3000080f400007fedff01f040f80010f3000080f500010180ed00010c40f8000ff3000080f5000002ec00010240f8000ff3000080f5000004ec00010140f8000ef3000080f5000008eb0000c0f8000ef3000080f5000008eb0000c0f8000ef3000080f5000010eb000040f8000ef3000080f5000010eb000040f8000ef3000080f5000010eb000040f8000ef3000080f5000010eb000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003935800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040004380fb0039359f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c40004440fb0039358232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c41122461224000a440fb0039358412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f11442102421224000a440fb0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c8092447104421224001f440fb00393581120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e409084212240011440fb00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240011380fb0036328e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c40f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80039359f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c40002080fb0039358232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c411224612240002180fb0039358412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240005080fb0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c80924471044212240005080fb00393581120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e40908421224000f880fb00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240008880fb0039358e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c40008880fb003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80039358002000800200080020008002000800200080040010008004002001000800400200080040020040080200801004010040100400021c0fb0039359f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c40002220fb0039358232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c411224612240005020fb0039358412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240005040fb0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c8092447104421224000f880fb00383481120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e4090842122400089fa00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240008be0fb0036328e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c40f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80039359f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c400023e0fb0039358232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c411224612240002040fb0039358412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240005080fb0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c809244710442122400051c0fb00393581120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e40908421224000f820fb00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240008a20fb0039358e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c400089c0fb003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80039359f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c40002040fb0039358232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c4112246122400020c0fb0039358412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240005140fb0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c80924471044212240005240fb00393581120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e40908421224000fbe0fb00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240008840fb0039358e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c40008840fb003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80039359f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c400047c0fb0038348232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c4112246122400044fa0039358412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f11442102421224000a780fb0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c8092447104421224000a040fb00393581120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e40908421224001f040fb00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240011440fb0039358e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c40011380fb003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80039359f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c40004180fb0038348232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c4112246122400042fa0038348412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f11442102421224000a4fa0039358e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c8092447104421224000a780fb00393581120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e40908421224001f440fb00393591128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240011440fb0039358e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c40011380fb003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f800100080e7000010f5000080f8000040f80006cfff00c0f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003d3b9f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c4001139e0000011f00003d3b8232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c4112246122400114513c00010100003d3b8412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f1144210242122400114110600028200003d3b8e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c8092447104421224001139e0180028200003d3b81120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e40908421224001105000c007c400003d3b91128a290124229022422908a404908a41090248452049114822445222902488a420904488a0444484222889044891042122400114500040044400003d3b8e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c4000e3900020044400003a32800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040fd000020fd003a32800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040fd000020fd003a32800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040fd000020fd000acfff00c0fd000020fd003a32800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040fd000020fd003c32800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040fd000420040010003c32800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040fd00042008e788003d3b9f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c4000e39e0040111444003d3b8232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c41122461224001145100c0110444003d3b8412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240010411018010e784003d3b8e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c8092447104421224000e39e0600101404003d3b81120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e4090842122400010501c00111404003d3b91128a290124229022422908a404908a41090248452049114822445222902488a420904488a044448422288904489104212240011450000008e408003d3b8e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c4000e3900000040010003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f8003632800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040f80006cfff00c0f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000af3000080de000040f8000cf3000080de00024001e0fa000cf3000080de0002400110fa0010f3000080de000640011598eb33b0fe000ccfff06c001e6252c0a48fe003c38800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040010425283a48fe003c38800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040010425284a48fe003c38800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040010418e83a48fe003a329f12f9c9c7271c9cfa70c9cfa7049cfa71c9c24e3921c90e48fa41923e90248fa43890448721c4389f20c8f9044f91c4211c40fe000020fc003a328232122a28a8a2a20a890a28288ca2128a2a265145622b11580ac21620b065812c44b0c588a22444812108810c411224612240fe0000c0fc0036328412222828a0a282120a082f209482220828224145222911481244123c90a4822404904488a22444822208f114421024212240f80036328e12722847a11c841213c840a1248472104842424521e90e48124792029124872408904488a1e4388223c80924471044212240f8003b3281120a2880a2228822222880a23e880a2088824445202911482244520291f480a410904488a02444842228093e409084212240fc0003010004003d3b91128a290124229022422908a404908a41090248452049114822445222902488a420904488a04444842228890448910421224000e00004000278e2003d3b8e1271cbe62f9cbe22f9cbe72f84be72fbebe25f3921890e482243921c902487247c9044872184388421c871044713e4211c400110000400044511003d3b800200080020008002000800200080020008004001000800400200100080040020008004002004008020080100401004010040010325ce65844501003d3b8002000800200080020008002000800200080040010008004002001000800400200080040020040080200801004010040100400104a52496047901003d3b8002000800200080020008002000800200080040010008004002001000800400200080040020040080200801004010040100400104a524f4044101000dcfff09c00114a52484044111000bcd0007e31d22640240e20007c900030100040002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50002c50015e4000670002000078020fc00050880000f0040f40015e4000688002000044020fc0005088000088040f40015e400068247733b045273fc0005089ccb08a4e6f40016e40007724824a487922480fd000508a12c0f2449f40016e400070a4627a484522780fd00050899e808a44ff40015e400068a412424845224fc000508850808a448f40015e4000671ce1324878e13fc00050738c80f1c26f4000ee3000040fe000002f7000004f3000fe400010180fe00000cf7000004f30006d4000018f30002c50002c5000fe500007ff7ff01e003f9ff00f0f70010e600010180f70001180cf900000cf7000fe6000002f600010410f9000002f7000fe6000004f600010220f9000001f7000fe6000008f600010140f8000080f8000ee6000008f5000080f8000040f8000ee6000010f5000080f8000040f80011e6000010f5000080f800034001c402fb0011e6000010f5000080f8000340022402fb0013e6000010f5000080f8000540020e6749c0fd000ee600001febff04c001c4124afc0022e6001c1000800400200080040020040080200801004010040100400024724980fd0022e6001c1000800400200080040020040080200801004010040100400224924840fd0022e6001c10008004002000800400200400802008010040100401004001c2713b80fd001de60017123e90248fa43890448721c4389f20c8f9044f91c4211c40f8001de600171620b065812c44b0c588a22444812108810c411224612240f8001de60017123c90a4822404904488a22444822208f114421024212240f8001de6001712029124872408904488a1e4388223c80924471044212240f80021e60017120291f480a410904488a02444842228093e409084212240fb000240010024e600201222902488a420904488a04444842228890448910421224003c0010100008e788024e60020121c902487247c9044872184388421c871044713e4211c4002200001000111444024e6002010008004002000800400200400802008010040100401004002263b3b996110444024e6002010008004002000800400200400802008010040100401004003c9494125810e784024e60020100080040020008004002004008020080100401004010040028f49313d0101504011e600001febff09c002484909210111484021e5000320000008fd000310008010fd000f080200802008000226397099008e448021e5000320000008fd000310008010fd0005080200802008fe000008fe00024001001de5000320000008fd000310008010fd0005080200802008fe000030fb0019e5000320000008fd000310008010fd0005080200802008f70019e5000320000008fd000310008010fd0005080200802008f70019e5000320000008fd000310008010fd0005080200802008f70019e5000320000008fd000310008010fd0005080200802008f7001ee5000320000008fd000310008010fd0005080200802008fc00010202fe0020e5000320000008fd000310008010fd000c0802008020080001c000000471fe0021e5000320000008fd000310008010fd000d0802008020080002200000088880ff0021e5000320000008fd000310008010fd000d0802008020080002065ad2088080ff0021e5000320000008fd000310008010fd000d08020080200ffc02016312088080ff0021e5000320000008fd000310008010fd000d0802008020000002074212088080ff0021e5000320000008fd000310008010fd000d0802008020000002294212088880ff0020e5000320000008fd000310008010fd000c0802008020000001c7420e0471fe001ce5000320000008fd000310008010fd00040802008020fc00fe02fe001ce5000320000008fd000310008010fd00040802008020fc00000cfc0018e5000320000008fd000310008010fd00040802008020f60018e5000320000008fd000310008010fd00040802008020f6001ce5000320000008fd000310008010fd00040802008020f9000204040021e5000320000008fd000310008010fd000f0802008020000001c00003c00009120021e5000320000008fd000310008010fd000f0802008020000002200004400011110021e5000320000008fd000310008010fd000f080200802000000228996e4c8211110021e5000320000008fd000310008010fd000f080200803ffffc02252584525410a10021e5000320000008fd000310008010fd000308020080fe000802253d04525410a10021e5000320000008fd000310008010fd000308020080fe000802222104522810410021e5000320000008fd000310008010fd000308020080fe000801c219044c280842001be5000320000008fd000310008010fd000308020080f8000204040017e5000320000008fd000310008010fd000308020080f50017e5000320000008fd000310008010fd000308020080f50017e5000320000008fd000310008010fd000308020080f5001ce5000320000008fd000310008010fd000308020080fb00010102fd001fe5000320000008fd000310008010fd000308020080fe000403c0000279fd001fe5000320000008fd000310008010fd000308020080fd00044000040880fe001fe5000320000008fd000310008010fd000308020080fd00048cb3041080fe0020e5000320000008fd000310008010fd000308020080fe00050112c4842080fe0020e5000320000008fd000310008010fd0002080200feff06fc021e84844080fe001ee5000320000008fd000310008010fd00010802fc0005021084844080fe001de5000320000008fd000310008010fd00010802fc000403cc830279fd001ae5000320000008fd000310008010fd00010802f900010102fd0015e5000320000008fd000310008010fd00010802f30015e5000320000008fd000310008010fd00010802f30015e5000320000008fd000310008010fd00010802f30019e5000320000008fd000310008010fd00010802f600022020001fe5000320000008fd000310008010fd00010802fc00080320000880004c90001fe5000320000008fd000310008010fd00010802fc00080320000800008c88001fe5000320000008fd000310008010fd00010802fc000802a6399da2608a880020e5000320000008fd000310008010fd00010803fdff09fc02a9484894908a88001ee5000320000008fd000310008010fd000008fb0008026f49c894f08988001ee5000320000008fd000310008010fd000008fb000802684a4888808988001ee5000320000008fd000310008010fd000008fb0008022639c488604890001ce5000320000008fd000310008010fd000008f9000008fe000220200018e5000320000008fd000310008010fd000008f9000030fb0014e5000320000008fd000310008010fd000008f20014e5000320000008fd000310008010fd000008f20019e5000320000008fd000310008010fd000008f600014040ff001ee5000320000008fd000310008010fd000008fb000603c02000209120ff001ee5000320000008fd000310008010fd000008fb000602002000211110ff001ee5000320000008fd000310008010fd000008fb000602117338e10a10ff001fe5000320000008fd000310008010fd00000ffcff07fc038a24a5210410ff001ae5000320000008fd000310008010f60006020427a5210a10ff001ae5000320000008fd000310008010f60006020a2425211110ff001ae5000320000008fd000310008010f6000603d11324e09120ff0015e5000320000008fd000310008010f100014040ff0010e5000320000008fd000310008010ed0010e5000320000008fd000310008010ed0010e5000320000008fd000310008010ed0010e5000320000008fd000310008010ed001ae5000320000008fd000310008010f600080101000003082002001ae5000320000008fd000310008010f6000801010000010c6002001ae5000320000008fd000310008010f600080173996e310aa63a4018e5000320000008fd00001ff4ff09fc01492589090921428013e5000320000008ee000801493d09390827330013e5000320000008ee0008014921094908290a8013e5000320000008ee000801489909390827724009e5000320000008e50009e5000320000008e50009e5000320000008e50009e5000320000008e50009e5000320000008e50013e5000320000008ee000802080200700120200013e5000320000008ee000803180200880020200013e5000320000008ee000802a98e60820b73380013e5000320000008ee0008024a5290715124a40014e500032000000fefff09fc020a52f0095124240010e5000020eb0008020a528088a124a40010e5000020eb000802098e6070a113240006e5000020e20006e5000020e20006e5000020e20006e5000020e20006e5000020e20006e5000020e20010e5000020eb000803e000000e002404000fe5000020ea000780000011000404000fe5000020ea00078b318c10416e67000fe5000020ea00078c0a520e2a24948011e500003fecff09fc00883a1e012a2484800bcd0007884a5011142494800bcd000788398c0e14226480ff}}\par \pard\plain \s251\qc\sb120\tx2160 \b\f21 Figure 1\emdash Registers\par \pard\plain \s9\qc\sb120\keepn \f20 {{\pict\macpict\picw301\pich612\picscaled 22780011004202c90198001102ff0c00ffffffff00420000001100000198000002c900000000000000a0008200a1006400306472773200040011008802c8011a0000000000000000010100000000000000000000ffffffffffffff02140208ff0000001e0001000a0011004202c901980009000000000000000000310011008802c9011b0009ffffffffffffffff003800a10064006064727732000302aa008802aa011a0000000000000000010100000000000000000000ffffffffffffff02140208ff0000000002aa008802aa011a000000000000000000010014000c000300020000005a00010000000200000003000c00000000002002aa008802aa011a00a100640060647277320003027d0088027d011a0000000000000000010100000000000000000000ffffffffffffff02140208ff00000000027d0088027d011a000000000000000000010014000c000300020000005a00010000000200000003000c000000000020027d0088027d011a00a10064003164727732000202b300aa02bf00ef0000000000000000000000000000000000000000ffffffffffff0102000201ff0000010000a10096000c01000000020400000000000000a1009a0008fffd00000021800000a00098002c000c00150948656c76657469636100030015000d000a002e000400000000002802bc00ab0e53797374656d20676c6f62616c730000a0009900a0009700a100640031647277320002028d00af029900eb0000000000000000000000000000000000000000ffffffffffff0102000201ff0000010000a10096000c01000000020400000000000000a1009a0008fffd0000001d000000a000980028029600b00b53797374656d206865617000a0009900a0009700a100640060647277320003024500880245011a0000000000000000010100000000000000000000ffffffffffffff02140208ff00000000024500880245011a000000000000000000010014000c000300020000005a00010000000200000003000c000000000020024500880245011a00a10064003164727732000202560096026e010b0000c0000000c000000000000000000000000000ffffffffffff0102000201ff0000010000a10096000c02000000026e00000000000000a1009a0008000300000039400000a000980028025f00981c28706f737369626c79206f74686572206170706c69636174696f6e0d0000a0009900a00098002b2a0c067a6f6e6573290000a0009900a0009700a100640060647277320003021400880214011a0000000000000000010100000000000000000000ffffffffffffff02140208ff00000000021400880214011a000000000000000000010014000c000300020000005a00010000000200000015000a000000000020021400880214011a00a100640031647277320002022500a6023100fa0000c0000000c000000000000000000000000000ffffffffffff0102000201ff0000000000a10096000c01000000023100000000000000a1009a0008fffd00000028c00000a000980028022e00a8104d6f7073206b65726e656c20636f64650000a0009900a0009700a10064006064727732000301d3008801d3011a0000000000000000010100000000000000000000ffffffffffffff02140208ff0000000001d3008801d3011a000000000000000000010014000c000300020000005a00010000000200000015000a00000000002001d3008801d3011a00a10064003164727732000201ed00ad01f900f40000000000000000000000000000000000000000ffffffffffff0102000201ff0000010000a10096000c01000000020400000000000000a1009a0008fffd00000022800000a00098002801f600ae0f4d6f70732064696374696f6e61727900a0009900a0009700a100640060647277320003019700880197011a0000000000000000010100000000000000000000ffffffffffffff02140208ff00000000019700880197011a000000000000000000010014000c000300020000005a00010000000200000015000a000000000020019700880197011a00a10064003164727732000201ad008b01b901180000000000000000000000000000000000000000ffffffffffff0102000201ff0000000000a10096000c01000000020400000000000000a1009a0008fffd00000045800000a00098002801b6008c1e537061636520666f722064696374696f6e61727920657870616e73696f6e0000a0009900a0009700a100640060647277320003018300430185004540004000c000c000010100000000000000000000ffffffffffffff02140208ff000000010185004501850045000000000000000000020014000c000300020000005a00010000000200000015000a0000000000a000aa002201850045000000a000ad00a10064006064727732000300320088003200880000000000000000010100000000000000000000ffffffffffffff02140208ff000000000032008800320088000000000000000000020014000c000300020000005a00010000000200000015000a00000000002200320088000000a100640060647277320003003400880034011a0000000000000000010100000000000000000000ffffffffffffff02140208ff00000000003400880034011a000000000000000000020014000c000300020000005a00010000000200000015000a000000000020003400880034011a00a100640031647277320002001c00a7002800fb0000000000000000000000000000000000000000ffffffffffff0102000201ff0000010000a10096000c01000000020400000000000000a1009a0008fffd00000029000000a000980028002500a812566964656f2c20736f756e642c206574632e0000a0009900a0009700a100640060647277320003006900880069011a0000000000000000010100000000000000000000ffffffffffffff02140208ff00000000006900880069011a000000000000000000020014000c000300020000005a00010000000200000015000a000000000020006900880069011a00a10064003164727732000200420096005a010b0000c0000000c000000000000000000000000000ffffffffffff0102000201ff0000010000a10096000c02000000025a00000000000000a1009a0008000300000039400000a000980028004b00981c28706f737369626c79206f74686572206170706c69636174696f6e0d0000a0009900a00098002b2a0c067a6f6e6573290000a0009900a0009700a10064006064727732000301bf00c801de00d18000c00000004000010100000000000000000000ffffffffffffff02140208ff0000000101dd00cd01c100cd800000000000000000020014000c000300020000005a00010000000200000003000c0000000000a000aa0071001a01c100c901cc00d101c100cd01cc00d101cc00c901c100cd002201dd00cd00ef00a000ad00a100640060647277320003008100880081011a0000000000000000010100000000000000000000ffffffffffffff02140208ff00000000008100880081011a000000000000000000020014000c000300020000005a00010000000200000015000a000000000020008100880081011a00a100640060647277320003009400880094011a0000000000000000010100000000000000000000ffffffffffffff02140208ff00000000009400880094011a000000000000000000020014000c000300020000005a00010000000200000015000a000000000020009400880094011a00a10064006064727732000300b5008800b5011a0000000000000000010100000000000000000000ffffffffffffff02140208ff0000000000b5008800b5011a000000000000000000020014000c000300020000005a00010000000200000015000a00000000002000b5008800b5011a00a100640031647277320002007000b5007c00eb0000000000000000000000000000000000000000ffffffffffff0102000201ff0000000000a10096000c01000000020400000000000000a1009a0008fffd0000001a000000a000980028007900b60a4a756d70207461626c650000a0009900a0009700a1006400316472773200020084009d009001080000000000000000000000000000000000000000ffffffffffff0102000201ff0000000000a10096000c01000000020400000000000000a1009a0008fffd00000034800000a000980028008d009e164170706c69636174696f6e20706172616d65746572730000a0009900a0009700a100640031647277320002009f00a500ab00fa0000000000000000000000000000000000000000ffffffffffff0102000201ff0000000000a10096000c01000000020400000000000000a1009a0008fffd00000029800000a00098002b081b11517569636b4472617720676c6f62616c7300a0009900a0009700a1006400606472773200030094011e009401330000000000000000010100000000000000000000ffffffffffffff02140208ff000000000094011e00940133000000000000000000020014000c000300020000005a00010000000200000015000a0000000000220094011e150000a100640031647277320002008f0139009b01970000000000000000000000000000000000000000ffffffffffff0102000201ff0000000000a10096000c01000000020400000000000000a1009a0008fffd0000002e000000a0009800280098013a1243757272656e7441352028676c6f62616c290000a0009900a0009700a1006400606472773200030069004f006900820000800000000000010100000000000000000000ffffffffffffff02140208ff00000000006900820069004f000000000000800000020014000c000300020000005a00010000000200000015000a00000000002200690082cd0000a100640060647277320003006700550109005e8000c00080004000010100000000000000000000ffffffffffffff02140208ff000000020069005a0109005a000000000000000000020014000c000300020000005a00010000000200000015000a0000000000a000ab0071001a006900560074005e0069005a0074005e007400560069005a00200074005a0109005a00a000ad00a100640060647277320003015e00560245005f0000c00080004000010100000000000000000000ffffffffffffff02140208ff000000020245005b015f005b000000008000000000020014000c000300020000005a00010000000200000015000a0000000000a000ab0071001a023a00570245005f0245005b023a0057023a005f0245005b0020023a005b015f005b00a000ad00a10064006064727732000302140121021401430000000000000000010100000000000000000000ffffffffffffff02140208ff000000000214014302140121000000000000000000020014000c000300020000005a00010000000200000015000a00000000002202140143de0000a10064006064727732000301ff0128021401318000c00080004000010100000000000000000000ffffffffffffff02140208ff000000020214012d0201012d000000000000000000020014000c000300020000005a00010000000200000015000a0000000000a000ab0071001a02090129021401310214012d02090129020901310214012d00220209012d00f800a000ad00a10064006064727732000301de012101de01430000000000000000010100000000000000000000ffffffffffffff02140208ff0000000001de014301de0121000000000000000000020014000c000300020000005a00010000000200000015000a00000000002201de0143de0000a10064006064727732000301dc012801ee01318000c00080004000010100000000000000000000ffffffffffffff02140208ff0000000201de012d01ee012d000000000000000000020014000c000300020000005a00010000000200000015000a0000000000a000ab0071001a01de012901e9013101de012d01e9013101e9012901de012d002201e9012d000500a000ad00a10064003164727732000201d9014a01e501600000000000000000000000000000000000000000ffffffffffff0102000201ff0000000000a10096000c01000000020400000000000000a1009a0008fffd0000000a000000a00098002801e2014b0241330000a0009900a0009700a10064003164727732000201f3012401ff01380000000000000000000000000000000000000000ffffffffffff0102000201ff0000010000a10096000c01000000020400000000000000a1009a0008fffd00000009000000a00098002801fc01250333324b00a0009900a0009700a10064006064727732000301bc012901df01320000c00080004000010100000000000000000000ffffffffffffff02140208ff0000000201df012e01bd012e000000008000000000020014000c000300020000005a00010000000200000015000a0000000000a000ab0071001a01d4012a01df013201df012e01d4012a01d4013201df012e002201d4012e00e900a000ad00a10064006064727732000301840121018401438000000080000000010100000000000000000000ffffffffffffff02140208ff000000000184014301840121800000008000000000020014000c000300020000005a00010000000200000015000a00000000002201840143de0000a1006400606472773200030183012901a201320000c00000004000010100000000000000000000ffffffffffffff02140208ff000000020184012e01a1012e800000008000000000020014000c000300020000005a00010000000200000015000a0000000000a000ab0071001a0184012a018f01320184012e018f0132018f012a0184012e0022018f012e001200a000ad00a100640031647277320002017f014a018b01608000000080000000000000000000000000000000ffffffffffff0102000201ff0000000000a10096000c01000000028c00000000000000a1009a0008fffc8000000a000000a0009800280189014b0241340000a0009900a0009700a10064003164727732000201aa012201b6013f0000800000008000000000000000000000000000ffffffffffff0102000201ff0000010000a10096000c0100000002b600000000000000a1009a0008fffd0000000d000000a00098002801b301240536344b2d3200a0009900a0009700a10064003164727732000201200042014400730000800000008000000000000000000000000000ffffffffffff0102000201ff0000010000a10096000c02000000024400000000000000a1009a000800090000000c000000a0009800280129004f054d6f70730d00a0009900a000980028013500440c6170706c69636174696f6e0d0000a0009900a00098002b0c0c047a6f6e650000a0009900a0009700a1006400606472773200030245004e024500810000800000000000010100000000000000000000ffffffffffffff02140208ff00000000024500810245004e000000000000800000020014000c000300020000005a00010000000200000015000a00000000002202450081cd0000a100640031647277320002016c00c2018400e20000000000000000000000000000000000000000ffffffffffff0102000201ff0000000000a10096000c01000000020400000000000000a1009a000800030000000f000000a00098002b733405467265652000a0009900a00098002a0c046865617000a0009900a0009700a0008c00a100640060647277320003015b0088015b011a0227000002270000010100000000000000000000ffffffffffffff02140208ff00000000015b0088015b011a022700000227000000020014000c000300020000005a00010000000200000015000a000000000020015b0088015b011a00a100640060647277320003012e0088012e011ac3c40000c3c40000010100000000000000000000ffffffffffffff02140208ff00000000012e0088012e011ac3c40000c3c4000000020014000c000300020000005a00010000000200000015000a000000000020012e0088012e011a00a1006400ca64727732001e013f00a6014b00f87a9f000046fe00000000000000000052000c000000000000ffffff02140208ff0000009a012600a6013200f8001102ff0c00ffffffff00a600000126000000f80000013200000000000000a10096000c01000000025000000000000000a1009a0008fffd00000028000000a00098001e0001000a005effde01fa01c0002c000c00150948656c76657469636100030015000d000a002e0004000000000028012f00a70f41206c6f61646564206d6f64756c6500a0009900a0009700ff00a10096000c01000000022c00000000000000a1009a0008fffd00000028000000a000980001000a00770042021301980010000c0052000c00520028014800a70f41206c6f61646564206d6f64756c6500a0009900a0009700a10064003064727732004200c800a6014b00f87a9f000046fe00000000000000000052000c000000000000ffffff02140208ff000000a100640060647277320003015b0120015b01420227800002278000010100000000000000000000ffffffffffffff02140208ff00000000015b0142015b0120022780000227800000020014000c000300020000005a00010000000200000015000a000000000001000a0011004202c901980022015b0142de0000a10064006064727732000301460128015b0130c00040008000c000010100000000000000000000ffffffffffffff02140208ff00000002015b012c0148012c0227800053e6800000020014000c000300020000005a00010000000200000015000a0000000000a000ab0071001a01500128015b0130015b012c0150012801500130015b012c00220150012c00f800a000ad00a1006400606472773200030125012001250142ea7d8000ea7d8000010100000000000000000000ffffffffffffff02140208ff000000000125014201250120ea7d8000ea7d800000020014000c000300020000005a00010000000200000015000a00000000002201250142de0000a1006400606472773200030124012801360130800040004000c000010100000000000000000000ffffffffffffff0214020872000000020125012c0135012cea7d8000a5a6800000020014000c000300020000005a00010000000200000015000a0000000000a000ab0071001a01250128013001300125012c01300130013001280125012c00220130012c000500a000ad00a1006400be64727732001e01210149012c015f00008000cc5f80000000000000000016000c000000000000ffffff02140208720000008e0107014a01130160001102ff0c00ffffffff014a00000107000001600000011300000000000000a10096000c01000000027800000000000000a1009a0008fffd00000009800000a00098001e0001000a003f008201db0228002c000c00150948656c76657469636100030015000d000a002e00040000000000280110014b0241350000a0009900a0009700ff00a10096000c01000000024c00000000000000a1009a0008fffd00000009800000a000980001000a0059008201f501980010000c0016000c00160028012a014b0241350000a0009900a0009700a10064003064727732004200bc0149012c015f00008000cc5f80000000000000000016000c000000000000ffffff0214020872000000a1006400be64727732001e013a012301460137902280005c8180000000000000000014000c000100000000ffffff02140208720000008e01210124012d0138001102ff0c00ffffffff012400000121000001380000012d00000000000000a10096000c01000000020400000000000000a1009a0008fffd00000008800000a00098001e0001000a0059005c01f50200002c000c00150948656c76657469636100030015000d000a002e0004000000000028012a01250333324b00a0009900a0009700ff00a10096000c01000000024000000000000000a1009a0008fffd00000008800000a000980001000a0084005c01fd01980010000b0014000c00140028014301250333324b00a0009900a0009700a0008d00a10064003064727732004200bc012301460137902280005c8180000000000000000014000c000100000000ffffff0214020872000000a10064006064727732000300ca008800ca011a0000000000000000010100000000000000000000ffffffffffffff02140208720000000000ca008800ca011a000000000000000000020014000c000300020000005a00010000000200000015000a000000000001000a0011004202c90198002000ca008800ca011a00a10064006064727732000300c300c900d800d1800040008000c000010100000000000000000000ffffffffffffff02140208720000000100c500cd00d800cd000080000000800000020014000c000300020000005a00010000000200000015000a0000000000a000aa0071001a00cd00c900d800d100d800cd00cd00c900cd00d100d800cd002200c500cd000800a000ad00a10064003164727732000200b900af00c500ec8000000080000000000000000000000000000000ffffffffffff0102000201720000000000a10096000c0100000002c600000000000000a1009a0008fffc8000001d800000a0009800100001000100010001002800c300b00c52657475726e20737461636b0000a0009900a0009700a0008c00a10064006064727732000300dd008800dd011a8000000080000000010100000000000000000000ffffffffffffff02140208720000000000dd008800dd011a800000008000000000020014000c000300020000005a00010000000200000015000a00000000002000dd008800dd011a00a10064006064727732000300f1008800f1011a8000000080000000010100000000000000000000ffffffffffffff02140208720000000000f1008800f1011a800000008000000000020014000c000300020000005a00010000000200000015000a00000000002000f1008800f1011a00a10064006064727732000300ed00c9010200d20000c00000004000010100000000000000000000ffffffffffffff02140208720000000100ee00ce010100ce800000008000000000020014000c000300020000005a00010000000200000015000a0000000000a000aa0071001a00f600ca010100d2010100ce00f600ca00f600d2010100ce002200ee00ce000800a000ad00a10064003164727732000200e000b400ec00e88000000080000000000000000000000000000000ffffffffffff0102000201720000000000a10096000c0100000002ed00000000000000a1009a0008fffc80000019000000a00098002b05270a4461746120737461636b0000a0009900a0009700a0008d00a10064006064727732000300ca012000ca01420aab80000aab8000010100000000000000000000ffffffffffffff02140208720000000000ca014200ca01200aab80000aab800000020014000c000300020000005a00010000000200000015000a00000000002200ca0142de0000a10064003164727732000200c5014a00d101600000000000000000000000000000000000000000ffffffffffff0102000001720000000000a10096000c01000000020400000000000000a1009a0008fffd0000000a000000a00098002800ce014b0241370000a0009900a0009700a10064006064727732000300f1012000f101428aab80008aab8000010100000000000000000000ffffffffffffff02140208720000000000f1014200f101208aab80008aab800000020014000c000300020000005a00010000000200000015000a00000000002200f10142de0000a10064003164727732000200ec014a00f801608000000080000000000000000000000000000000ffffffffffff0102000001720000000000a10096000c0100000002f900000000000000a1009a0008fffc8000000a000000a00098002a2802413600a0009900a0009700a100640031647277320002010500c1011d00e10000000000000000000000000000000000000000ffffffffffff0102000001720000000000a10096000c01000000020400000000000000a1009a000800030000000f000000a000980028010e00c205467265652000a0009900a00098002a0c046865617000a0009900a0009700ff}}\par \pard\plain \s251\qc\sb120\tx2160 \b\f21 Figure 2\emdash Memory Map\par \pard\plain \s254\sb240\keepn \b\f21 Condition Codes\par \pard\plain \s3\qj\sb120 \f20 There are five condition codes used by the Mops Assembler and most instructions affect at least one of them.  Bits 0 through 4 are the condition codes and they are the only bits on the user byte that are used.  See chapter 3 for which instructions affect which condition codes.  They are used for various tests for conditional branching and setting bytes.  The codes are:\par \trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx2440\clshdng0\cellx4240\clshdng0\cellx9280\pard\plain \s1\qc\sb240\keepn\intbl \b\f20 Code\cell Name\cell Bit Location\cell \pard \s1\sb240\keepn\intbl Description\cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx2440\clshdng0\cellx4240\clshdng0\cellx9280\pard\plain \s3\qc\sb120\intbl \f20 X\cell eXtend\cell 4\cell \pard \s3\qj\sb120\intbl Used for multiprecision computations.  If af\-fected then usually set as the C code is set.\cell \pard\plain \intbl \f20 \row \pard\plain \s3\qc\sb120\intbl \f20 N\cell Negative\cell 3\cell \pard \s3\qj\sb120\intbl On if most significant bit of result is on, oth\-erwise off.\cell \pard\plain \intbl \f20 \row \pard\plain \s3\qc\sb120\intbl \f20 Z\cell Zero\cell 2\cell \pard \s3\qj\sb120\intbl On if result is zero, otherwise off.\cell \pard\plain \intbl \f20 \row \pard\plain \s3\qc\sb120\intbl \f20 V\cell oVerflow\cell 1\cell \pard \s3\qj\sb120\intbl On if there is an arithmetic overflow, other\-wise off.  If on the result is probably wrong.\cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx2440\clshdng0\cellx4240\clshdng0\cellx9280\pard\plain \s3\qc\sb120\intbl \f20 C\cell Carry\cell 0\cell \pard \s3\qj\sb120\intbl On if a carry is generated by the most signifi\-cant digit in an addition, or a bor\-row is generated by the most significant digit in a subtraction, otherwise off.\cell \pard\plain \intbl \f20 \row \pard\plain \s253\li720\sb120\keepn \b\f21 Interrupt Mask\par \pard\plain \s3\qj\sb120 \f20 The interrupt mask is used to disable interrupts at various levels.  It occupies bits 8, 9, and 10 of the status register.  Interrupt levels range from 1 (001) to 7 (111).  Bit 8 is the low bit, 1.e., for interrupt level 1 bit 8 is set and bits 9 and 10 are not set.  If the interrupt priority of an interrupt is less than or equal to the interrupt mask, then the interrupt exception is postponed.  An interrupt level of 7 (111) will not be postponed by the interrupt mask even if the mask is 7 (111).  Problems like loss of power are level 7 (111).  A mask of 0 (000) means no interrupts are postponed.  0 (000) is the default for the interrupt mask.\par \pard\plain \s253\li720\sb120\keepn \b\f21 Supervisor Bit\par \pard\plain \s3\qj\sb120 \f20 If the supervisor bit is on then the machine is in supervisor mode and if the supervisor bit is off, then it is in user mode.  Either mode may be in effect while Mops is running, depending on the actual Mac model and whether virtual memory is in use.  This bit (13) affects register A7.  A few instructions, which are not usable in user mode, are known as privileged instructions.\par \pard\plain \s253\li720\sb120\keepn \b\f21 Trace Bit\par \pard\plain \s3\qj\sb120 \f20 If bit 15 is on then the trace facility is on. After every instruction while bit 15 is on there will be a trap to the currently installed debugger.\par \pard\plain \s254\sb240\keepn \b\f21 {\fs28 Data Addressing Modes\par }\trowd \trgaph80\trleft-80 \clshdng0\cellx6040\clshdng0\cellx9280\pard\plain \s1\sb240\keepn\intbl \b\f20 Mode\cell Operand Syntax\cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx6040\clshdng0\cellx9280\pard \intbl Data Register Direct\cell Dx\cell \pard \intbl \row \pard \intbl Address Register Direct\cell Ax\cell \pard \intbl \row \pard \intbl Other Register Direct\cell CCR, SR, USP, <register list>\cell \pard \intbl \row \pard \intbl Address Register Indirect\cell (Ax)\cell \pard \intbl \row \pard \intbl Address Register Indirect with PostIncrement\cell (Ax)+\cell \pard \intbl \row \pard \intbl Address Register Indirect with PreDecrement\cell -(Ax)\cell \pard \intbl \row \pard \intbl Address Register Indirect with Displacement\cell d(Ax)\cell \pard \intbl \row \pard \intbl Address Register Indirect with Displacement and Index\cell d(Ax,Ry)\cell \pard \intbl \row \pard \intbl Program Counter Indirect with Displacement\cell d(PC)\cell \pard \intbl \row \pard \intbl Program Counter Indirect with Displacement and Index\cell d(PC,Ry)\cell \pard \intbl \row \pard \intbl Absolute Short Address\cell #xx\cell \pard \intbl \row \pard \intbl Absolute Long Address\cell #xxxx\cell \pard \intbl \row \pard \intbl Immediate Data\cell #<data>\cell \pard \intbl \row \trowd \trgaph80\trleft-80 \clshdng0\cellx6040\clshdng0\cellx9280\pard \intbl Implicit Reference\cell NA\cell \pard \intbl \row \pard\plain \s1\sb240\keepn \b\f20 Notes:\par \trowd \trgaph80\trleft-80 \clshdng0\cellx1720\clshdng0\cellx9280\pard\plain \intbl \f20 NA\cell not applicable\cell \pard \intbl \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1720\clshdng0\cellx9280\pard \intbl ( )\cell indirect\cell \pard \intbl \row \pard \intbl -( )\cell predecrement indirect\cell \pard \intbl \row \pard \intbl ( )+\cell postincrement indirect\cell \pard \intbl \row \pard \intbl d\cell displacement\cell \pard \intbl \row \pard \intbl Ax\cell address register\cell \pard \intbl \row \pard \intbl Dx\cell data register\cell \pard \intbl \row \pard \intbl Ry\cell address register or data register\cell \pard \intbl \row \pard \intbl CCR\cell user byte of status register\cell \pard \intbl \row \pard \intbl SR\cell status register\cell \pard \intbl \row \pard \intbl USP\cell user stack pointer\cell \pard \intbl \row \pard \intbl <register list>\cell group of registers\cell \pard \intbl \row \pard \intbl PC\cell program counter\cell \pard \intbl \row \pard \intbl #xx\cell word sized immediate address\cell \pard \intbl \row \pard \intbl #xxxx\cell long word sized immediate address\cell \pard \intbl \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1720\clshdng0\cellx9280\pard \intbl #<data>\cell immediate data\cell \pard \intbl \row \pard\plain \s251\qc\sb120\tx2160 \b\f21 Table 1\emdash Addressing Modes\par \pard\plain \s253\li720\sb120\keepn \b\f21 Addressing Modes\par \pard\plain \s3\qj\sb120 \f20 The 68000 has a rich set of addressing modes.  An effective address is the address computed at execution time using the addressing mode.  The contents of the effective address are what the operation works on.  If the operand has the size of a byte, an address, even or odd, may be accessed.  If the operand size is word or long word, only even addresses maybe accessed.\par \pard\plain \s253\li720\sb120\keepn \b\f21 Data Register Direct\par \pard\plain \s3\qj\sb120 \f20 The operand is a data register.\par \pard\plain \s4\li720\sb120 \f22\fs20 MOVE D0,D1\par \pard\plain \s253\li720\sb120\keepn \b\f21 Address Register Direct\par \pard\plain \s4\li720\sb120 \f22\fs20 MOVEA D0,A1\par \pard\plain \s253\li720\sb120\keepn \b\f21 Other Register Direct\par \pard\plain \s3\qj\sb120 \f20 With the MOVE instruction, the operands can be CCR (user byte of the status register, i.e. condition codes), SR (status register), or USP (user stack pointer while in supervisor mode).  See Chapter 3 for more details on the MOVE instruction. One of the two operands of the MOVEM instruction is a list of registers.  The registers should be listed in the order: D0 thru D7, A0 thru A7.  Note D0/D2 loads D0 and D2; D0-D2 loads D0, D1, and D2.  A "-" can only be used to group D registers or A registers but it cannot group D and A registers together.\par \pard\plain \s4\li720\sb120 \f22\fs20 MOVE D0,SR\line MOVEM 4(A0,D1.L),D6-D7/A0-A2\par \pard\plain \s253\li720\sb120\keepn \b\f21 Address Register Indirect\par \pard\plain \s3\qj\sb120 \f20 The effective address is the content of the address register.\par \pard\plain \s4\li720\sb120 \f22\fs20 NEG (A0)\par \pard\plain \s253\li720\sb120\keepn \b\f21 Address Register Indirect with PostIncrement\par \pard\plain \s3\qj\sb120 \f20 The effective address is the content of the address register.  After the operand is computed the register is incremented by 1, 2, or 4 depending on the operand size.  If A7 is used and the operand size is byte then the operand is still byte but the increment is 2.  If another address register is used with an operand size of a byte then the increment is 1.\par \pard\plain \s4\li720\sb120 \f22\fs20 CLR\tab (A6)+\par \pard\plain \s253\li720\sb120\keepn \b\f21 Address Register Indirect with PreDecrement\par \pard\plain \s3\qj\sb120\keepn \f20 Before the operand is computed the address register is decremented by 1, 2, or 4 depending on the operand size.  The effective address is the content of the register after decrementation.  If A7 is used and the operand size is byte, then the operand is still byte but the decrement is 2.  If another address register is used with an operand size of a byte then the decrement is 1.\par \pard\plain \s4\li720\sb120 \f22\fs20 CLR\tab -(A6)\par \pard\plain \s253\li720\sb120\keepn \b\f21 Address Register Indirect with Displacement\par \pard\plain \s3\qj\sb120 \f20 The effective address is the sum of the content of the address register and the 16 bit two's complement integer.  Hex data for all displacements can be specified using a "$".\par \pard\plain \s4\li720\sb120 \f22\fs20 CLR\tab 4(SP)\par CLR\tab $4(SP)\par CLR\tab $-4(SP)\par \pard\plain \s253\li720\sb120\keepn \b\f21 Address Register Indirect with Displacement and Index\par \pard\plain \s3\qj\sb120 \f20 The effective address is the sum of the content of the address register, the 16 bit two's complement integer, and the index register.  The index register can be a data or an address register and it can be a word or a long word in size.\par \pard\plain \s4\li720\sb120 \f22\fs20 LEA\tab 4(A0,D1.L),A1\par \pard\plain \s253\li720\sb120\keepn \b\f21 Program Counter Indirect with Displacement\par \pard\plain \s3\qj\sb120 \f20 The effective address is the sum of the content of the program counter and the 16 bit two's complement integer.\par \pard\plain \s4\li720\sb120 \f22\fs20 CLR\tab 4(PC)\par \pard\plain \s253\li720\sb120\keepn \b\f21 Program Counter Indirect with Displacement and Index\par \pard\plain \s3\qj\sb120 \f20 The effective address is the sum of the content of the program counter, the 16 bit two's complement integer, and the index register.  The index register can be a data or an address register and it can be a word or a long word in size.\par \pard\plain \s4\li720\sb120 \f22\fs20 LEA\tab 4(PC,D1.L),A1\par \pard\plain \s253\li720\sb120\keepn \b\f21 Absolute Short Address\par \pard\plain \s3\qj\sb120 \f20 The effective address is specified absolutely.  The address can no be larger than 16 bits.\par \pard\plain \s253\li720\sb120\keepn \b\f21 Absolute Long Address\par \pard\plain \s3\qj\sb120 \f20 The effective address is specified absolutely.  The address is larger than 16 bits.\par \pard\plain \s253\li720\sb120\keepn \b\f21 Immediate Data\par \pard\plain \s3\qj\sb120 \f20 The data is specified absolutely.  The maximum size depends on the opcode.  Hex data can be specified using a "$".\par \pard\plain \s4\li720\sb120 \f22\fs20 MOVE\tab #6,D0\par MOVE\tab #-6,D0\par MOVE\tab #$6,D0\par MOVE\tab #$-6,D0\par \pard\plain \s253\li720\sb120\keepn \b\f21 Implicit Reference\par \pard\plain \s3\qj\sb120 \f20 The operands needed are known by the opcode.  No operands are given.\par \pard\plain \s4\li720\sb120 \f22\fs20 RTS\par \pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 \sect \sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 IV-{\chpgn }\tab MOPS {\f21 Assembler\par }}{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 \tab \tab \tab Chapter x\emdash name\tab IV-{\chpgn }\par }{\headerf \pard\plain \s244\tx720\tqr\tx8640\tqr\tx9360 \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Chapter 3\emdash Instructions\par \pard\plain \s254\sb240\keepn \b\f21 About this chapter\par \pard\plain \s3\qj\sb120 \f20 This chapter explains the machine instructions for the Mops assembler module.  The machine instructions are based on the standard 68000 instruction set syntax.  The two significant differences are: 1) you can call the addresses of Mops objects as described in chapter 2, and 2) the default operand size is L (long word).  There is a table of all the machine instructions and another of the condition fields for instructions Bcc, DBcc, and Scc.  Following the tables are written descriptions of each instruction giving details which the tables do not cover.\par \pard\plain \s254\sb240\keepn \b\f21 Motorola 68000 Instructions\par \pard\plain \s3\qj\sb120 \f20 {\plain \sect }\sectd \sbknone\linemod0\linex0\cols1\colsx0\endnhere {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 IV-{\chpgn }\tab MOPS {\f21 Assembler\par }\trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx3340\clshdng0\cellx3880\clshdng0\cellx4420\clshdng0\cellx4960\clshdng0\cellx6760\clmgf \clshdng0\cellx8560\clmrg \clshdng0\cellx8560\clmrg \clshdng0\cellx8560\clmrg \clshdng0\cellx8560\clmrg \clshdng0\cellx8560\pard\plain \s6\sb80\intbl \f15\fs20 \cell \cell \cell \cell \cell \cell Condition Codes\cell \cell \cell \cell \cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx3340\clmgf \clshdng0\cellx4960\clmrg \clshdng0\cellx4960\clmrg \clshdng0\cellx4960\clshdng0\cellx6760\clshdng0\cellx7120\clshdng0\cellx7480\clshdng0\cellx7840\clshdng0\cellx8200\clshdng0\cellx8560\pard\plain \s6\sb80\intbl \f15\fs20 Opcode\cell Opcode Description\cell Operand Size\cell \cell \cell Operand Syntax \cell X\cell N\cell Z\cell V\cell C\cell \pard\plain \intbl \f20 \row \pard\plain \s244\tx720\tqr\tx8640\tqr\tx9360 \f20 {\f21 \par }}{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 \tab \tab Chapter 3\emdash Instructions\tab IV-\chpgn \par \trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx3340\clshdng0\cellx3880\clshdng0\cellx4420\clshdng0\cellx4960\clshdng0\cellx6760\clmgf \clshdng0\cellx8560\clmrg \clshdng0\cellx8560\clmrg \clshdng0\cellx8560\clmrg \clshdng0\cellx8560\clmrg \clshdng0\cellx8560\pard\plain \s6\sb80\intbl \f15\fs20 \cell \cell \cell \cell \cell \cell Condition Codes\cell \cell \cell \cell \cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx3340\clmgf \clshdng0\cellx4960\clmrg \clshdng0\cellx4960\clmrg \clshdng0\cellx4960\clshdng0\cellx6760\clshdng0\cellx7120\clshdng0\cellx7480\clshdng0\cellx7840\clshdng0\cellx8200\clshdng0\cellx8560\pard\plain \s6\sb80\intbl \f15\fs20 Opcode\cell Opcode Description\cell Operand Size\cell \cell \cell Operand Syntax \cell X\cell N\cell Z\cell V\cell C\cell \pard\plain \intbl \f20 \row \pard\plain \s244\tx720\tqr\tx8640\tqr\tx9360 \f20 \par }{\footerr \pard\plain \s243\tx720\tqr\tx8640\tqr\tx9360 \f20 \par }\trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx3340\clshdng0\cellx3880\clshdng0\cellx4420\clshdng0\cellx4960\clshdng0\cellx6760\clmgf \clshdng0\cellx8560\clmrg \clshdng0\cellx8560\clmrg \clshdng0\cellx8560\clmrg \clshdng0\cellx8560\clmrg \clshdng0\cellx8560\pard\plain \s6\sb80\intbl \f15\fs20 {\b \cell \cell \cell \cell \cell \cell Condition Codes\cell \cell \cell \cell \cell }\pard\plain \intbl \f20 {\b \row }\trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx3340\clmgf \clshdng0\cellx4960\clmrg \clshdng0\cellx4960\clmrg \clshdng0\cellx4960\clshdng0\cellx6760\clshdng0\cellx7120\clshdng0\cellx7480\clshdng0\cellx7840\clshdng0\cellx8200\clshdng0\cellx8560\pard\plain \s6\sb80\intbl \f15\fs20 {\b Opcode\cell Opcode Description\cell Operand Size\cell \cell \cell Operand Syntax \cell X\cell N\cell Z\cell V\cell C\cell }\pard\plain \intbl \f20 {\b \row }\trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx3340\clshdng0\cellx3880\clshdng0\cellx4420\clshdng0\cellx4960\clshdng0\cellx6760\clshdng0\cellx7120\clshdng0\cellx7480\clshdng0\cellx7840\clshdng0\cellx8200\clshdng0\cellx8560\pard\plain \s6\sb80\intbl \f15\fs20 ABCD\cell add decimal with extend\cell B\cell \cell \cell Dy,Dx\line -(Ay),-(Ax)\cell A\cell ?\cell D\cell ?\cell M\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 ADD\cell add binary\cell B\cell W\cell L\cell <ea>,Dx\line Dx,<ea>\cell A\cell B\cell C\cell F\cell K\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 ADDA\cell add address\cell \cell W\cell L\cell <ea>,Ax\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 ADDI\cell add immediate\cell B\cell W\cell L\cell #<data>,<ea>\cell A\cell B\cell C\cell F\cell K\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 ADDQ\cell add quick\cell B\cell W\cell L\cell #<data>,<ea>\cell A\cell B\cell C\cell F\cell K\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 ADDX\cell add extended\cell B\cell W\cell L\cell Dy,Dx\line -(Ay),-(Ax)\cell A\cell B\cell C\cell F\cell K\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 AND\cell AND logical\cell B\cell W\cell L\cell <ea>,Dx\line Dx,<ea>\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 ANDI\cell AND immediate\cell B\cell W\cell L\cell #<data>,<ea>\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 ASL\cell arithmetic shift left\cell B\cell W\cell L\cell Dx,Dy         ( r=0)\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 \cell \cell \cell \cell \cell #<data>,Dy  (r<>0)\line <ea>\cell A\cell B\cell C\cell J\cell P\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 ASR\cell arithmetic shift right\cell B\cell W\cell L\cell Dx,Dy          (r=0)\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 \cell \cell \cell \cell \cell #<data>,Dy  (r<>0)\line <ea>\cell A\cell B\cell C\cell 0\cell R\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 Bcc\cell branch conditionally\cell B/S\cell W\cell \cell <label>\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 BCHG\cell test a bit and change\cell B\cell \cell L\cell Dx,<ea>\par #<data>,<ea>\cell -\cell -\cell E\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 BCLR\cell test a bit and clear\cell B\cell \cell L\cell Dx,<ea>\line #<data>,<ea>\cell -\cell -\cell E\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 BRA\cell branch always\cell B/S\cell W\cell \cell <label>\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 BSET\cell test a bit and set\cell B\cell \cell L\cell Dx,<ea>\line #<data>,<ea>\cell -\cell -\cell E\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 BSR\cell branch to subroutine\cell B/S\cell W\cell \cell <label>\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 BTST\cell test a bit\cell B\cell \cell L\cell Dx,<ea>\line #<data>,<ea>\cell -\cell -\cell E\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 CHK\cell check register against bounds\cell \cell W\cell \cell <ea>,Dx\cell -\cell V\cell ?\cell ?\cell ?\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 CLR\cell clear an operand\cell B\cell W\cell L\cell <ea>\cell -\cell 0\cell 1\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 CMP\cell arithmetic compare\cell B\cell W\cell L\cell <ea>,Dx\cell -\cell B\cell C\cell G\cell L\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 CMPA\cell arithmetic compare address\cell \cell W\cell L\cell <ea>,Ax\cell -\cell B\cell C\cell G\cell L\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 CMPI\cell compare immediate\cell B\cell W\cell L\cell #<data>,<ea>\cell -\cell B\cell C\cell G\cell L\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 CMPM\cell compare memory\cell B\cell W\cell L\cell (Ay)+,(Ax)+\cell -\cell B\cell C\cell G\cell L\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 DBcc\cell test condition, decrement and branch\cell \cell W\cell \cell Dx,<label>\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 DIVS\cell signed divide\cell \cell W\cell \cell <ea>,Dx\cell -\cell B\cell C\cell H\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 DIVU\cell unsigned divide\cell \cell W\cell \cell <ea>,Dx\cell -\cell B\cell C\cell H\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 EOR\cell exclusive OR logical\cell B\cell W\cell L\cell Dx,<ea>\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 EORI\cell exclusive OR immediate\cell B\cell W\cell L\cell #<data>,<ea>\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 EXG\cell exchange registers\cell \cell \cell L\cell Rx,Ry\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 EXT\cell sign extend\cell \cell W\cell L\cell Dx\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 JMP\cell jump\cell NA\cell \cell \cell <ea>\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 JSR\cell jump to subroutine\cell NA\cell \cell \cell <ea>\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 LEA\cell load effective address\cell \cell \cell L\cell <ea>,Ax\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 LINK\cell link and allocate\cell NA\cell \cell \cell Ax,#<displacement>\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 LSL\cell logical shift left\cell B\cell W\cell L\cell Dx,Dy           (r=0)\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 \cell \cell \cell \cell \cell #<data>,Dy  (r<>0)\line <ea>\cell A\cell B\cell C\cell 0\cell P\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 LSR\cell logical shift right\cell B\cell W\cell L\cell Dx,Dy           (r=0)\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 \cell \cell \cell \cell \cell #<data>,Dy  (r<>0)\line <ea>\cell A\cell B\cell C\cell 0\cell R\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 MOVE\cell move data from source to destination\cell B\cell W\cell L\cell <ea>,<ea>\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 MOVE to CCR\cell move to condition codes\cell \cell W\cell \cell <ea>,CCR\cell S\cell S\cell S\cell S\cell S\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 MOVEto SR\cell move to the status register\cell \cell W\cell \cell <ea>,SR\cell S\cell S\cell S\cell S\cell S\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 MOVE from SR\cell move from the status register\cell \cell W\cell \cell SR,<ea>\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 MOVE\cell move user stack pointer\cell \cell \cell L\cell USP,Ax\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 USP\cell \cell \cell \cell \cell Ax,USP\cell \cell \cell \cell \cell \cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 MOVEA\cell move address\cell \cell W\cell L\cell <ea>,Ax\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 MOVEM\cell move multiple registers\cell \cell W\cell L\cell <register list>,<ea>\line <ea>,<register list>\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 MOVEP\cell move peripheral data\cell \cell W\cell L\cell Dx,d(Ay) \line d(Ay),Dx\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 MOVEQ\cell move quick\cell \cell \cell L\cell #<data>,Dx\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 MULS\cell signed multiply\cell \cell W\cell \cell <ea>,Dx\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 MULU\cell unsigned multiply\cell \cell W\cell \cell <ea>,Dx\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 NBCD\cell negate decimal with extend\cell B\cell \cell \cell <ea>\cell A\cell ?\cell D\cell ?\cell N\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 NEG\cell two's complement negation\cell B\cell W\cell L\cell <ea>\cell A\cell B\cell C\cell I\cell O\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 NEGX\cell negate with extend\cell B\cell W\cell L\cell <ea>\cell A\cell B\cell C\cell I\cell O\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 NOP\cell no operation\cell NA\cell \cell NA\cell -\cell -\cell -\cell -\cell -\cell \cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 NOT\cell logical complement\cell B\cell W\cell L\cell <ea>\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 OR\cell inclusive OR logical\cell B\cell W\cell L\cell <ea>,Dx\line Dx,<ea>\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 PEA\cell push effective address\cell \cell \cell L\cell <ea>\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 RESET\cell reset external devices\cell NA\cell \cell NA\cell -\cell -\cell -\cell -\cell -\cell \cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 ROL\cell rotate without extend left\cell B\cell W\cell L\cell Dx,Dy           (r=0)\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 \cell \cell \cell \cell \cell #<data>,Dy  (r<>0)\line <ea>\cell -\cell B\cell C\cell 0\cell P\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 ROR\cell rotate without extend right\cell B\cell W\cell L\cell Dx,Dy           (r=0)\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 \cell \cell \cell \cell \cell #<data>,Dy  (r<>0) \line <ea>\cell -\cell B\cell C\cell 0\cell R\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 ROXL\cell rotate with extend left\cell B\cell W\cell L\cell Dx,Dy           (r=0)\cell -\cell B\cell C\cell 0\cell Q\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 \cell \cell \cell \cell \cell #<data>,Dy  (r<>0)\line <ea>\cell A\cell B\cell C\cell 0\cell P\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 ROXR\cell rotate with extend right\cell B\cell W\cell L\cell Dx,Dy           (r=0)\cell -\cell B\cell C\cell 0\cell Q\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 \cell \cell \cell \cell \cell #<data>,Dy  (r<>0)\line <ea>\cell A\cell B\cell C\cell 0\cell R\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 RTE\cell return from exception\cell NA\cell \cell NA\cell T\cell T\cell T\cell T\cell T\cell \cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 RTR\cell return and restore condition codes\cell NA\cell \cell NA\cell T\cell T\cell T\cell T\cell T\cell \cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 RTS\cell return from subroutine\cell NA\cell \cell NA\cell -\cell -\cell -\cell -\cell -\cell \cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 SBCD\cell subtract decimal with extend\cell B\cell \cell \cell Dy,Dx\line -(Ay),-(Ax)\cell A\cell ?\cell D\cell ?\cell N\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 Scc\cell set according to condition\cell B\cell \cell \cell <ea>\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 STOP\cell stop program execution\cell NA\cell \cell \cell #<data>\cell U\cell U\cell U\cell U\cell U\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 SUB\cell subtract binary\cell B\cell W\cell L\cell <ea>,Dx\line Dx,<ea>\cell A\cell B\cell C\cell G\cell L\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 SUBA\cell subtract address\cell \cell W\cell L\cell <ea>,Ax\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 SUBI\cell subtract immediate\cell B\cell W\cell L\cell #<data>,<ea>\cell A\cell B\cell C\cell G\cell L\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 SUBQ\cell subtract quick\cell B\cell W\cell L\cell #<data>,<ea>\cell A\cell B\cell C\cell G\cell L\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 SUBX\cell subtract with extend\cell B\cell W\cell L\cell Dy,Dx\line -(Ay),-(Ax)\cell A\cell B\cell D\cell G\cell L\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 SWAP\cell swap register halves\cell \cell W\cell \cell Dx\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 TAS\cell test and set an operand\cell B\cell \cell \cell <ea>\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 TRAP\cell trap\cell NA\cell \cell \cell #<vector>\cell -\cell -\cell -\cell -\cell -\cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 TRAPV\cell trap on overflow\cell NA\cell \cell NA\cell -\cell -\cell -\cell -\cell -\cell \cell \pard\plain \intbl \f20 \row \pard\plain \s6\sb80\intbl \f15\fs20 TST\cell test an operand\cell B\cell W\cell L\cell <ea>\cell -\cell B\cell C\cell 0\cell 0\cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx3340\clshdng0\cellx3880\clshdng0\cellx4420\clshdng0\cellx4960\clshdng0\cellx6760\clshdng0\cellx7120\clshdng0\cellx7480\clshdng0\cellx7840\clshdng0\cellx8200\clshdng0\cellx8560\pard\plain \s6\sb80\intbl \f15\fs20 UNLK\cell unlink\cell NA\cell \cell Ax\cell -\cell -\cell -\cell -\cell -\cell \cell \pard\plain \intbl \f20 \row \pard \sect \sectd \sbknone\linemod0\linex0\cols2\colsx0\endnhere {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 IV-{\chpgn }\tab MOPS {\f21 Assembler\par }}{\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 \tab \tab Chapter 3\emdash Instructions\tab IV-\chpgn \par }\pard\plain \s8\ri-3960\sb240\keepn \b\f20 Notes (other than for condition codes):\par \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 B\cell byte sized operand\cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 W\cell word sized operand\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 L\cell long word operand\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 S\cell short branch (byte displacement)\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 NA\cell not applicable\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 <ea>\cell effective address\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 #<data>\cell immediate data (size depends on instruction)\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 #<vector>\cell 0 - 15\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 #<displacement>\cell 16 bit two's complement integer\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 #<register list>\cell registers to be moved\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 <label>\cell user defined label\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 ( )\cell indirect\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 -( )\cell predecrement indirect\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 ( )+\cell postincrement indirect\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 d(Ax)\cell address register with displacement\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 Ax,Ay\cell address register\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 Dx,Dy\cell data register\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 Rx,Ry\cell address register or data register\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 CCR\cell condition code byte of status register\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 SR\cell status register\cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 USP\cell user stack pointer\cell \pard\plain \intbl \f20 \row \pard\plain \s8\ri-3960\sb240\keepn \b\f20 Condition codes:\par \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 N\cell Negative\cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 Z\cell Zero\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 V\cell Overflow\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 C\cell Carry\cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1360\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 X\cell Extend\cell \pard\plain \intbl \f20 \row \pard\plain \s8\ri-3960\sb240\keepn \b\f20 Notes on condition codes:\par \trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 ?\cell Undefined after operation\cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 -\cell Unaffected by the operation\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 1\cell Set\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 0\cell Cleared\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 A\cell X <- C\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 B\cell N <- Rm\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 C\cell Z <- ~Rm * \'c9 * ~R0\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 D\cell Z <- Z * ~Rm * \'c9 * ~R0\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 E\cell Z <- ~Rm\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 F\cell V <- Sm * Dm * ~Rm + ~Sm * ~Dm * Rm\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 G\cell V <- ~Sm * Dm * ~Rm + Sm * ~Dm * Rm\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 H\cell V <- Division Overflow\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 I\cell V <- Dm * Rm\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 J\cell V <- Dm * (~Dm-1 + \'c9 + ~Dm-r)\line + ~Dm * (Dm-1 + \'c9 + Dm-r)\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 K\cell C <- Sm * Dm + ~Rm * Dm + Sm * ~Rm\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 L\cell C <- Sm * ~Dm + Rm * ~Dm + Sm * Rm\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 M\cell C <- Decimal Carry\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 N\cell C <- Decimal Borrow\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 O\cell C <- Dm + Rm\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 P\cell C <- Dm-r+1\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 Q\cell C <- X\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 R\cell C <- Dr-1\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 S\cell Set according to source operand\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 T\cell Set according to contents of word on the stack\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 U\cell Set according to immediate operand\cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 V\cell Set if Dx <0, Clear if Dx > <ea>\line otherwise undefined\cell \pard\plain \intbl \f20 \row \pard\plain \s8\ri-3960\sb240\keepn \b\f20 Notes on notes on condition codes:\par \trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 Sm\cell most significant bit of source operand before operation\cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 Dm\cell most significant bit of destination operand before operation\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 Rm\cell most significant bit of result after operation\cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 r\cell shift amount\cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx1000\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 n\cell bit number\cell \pard\plain \intbl \f20 \row \pard\plain \s8\ri-3960\sb240\keepn \b\f20 Condition fields\par \pard\plain \s3\qc\sb120\tx1440\tx3780\tx4050\tx4410\tx5040\tx6840\tx7110\tx7380\tx7650\tx7920 \f20 (Use for test code cc in Bcc, DBcc, and Scc)\par \trowd \trgaph80\trleft-80 \clshdng0\cellx460\clshdng0\cellx2260\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 Test Code\cell \line Operation\cell \line Test to Return True\cell \pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx460\clshdng0\cellx2260\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 \cell \cell \cell \pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 CC\cell carry clear\cell ~C\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 CS\cell carry set\cell C\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 EQ\cell equal\cell Z\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 F\cell always false\cell 0\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 GE\cell greater than or equal\cell N * V + ~N * ~V\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 GT\cell greater than\cell N * V * ~Z + ~V * ~V * ~Z\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 HI\cell high\cell ~C * ~Z\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 LE\cell less than or equal\cell Z + N * ~V + ~N * V\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 LS\cell low or same\cell C + Z\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 LT\cell less than\cell N * ~V + ~N * V\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 MI\cell minus\cell N\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 NE\cell not equal\cell ~Z\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 PL\cell plus\cell ~N\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 T\cell always true\cell 1\cell }\pard\plain \intbl \f20 \row \pard\plain \s7\intbl \f15\fs20 {\f20 VC\cell no overflow\cell ~V\cell }\pard\plain \intbl \f20 \row \trowd \trgaph80\trleft-80 \clshdng0\cellx460\clshdng0\cellx2260\clshdng0\cellx4240\pard\plain \s7\intbl \f15\fs20 {\f20 VS\cell overflow\cell V\cell }\pard\plain \intbl \f20 {\fs20 \row }\pard\plain \s3\qc\sb120 \f20 {\b\f21 \sect }\sectd \sbknone\linemod0\linex0\cols1\colsx0\endnhere \pard\plain \s9\qc\sb120\keepn \f20 {{\pict\macpict\picw420\pich193\picscaled 11a70000000000c701a41101a00082a0008e01000a0000000002d0024098003600000000003a01a800000000003a01a400000000003a01a400011bfb00043ffff00000f9ff00f8f300051ffff800007ffaff00fcfb001cfb0005200010000080fa000008f30005100008000040fa000004fb001cfb0005200010000080fa000008f30005100008000040fa000004fb001cfb0005200010000080fa000008f30005100008000040fa000004fb002b02103c40fe00062088100000800ffc00014008f90002101e20fe00071044080000400780fd00012004fb003402104240fe00072088100000801080fd0005400800000180fd0002102120fe00071044080000400840fd00012004fe0000c0ff003602284040fe0011205012000080109e1c5ce2c3c00800000240fd0002102020fe0011102809000040084f0e2e7161e00400000120ff003617284040800000205014000080109122611324400900000420fd001710202040000010280a000040084891308992200480000210ff003602443c40fe001120201fffff8010912240f224400a00000420fd0002101e20fe001110100fffffc0084891207912200500000210ff003602440240fe001120501402008010913e411224400ffffe0420fd0002100120fe001110280a01004008489f2089122007ffff0210ff003602fe0240fe0011205012020080109120411224400a00000420fd0002100120fe0011102809010040084890208912200500000210ff003602824240fe0011208810020080109122411224400900000420fd0002102120fe0011104408010040084891208912200480000210ff003617823c7c8000002088100200800f1e1c40f223c00800000240fd00171f1e3e400000104408010040078f0e207911e00400000120ff0028fb00072000100200800010fc00040800000180f700071000080100400008fc000004fe0000c0ff0020fb00072000100200800010fc000008f300071000080100400008fc000004fb001cfb0005200010020080fa000008f30005100008010040fa000004fb001cfb0005200010020080fa000008f30005100008010040fa000004fb001bfb00043ffff00200f9ff00f8f300051ffff801007ffaff00fcfb000af8000002e6000001f1000af8000002e6000001f1000af8000002e6000001f1000af8000002e6000001f1000af8000002e6000001f1000af8000002e6000001f10010fb00033ffff002e900031ffff801f10010fb000320001002e9000310000801f10010fb000320001002e9000310000801f10010fb000320001002e9000310000801f10010fb000320001002e9000310000801f10010fb000320f01002e9000310780801f10010fb000321081002e9000310840801f10010fb000321001202e9000310800901f10010fb000321001402e9000310800a01f10010fb000321001ffee9000310800ffff1000efb0002210014e8000210800af0000efb0002210012e80002108009f0000efb0002210810e80002108408f0000efb000220f010e80002107808f0000efb0002200010e80002100008f0000efb0002200010e80002100008f0000efb0002200010e80002100008f0000efb00023ffff0e800021ffff8f00002cb0002cb0002cb0002cb0002cb0002cb0002cb0009f800030fffffe0d80009f8000308000020d80009f8000308000020d80009f8000308000020d80009f8000308000020d80009f8000308000020d80009f8000308000020d80009f8000308000020d80009f8000308000020d800980036003a0000007401a8003a0000007401a4003a0000007401a4000109f8000308000020d80009f8000308000020d8001cf800010800f9ff05f800007fffe0f300007ffaff06fc00003ffff0001df80002080080fa0005080000400020f3000040fa0006040000200010001df80002080080fa0005080000400020f3000040fa0006040000200010001df80002080080fa0005080000400020f3000040fa00060400002000100022f800030800800ffc000640080000408820f30002400780fd000720040000204410003102103c7cfb00040800801080fd000640080000408820fe0002080f1ffd000006fe0002400840fd000720040000204410003402104242fb000f080080109e1c5ce2c3c0080002405020fe000308109080fe000009fe000e40084f0e2e7161e0040001202810003402284042fb000f08048010912261132440080001405020fe000308101080fe0012108000024008489130899220040000a0281000350328404240fc000f08028010912240f224400fffffc02020fe000308101090fe001210800001400848912079122007ffffe01010003302443c7cfb000f0fff8010913e41122440080201405020fe0002080f1ffd00121081ffffc008489f20891220040100a02810003202440250fa000e028010912041122440080202405020fe0002080094fd0012108000014008489020891220040101202810003202fe0248fa000e048010912241122440080200408820fe0002080092fd0012108000024008489120891220040100204410003102824244f9000d800f1e1c40f223c0080200408820fe0002081091fd000009fe000e40078f0e207911e0040100204410002f03823c4240fa0002800010fc0005080200400020fe00030f8f1090fe000006fe0002400008fc0006040100200010001ff60002800010fc0005080200400020f30002400008fc0006040100200010001bf6000080fa0005080200400020f3000040fa0006040100200010001bf6000080fa0005080200400020f3000040fa00060401002000100019f600f9ff05f802007fffe0f300007ffaff06fc01003ffff0000aed000002e6000001fc000aed000002e6000001fc000aed000002e6000001fc000aed000002e6000001fc000aed000002e6000001fc000aed000002e6000001fc0011ed000402007fffe0ea000501003ffff00011ed00040200400020ea000501002000100011ed00040200400020ea000501002000100011ed00040200400020ea000501002000100011ed00040200400020ea000501002000100011ed0004020040f020ea000501002078100011ed00040200410820ea000501002084100011ed00040202410020ea000501012080100011ed00040201410020ea00050100a080100011ed000403ffc10020ea000501ffe08010000eec000301410020e80003a08010000fec000302410020e9000401208010000deb0002410820e80003208410000deb000240f020e80003207810000deb0002400020e80003200010000deb0002400020e80003200010000deb0002400020e80003200010000deb00027fffe0e800033ffff00002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0010f8000003f6ff00e0f200001ff6fffc0012f8000002f6000020f2000010f7000001fc0012f8000002f6000020f2000010f7000001fc0012f8000002f6000020f2000010f7000001fc0012f8000002f6000020f2000010f7000001fc009800360074000000ae01a80074000000ae01a40074000000ae01a4000112f8000002f6000020f2000010f7000001fc0012f8000002f6000020f2000010f7000001fc0012f8000002f6000020f2000010f7000001fc0018fb00033ffff002f6000020f2000010f7000501003ffff0001efb00042000100200f9ff02f80020f2000210007ffaff06fc0100200010001ffb0005200010020080fa0002080020f20002100040fa0006040100200010001ffb0005200010020080fa0002080020f20002100040fa0006040100200010002302f87880fe0005200010020080fa0002080020f20002100040fa0006040100200010002f02848480fe000620f0100200800ffc000340080020fb00030f878f80fc00041000400780fd000720040100207810003002848480fe00072108100200801080fd000340080020fb000308484840fc00041000400840fd000720040100208410003202848481fe000f210012020080109e1c5ce2c3c0080020fb000308484840fc0010100040084f0e2e7161e0040101208010003102f88480fe000f21001402008010912261132440090020fb000008fe48fc001010024008489130899220040100a08010003202a08480fe000f21001fffff8010912240f224400a0020fb00030f884f80fc00101001400848912079122007ffffe08010003102908480fe000f21001400008010913e411224400fffe0fb00020a084afb00101fffc008489f20891220040000a08010002e02888480fe000d210012000080109120411224400af90002090849fa000f014008489020891220040001208010002f028478f9fe000d2108100000801091224112244009f9000308884880fb000f024008489120891220040000208410002afb000d20f0100000800f1e1c40f223c008f9000308478848fa000e40078f0e207911e0040000207810001ffb00072000100000800010fc000008ee0002400008fc0006040000200010001ffb00072000100000800010fc000008ee0002400008fc0006040000200010001bfb0005200010000080fa000008ee000040fa0006040000200010001bfb00053ffff0000080fa000008ee000040fa00060400003ffff00010f600f9ff00f8ee00007ffaff00fcfb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0002cb0010f8000003f4ff00c0f600000ff4fffc0012f8000002f4000040f6000008f5000001fc0012f8000002f4000040f6000008f5000001fc0098003600ae000000c701a800ae000000c701a400ae000000c701a4000112f8000002f4000040f6000008f5000001fc0012f8000002f4000040f6000008f5000001fc0012f8000002f4000040f6000008f5000001fc0012f8000002f4000040f6000008f5000001fc0013f8000002f500010150f600002af5000001fc0018fb00033ffff002f40000e0f600001cf5000501003ffff00022fb00042000100200f9ff00f8fe000040f6000008fe00007ffaff06fc01002000100025fb0005200010020080fa00050800007fffe0f800051ffff8000040fa00060401002000100025fb0005200010020080fa0005080000400020f80005100008000040fa00060401002000100025fb0005200010020080fa0005080000400020f80005100008000040fa0006040100200010003402f87889fe000620f0100200800ffc000640080000400020fe000d1f0f113e00001000080000400780fd00072004010020f010003502848489fe00072108100200801080fd000640080000408820fe000d1090912100001044080000400840fd000720040100210810003702848451fe0012210012020080109e1c5ce2c3c0080000408820fe001910908a210000104408000040084f0e2e7161e004010121001000371884845102000021001402008010912261132440090000405020fe001910908a21200010280800024008489130899220040100a10010003702f88421fe001221001fffff8010912240f224400a0000405020fe00191f10843e00001028080001400848912079122007ffffe10010003702a08451fe001221001400008010913e411224400fffffc02020fe001914108a28000010100fffffc008489f20891220040000a10010003702908451fe0012210012000080109120411224400a0000405020fe001912108a24000010280800014008489020891220040001210010003702888489fe001221081000008010912241122440090000405020fe001911109122000010280800024008489120891220040000210810003718847889f2000020f0100000800f1e1c40f223c0080000408820fe0019108f11212000104408000040078f0e207911e004000020f0100029fb00072000100000800010fc0005080000408820f800071044080000400008fc00060400002000100029fb00072000100000800010fc0005080000400020f800071000080000400008fc00060400002000100025fb0005200010000080fa0005080000400020f80005100008000040fa00060400002000100025fb00053ffff0000080fa0005080000400020f80005100008000040fa00060400003ffff0001af600f9ff05f80000400020f8000510000800007ffaff00fcfb000eeb00027fffe0f800021ffff8f000a0008fa00083ff}}\par \pard\plain \s251\qc\sb120\tx2160 \b\f21 Figure 3\emdash Shifts and Rotates{\fs28 \par }\pard\plain \s3\qc\sb120 \f20 {\plain \sect }\sectd \linemod0\linex0\cols1\colsx0\endnhere {\headerl \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 IV-{\chpgn }\tab {\f21 Mops} {\f21 Assembler\par }}{\footerr \pard\plain \s243\tx720\tqr\tx8640\tqr\tx9360 \f20 \par }\pard\plain \s254\sb240\keepn \b\f21 Instruction Descriptions\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ABCD\tab Add Decimal with Extend\par \pard\plain \s3\qj\sb120 \f20 This instruction adds the contents of the two operands and the contents of the X bit together with binary coded decimal arithmetic and places the result into the second operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ADD\tab Add Binary\par \pard\plain \s3\qj\sb120 \f20 This instruction adds the contents of the two operands together with two's complement binary arithmetic and places the result into the second operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ADDA\tab Add Address\par \pard\plain \s3\qj\sb120 \f20 This instruction adds the contents of the two operands together with two's complement binary arithmetic and places the result into the second operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ADDI\tab Add Immediate\par \pard\plain \s3\qj\sb120 \f20 This instruction adds the contents of the two operands together with two's complement binary arithmetic and places the result into the second operand.  The immediate data can be up to 32 bits long, depending on the operand size.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ADDQ\tab Add Quick\par \pard\plain \s3\qj\sb120 \f20 This instruction adds the contents of the two operands together with two's complement binary arithmetic and places the result into the second operand.  The immediate data can be the integers 1 through 8.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ADDX\tab Add Extended\par \pard\plain \s3\qj\sb120 \f20 This instruction adds the contents of the two operands and the X bit together with two's complement binary arithmetic and places the result into the second operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 AND\tab AND Logical\par \pard\plain \s3\qj\sb120 \f20 This instruction performs a bitwise logical AND on the contents of the two operands and places the result into the second operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ANDI\tab AND Immediate\par \pard\plain \s3\qj\sb120 \f20 This instruction performs a bitwise logical AND on the contents of the two operands and places the result into the second operand.  The immediate data can be up to 32 bits long, depending on the operand size.  With byte or word operand size the second operand can be the status register.  If byte, then only the condition codes are affected.  If word, then it is a privileged operation and the whole status register is affected.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ASL\tab Arithmetic Shift Left\par \pard\plain \s3\qj\sb120 \f20 If there are two operands, then this instruction arithmetically shifts to the left the contents of the second operand by the amount specified in the first operand.  If the first operand is a data register, then the distance shifted is in the right most six bits of the first operand.  If the first operand is immediate data, then the immediate data can be the integers 1 to 8.  If there is only one operand, then the contents of the operand will be arithmetically shifted to the left only one bit and the operand size is limited to word.  Zeros are shifted into the low order bit and the last value shifted out of the high order bit is placed into the C and X bits.  See Figure 3.  This instruction is identical to LSL.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ASR\tab Arithmetic Shift Right\par \pard\plain \s3\qj\sb120 \f20 If there are two operands, then this instruction arithmetically shifts to the right the contents of the second operand by the amount specified in the first operand.  If the first operand is a data register, then the distance shifted is in the right most six bits of the first operand.  If the first operand is immediate data, then the immediate data can be the integers 1 to 8.  If there is only one operand, then the contents of the operand will be arithmetically shifted to the right only one bit and the operand size is limited to word.  The high order bit is duplicated with each shift of a bit and the last value shifted out of the low order bit is placed into the C and X bits.  See Figure 3.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 Bcc\tab Branch Conditionally\par \pard\plain \s3\qj\sb120 \f20 This instruction causes the program execution to continue at the user specified label if the condition is met.  The condition is specified by the cc which one of the codes in Table 3.  Two exceptions are F and T; those conditions codes re not supported in Bcc (BRA can be used).\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 BCHG\tab Test a Bit and Change\par \pard\plain \s3\qj\sb120 \f20 This instruction complements a bit.  The bit is in the contents of the second operand and the location within the second operand is specified by the first operand.  The second operand can be a data register or a byte in memory.  If it is a data register, then any one of the 32 bits in the register can be complemented.  The exact bit is specified by the first operand and the bits in the data register are numbered from 1 to 32 and from right to left.  If a byte of memory is used, then the bits are numbered from 1 to 8.  If the first operand is a data register and the second operand is a byte, then the contents of the data register are modulo 8 for the duration of the instruction.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 BCLR\tab Test a Bit and Clear\par \pard\plain \s3\qj\sb120 \f20 This instruction clears a bit.  The bit is in the contents of the second operand and the location within the second operand is specified by the first operand.  The second operand can be a data register or a byte in memory.  If it is a data register, then any one of the 32 bits in the register can be cleared.  The exact bit is specified by the first operand and the bits in the data register are numbered from 1 to 32 and from right to left.  If a byte of memory is used, then the bits are numbered from 1 to 8.  If the first operand is a data register and the second operand is a byte, then the contents of the data register are modulo 8 for the duration of the instruction.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 BRA\tab Branch Always\par \pard\plain \s3\qj\sb120 \f20 This instruction causes the program execution to automatically branch to the user specified label.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 BSET\tab Test a Bit and Set\par \pard\plain \s3\qj\sb120 \f20 This instruction sets a bit.  The bit is in the contents of the second operand and the location within the second operand is specified by the first operand.  The second operand can be a data register or a byte in memory.  If it is a data register, then any one of the 32 bits in the register can be set.  The exact bit is specified by the first operand and the bits in the data register are numbered from 1 to 32 and from right to left.  If a byte of memory is used, then the bits are numbered from 1 to 8.  If the first operand is a data register and the second operand is a byte, then the contents of the data register are modulo 8 for the duration of the instruction.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 BSR\tab Branch to Subroutine\par \pard\plain \s3\qj\sb120 \f20 This instruction pushes the contents of the Program Counter (PC) onto the data stack -(A7) and then branches to the user specified label.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 BTST\tab Test a Bit\par \pard\plain \s3\qj\sb120 \f20 This instruction tests a bit.  The bit is in the contents of the second operand and the location within the second operand is specified by the first operand.  The second operand can be a data register or a byte in memory.  If it is a data register, then any one of the 32 bits in the register can be tested.  The exact bit is specified by the first operand and the bits in the data register are numbered from 1 to 32 and from right to left.  If a byte of memory is used, then the bits are numbered from 1 to 8.  If the first operand is a data register and the second operand is a byte, then the contents of the data register are modulo 8 for the duration of the instruction.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 CHK\tab Check Register against Bounds\par \pard\plain \s3\qj\sb120 \f20 This instruction checks the lower half of the contents of the second operand and if it is greater than the upper bound (found in the first operand) or less than 0, then the exception processing is initiated and a TRAP is generated.  The CHK instruction vector (vector #6) is used for the trap.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 CLR\tab Clear an Operand\par \pard\plain \s3\qj\sb120 \f20 This instruction clears the contents of the operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 CMP\tab Compare\par \pard\plain \s3\qj\sb120 \f20 This instruction subtracts the contents of the first operand from the contents of the second operand but does not change the contents of either operand.  Just condition codes are changed.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 CMPA\tab Compare Address\par \pard\plain \s3\qj\sb120 \f20 This instruction subtracts the contents of the first operand from the contents of the second operand but does not change the contents of either operand.  Just condition codes are changed.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 CMPI\tab Compare Immediate\par \pard\plain \s3\qj\sb120 \f20 This instruction subtracts the contents of the first operand from the contents of the second operand but does not change the contents of either operand.  Just condition codes are changed.  The maximum size of the immediate data is determined by the operand size.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 CMPM\tab Compare Memory\par \pard\plain \s3\qj\sb120 \f20 This instruction subtracts the contents of the first operand from the contents of the second operand but does not change the contents of either operand.  Just condition codes are changed.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 DBcc\tab Test Condition, Decrement and Branch\par \pard\plain \s3\qj\sb120 \f20 This instruction first checks to see if the condition is false.  The condition is specified by the cc which is one of the condition codes in Table 3.  All 16 condition codes are usable.  If the condition is false, then the contents of the data register is decremented by 1.  After the decrementation, if the contents of the data register is -1 then the program execution branches to the user specified label.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 DIVS\tab Signed Divide\par \pard\plain \s3\qj\sb120 \f20 This instruction sign divides the contents of the second operand by the contents of the first operand and places the results into the second operand.  The first operand is 16 bits and the second operand is 32 bits.  The result is 32 bits with the quotient in the lower word and the remainder in the upper word of the register.  If the first operand is a 0, then a TRAP is generated.  The Zero Divide vector (vector #5) is used for the TRAP.  If there is an overflow, then the operands are unaffected.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 DIVU\tab Unsigned Divide\par \pard\plain \s3\qj\sb120 \f20 This instruction unsign divides the contents of the second operand by the contents of the first operand and places the results into the second operand.  The first operand is 16 bits and the second operand is 32 bits.  The result is 32 bits with the quotient in the lower word and the remainder in the upper word of the register.  If the first operand is a 0, then a TRAP is generated.  The Zero Divide vector (vector #5) is used for the TRAP.  If there is an overflow, then the operands are unaffected.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 EOR\tab Exclusive OR Logical\par \pard\plain \s3\qj\sb120 \f20 This instruction performs a bitwise logical exclusive OR on the contents of the two operands and places the result into the second operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 EORI\tab Exclusive OR Immediate\par \pard\plain \s3\qj\sb120 \f20 This instruction performs a bitwise logical exclusive OR on the contents of the two operands and places the result into the second operand.  The immediate data can be up to 32 bits long, depending on the operand size.  With byte or word operand size, the second operand can be the status register.  If byte, then only the condition codes are affected.  If word, then it is a privileged operation and the whole status register is affected.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 EXG\tab Exchange registers\par \pard\plain \s3\qj\sb120 \f20 This instruction exchanges the contents of two registers.  They can be both address registers, both data registers, or an address register and a data register.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 EXT\tab Sign Extend\par \pard\plain \s3\qj\sb120 \f20 This instruction extends a byte sized number into a word sized number or a word sized number into a long word sized number.  If the operand size is word, then bit 7 is copied into bits 8 to 15 and if the operand size is long word, then bit 15 is copied into bits 16 to 31.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 JMP\tab Jump\par \pard\plain \s3\qj\sb120 \f20 This instruction causes the program execution to automatically branch to the address specified by the contents of the operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 JSR\tab Jump to Subroutine\par \pard\plain \s3\qj\sb120 \f20 This instruction pushes the contents of the Program Counter (PC) onto the data stack -(A7) and then branches to the address specified by the contents of the operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 LEA\tab Load Effective Address\par \pard\plain \s3\qj\sb120 \f20 This instruction places the contents of the first operand into the address register.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 LINK\tab Link and Allocate\par \pard\plain \s3\qj\sb120 \f20 This instruction pushes the contents of the address register onto the stack.  Then the stack pointer is put into the address register and finally the displacement is added to the stack pointer.  This is used with UNLK to handle nested subroutine calls.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 LSL\tab Logical Shift Left\par \pard\plain \s3\qj\sb120 \f20 If there are two operands, then this instruction logically shifts to the left the contents of the second operand by the amount specified in the first operand.  If the first operand is a data register, then the distance shifted is in the right most six bits of the first operand.  If the first operand is immediate data, then the immediate data can be the integers 1 to 8.  If there is only one operand, then the contents of the operand will be logically shifted to the left only one bit and the operand size is limited to word.  Zeros are shifted into the low order bit and the last value shifted out of the high order bit is placed into the C and X bits.  See Figure 3.  This instruction is identical to ASL.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 LSR\tab Logical Shift Right\par \pard\plain \s3\qj\sb120 \f20 If there are two operands, then this instruction logically shifts to the right the contents of the second operand by the amount specified in the first operand.  If the first operand is a data register, then the distance shifted is in the right most six bits of the first operand.  If the first operand is immediate data, then the immediate data can be the integers 1 to 8.  If there is only one operand, then the contents of the operand will be logically shifted to the right only one bit and the operand size is limited to word.  Zeros are shifted into the low order bit and the last value shifted out of the high order bit is placed into the C and X bits.  See Figure 3.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 MOVE\tab Move Data from Source to Destination\par \pard\plain \s3\qj\sb120 \f20 This instruction moves the contents of the first operand into the location specified by the second operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 MOVE to CCR\tab Move to Condition Codes\par \pard\plain \s3\qj\sb120 \f20 This instruction moves the contents of the first operand into the low order byte of the status register.  The high order byte of the contents of the first operand is ignored.  This is used to set the condition codes.  "To CCR" is not part of the opcode.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 MOVE to SR\tab Move to the Status Register\par \pard\plain \s3\qj\sb120 \f20 This instruction moves the contents of the first operand into the status register.  This is used to set the condition codes and other bits in the status register.  This is a privileged instruction.  "To SR" is not part of the opcode.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 MOVE from SR\tab Move from the Status Register\par \pard\plain \s3\qj\sb120 \f20 This instruction moves the status register into the location specified by the second operand.  "From SR" is not part of the opcode.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 MOVE USP\tab Move User Stack Pointer\par \pard\plain \s3\qj\sb120 \f20 This instruction moves the user stack pointer into the location specified by the second operand or moves the contents of the first operand into the user stack pointer.  This is a privileged instruction.  "USP" is not part of the opcode.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 MOVEA\tab Move Address\par \pard\plain \s3\qj\sb120 \f20 This instruction moves the contents of the first operand into the address register.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 MOVEM\tab Move Multiple Registers\par \pard\plain \s3\qj\sb120 \f20 This instruction moves the contents of more than one register into memory or vice versa.  If the operand size is word, then the low order word is moved out of the registers or sign extended words are moved into the registers.  With one exception, the order of moving data in or out of memory is: D0 to D7, A0 to A7.  The one exception is when predecrement mode is used for the effective address; then the order is A7 to A0, D0 to D7.  In predecrement mode, movement can only be from register to memory and in postincrement mode, movement can only be from memory to register.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 MOVEP\tab Move Peripheral Data\par \pard\plain \s3\qj\sb120 \f20 This instruction moves bytes in a register to alternating bytes in memory.  The transfers start with the high order byte of the register and end with the low order byte.  The transferred bytes go onto even addressed memory bytes.  If the effective address is even and the operand size is long word, then the resulting memory, starting at the effective address is 31-24 register byte, empty byte, 23-16 register byte, empty byte, 15-8 register byte, empty byte, 7-0 register byte, empty byte.  The exact opposite can be done.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 MOVEQ\tab Move Quick\par \pard\plain \s3\qj\sb120 \f20 This instruction moves an 8 bit number into a data register.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 MULS\tab Signed Multiply\par \pard\plain \s3\qj\sb120 \f20 This instruction multiplies the contents of two word sized signed operands and leaves a long word sized signed result in the second operand.  The high order word of the second operand is ignored in multiplying and is written over by the result.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 MULU\tab Unsigned Multiply\par \pard\plain \s3\qj\sb120 \f20 This instruction multiplies the contents of two word sized unsigned operands and leaves a long word sized unsigned result in the second operand.  The high order word of the second operand is ignored in multiplying and is written over by the result.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 NBCD\tab Negate Decimal with Extend\par \pard\plain \s3\qj\sb120 \f20 This instruction negates a binary coded decimal number and uses the X bit to do it.  The operation is 0 minus the contents of the operand minus the X bit.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 NEG\tab Negate\par \pard\plain \s3\qj\sb120 \f20 This instruction negates a two's complement number and does not use the X bit to do it.  The operation is 0 minus the contents of the operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 NEGX\tab Negate with Extend\par \pard\plain \s3\qj\sb120 \f20 This instruction negates a two's complement number and uses the X bit to do it.  The operation is 0 minus the contents of the operand minus the X bit.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 NOP\tab No Operation\par \pard\plain \s3\qj\sb120 \f20 This instruction does nothing except increment the program counter by two and take time.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 NOT\tab Logical Complement\par \pard\plain \s3\qj\sb120 \f20 This instruction performs a bitwise logical complement on the contents of the operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 OR\tab Inclusive OR Logical\par \pard\plain \s3\qj\sb120 \f20 This instruction performs a bitwise logical OR on the contents of the two operands and places the result into the second operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ORI\tab Inclusive OR Immediate\par \pard\plain \s3\qj\sb120 \f20 This instruction performs a bitwise logical OR on the contents of the two operands and places the result into the second operand.  The immediate data can be up to 32 bits long, depending on the operand size.  With byte or word operand size, the second operand can be the status register.  If byte, then only the condition codes are affected.  If word, then it is a privileged operation and the whole status register is affected.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 PEA\tab Push Effective Address\par \pard\plain \s3\qj\sb120 \f20 This instruction pushes the effective address onto the stack and postdecrements the stack pointer.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 RESET\tab Reset External Devices\par \pard\plain \s3\qj\sb120 \f20 This instruction resets the external devices.  It is a privileged instruction.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ROL\tab Rotate without Extend Left\par \pard\plain \s3\qj\sb120 \f20 If there are two operands, then this instruction rotates to the left the contents of the second operand by the amount specified in the first operand.  If the first operand is a data register, then the distance shifted is in the right most six bits of the first operand.  If the first operand is immediate data, then the immediate data can be the integers 1 to 8.  If there is only one operand, then the contents of the operand will be rotated to the left only one bit and the operand size is limited to word.  With each rotate of a bit the high order bit is shifted out and into two places: the low order bit and the C bit.  See Figure 3.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ROR\tab Rotate without Extend Right\par \pard\plain \s3\qj\sb120 \f20 If there are two operands, then this instruction rotates to the right the contents of the second operand by the amount specified in the first operand.  If the first operand is a data register, then the distance shifted is in the right most six bits of the first operand.  If the first operand is immediate data, then the immediate data can be the integers 1 to 8.  If there is only one operand, then the contents of the operand will be rotated to the right only one bit and the operand size is limited to word.  With each rotate of a bit the high order bit is shifted out and into two places: the low order bit and the C bit.  See Figure 3.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ROXL\tab Rotate with Extend Left\par \pard\plain \s3\qj\sb120 \f20 If there are two operands, then this instruction rotates to the left the contents of the second operand by the amount specified in the first operand.  If the first operand is a data register, then the distance shifted is in the right most six bits of the first operand.  If the first operand is immediate data, then the immediate data can be the integers 1 to 8.  If there is only one operand, then the contents of the operand will be rotated to the left only one bit and the operand size is limited to word.  With each rotate of a bit the high order bit is shifted out and into three places: the low order bit, the X bit, and the C bit.  See Figure 3.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 ROXR\tab Rotate with Extend Right\par \pard\plain \s3\qj\sb120 \f20 If there are two operands, then this instruction rotates to the right the contents of the second operand by the amount specified in the first operand.  If the first operand is a data register, then the distance shifted is in the right most six bits of the first operand.  If the first operand is immediate data, then the immediate data can be the integers 1 to 8.  If there is only one operand, then the contents of the operand will be rotated to the right only one bit and the operand size is limited to word.  With each rotate of a bit the high order bit is shifted out and into three places: the low order bit, the X bit, and the C bit.  See Figure 3.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 RTE\tab Return from Exception\par \pard\plain \s3\qj\sb120 \f20 This instruction is performed at the end of exception processing.  It replaces the status register and the program counter with the original status register and program counter that are on the supervisor stack.  They were put there by TRAP.  This is a privileged instruction.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 RTR\tab Return and Restore Condition Codes\par \pard\plain \s3\qj\sb120 \f20 This instruction is performed at the end of a subroutine started by BSR or JMP.  It replaces the condition codes and the program counter with the original condition codes and program counter that are on the stack.  BRA and JMP do no put the condition codes onto the stack.  If you want to return with RTR, then immediately after the jump you must push the condition codes onto the stack, i.e., MOVE SR, -(SP).\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 RTS\tab Return from Subroutine\par \pard\plain \s3\qj\sb120 \f20 This instruction is the normal instruction to use at the end of a subroutine started by BSR or JMP.  It replaces the program counter with the original program counter that is on the stack.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 SBCD\tab Subtract Decimal with Extend\par \pard\plain \s3\qj\sb120 \f20 This instruction subtracts the contents of the first operand and the contents of the X bit from the contents of the second operand with binary coded decimal arithmetic and places the result into the second operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 Scc\tab Set According to Condition\par \pard\plain \s3\qj\sb120 \f20 This instruction causes the specified byte to be set if the condition is met.  The condition is specified by the cc which is one of the codes in Table 3.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 STOP\tab Stop Program Execution\par \pard\plain \s3\qj\sb120 \f20 This instruction places the immediate data into the status register and stops the microprocessor from executing any more instructions.  The immediate data is 16 bits.  There are three ways to stop the STOP and restart execution.  A trace exception will happen immediately if the trace bit is on.  If an interrupt request occurs and it is of higher priority that that of the current processor priority, then an interrupt exception occurs.  A reset request will always execute.  This is a privileged instruction.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 SUB\tab Subtract Binary\par \pard\plain \s3\qj\sb120 \f20 This instruction subtracts the contents of the first operand from the contents of the second operand with two's complement binary arithmetic and places the result into the second operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 SUBA\tab Subtract Address\par \pard\plain \s3\qj\sb120 \f20 This instruction subtracts the contents of the first operand from the contents of the second operand with two's complement binary arithmetic and places the result into the second operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 SUBI\tab Subtract Immediate\par \pard\plain \s3\qj\sb120 \f20 This instruction subtracts the contents of the first operand from the contents of the second operand with two's complement binary arithmetic and places the result into the second operand.  The immediate data can be up to 32 bits long, depending on the operand size.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 SUBQ\tab Subtract Quick\par \pard\plain \s3\qj\sb120 \f20 This instruction subtracts the contents of the first operand from the contents of the second operand with two's complement binary arithmetic and places the result into the second operand.  The immediate data can be the integers 1 through 8.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 SUBX\tab Subtract with Extend\par \pard\plain \s3\qj\sb120 \f20 This instruction subtracts the contents of the first operand and the contents of the X bit from the contents of the second operand with two's complement binary arithmetic and places the result into the second operand.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 SWAP\tab Swap Register Halves\par \pard\plain \s3\qj\sb120 \f20 This instruction exchanges the contents of the high word and the contents of the low word in a data register.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 TAS\tab Test and Set an Operand\par \pard\plain \s3\qj\sb120 \f20 This instruction sets the high order bit of the contents of the operand to 1.  The tests for condition codes are done before the high order bit is set.  This instruction can be interrupted during is operation.  This operation is useful in synchronizing independent programs running simultaneously.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 TRAP\tab Trap\par \pard\plain \s3\qj\sb120\keepn \f20 This instruction initiates exception processing.  It pushes the contents of the program counter and then the contents of the status register onto the supervisor stack pointer.  The address at the TRAP instruction vector is then put in the program counter.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 TRAPV\tab Trap on Overflow\par \pard\plain \s3\qj\sb120 \f20 This instruction executes a TRAP if the V bit is on.  The Trap instruction vector used is 7.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 TST\tab Test an Operand\par \pard\plain \s3\qj\sb120 \f20 This instruction only sets condition codes.  The operand is not affected.\par \pard\plain \s252\sb120\keepn\tx2160 \b\f21 UNLK\tab Unlink\par \pard\plain \s3\qj\sb120 \f20 This instruction copies the contents of the address register into the stack pointer and then pops the top of the stack into the address register.  This is used with LINK to handle nested subroutine calls.\par {\plain \sect }\sectd \sbkodd\linemod0\linex0\cols1\colsx0\endnhere\titlepg {\headerr \pard\plain \s244\brdrb\brsp80\brdrhair \tx720\tqr\tx8640\tqr\tx9360 \f20 \tab \tab Appendix\emdash Error Messages\tab IV-\chpgn \par }{\footerr \pard\plain \s243\tx720\tqr\tx8640\tqr\tx9360 \f20 \par }{\headerf \pard\plain \s244\tx720\tqr\tx8640\tqr\tx9360 \f20 \par }{\footerf \pard\plain \s243\tx720\tqr\tx8640\tqr\tx9360 \f20 \par }\pard\plain \s255\qr\sb240\sa720\keepn \b\f21\fs36 Appendix\emdash Error Messages\par \pard\plain \s254\sb240\keepn \b\f21 About this Appendix\par \pard\plain \s3\qj\sb120 \f20 The Mops Assembler provides its own error handler for assembler code errors and can supply error messages for them.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Error in loading AsmCodes\tab 200\par \pard\plain \s3\qj\sb120 \f20 There was an I/O error generated by the Macintosh file Manager.  The file AsmCode loads during compilation.  Check this file.  Normally, the user should never change this file.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Bad operand size\tab 202\par \pard\plain \s3\qj\sb120 \f20 The operand size at the end of the opcode should be ".L", ".W", or ".B".\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Bad operand\tab 203\par \pard\plain \s3\qj\sb120 \f20 A faulty operand was used.  Some operand modes are illegal with some opcodes.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Bad immediate operand\tab 205\par \pard\plain \s3\qj\sb120 \f20 A faulty immediate operand was used.  It is most likely a wrong character.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Error in loading Operands\tab 206\par \pard\plain \s3\qj\sb120 \f20 There was an I/O error generated by the Macintosh file Manager.  The file Operands loads during compilation.  Check this file.  Normally, the user should never change this file.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Operands do not match\tab 207\par \pard\plain \s3\qj\sb120 \f20 For opcodes ABCD and SBCD, only two types of operands are allowed (Dx and -(Ax)).  For ABCD, SBCD, ADDX, SUBX< and CMPM both operands must be of the same mode.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Operand not an address register\tab 208\par \pard\plain \s3\qj\sb120 \f20 An operand not an address register in the MOVE USP instruction.  USP must be one operand and an address operand must the the other operand.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Bad register mask\tab 210\par \pard\plain \s3\qj\sb120 \f20 The register list for MOVEM is faulty\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Error in first pass\tab 211\par \pard\plain \s3\qj\sb120 \f20 The assembler makes two passes over the code.  An error was found in the first pass so assembly was aborted before the second pass was started.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Cannot find object or word\tab 216\par \pard\plain \s3\qj\sb120 \f20 The object or word looked for by MOPS[objname] could not be found in the dictionary.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Register direct operand needed\tab 219\par \pard\plain \s3\qj\sb120 \f20 At least one of the two operands must be a register direct.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Mode mismatch\tab 245\par \pard\plain \s3\qj\sb120 \f20 An operand was not of the correct mode for the instruction.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Short absolute address out of range\tab 246\par \pard\plain \s3\qj\sb120 \f20 Possibly you should be using a long absolute address.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Byte displacement out of range\tab 247\par \pard\plain \s3\qj\sb120 \f20 The displacement field in an indexed mode instruction is only one byte long.  You are trying to address a location too far from the base address.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Word displacement out of range\tab 248\par \pard\plain \s3\qj\sb120 \f20 You are trying to address a location further than 32K bytes from the base address.  You might have to use an extra instruction or instructions to compute the address.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Immediate operand out of range\tab 249\par \pard\plain \s3\qj\sb120 \f20 Fairly self-explanatory.  Possibly you should be using long immediate mode.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Branch out of range\tab 250\par \pard\plain \s3\qj\sb120 \f20 Should be self-explanatory.  If you are using a short branch, substitute a long one.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Undefined label\tab 251\par \pard\plain \s3\qj\sb120 \f20 You are referring to a label which hasn't been defined anywhere in a label field.\par \pard\plain \s250\sb120\keepn\tx5040 \b\f21 Bad opcode\tab 252\par \pard\plain \s3\qj\sb120 \f20 You have specified an opcode which doesn't exist.  Possibly a typo.  Or it may be a 68020/30/40-specific instruction, which the assembler can't handle yet.\par }