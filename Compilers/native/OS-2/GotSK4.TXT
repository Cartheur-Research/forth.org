---[ Graphics of the Second Kind, Part IV ]-----------[12/13/2006]---

                         by Timothy Trussell

---[ Where We Are ]--------------------------------------------------

Ah yes.  We're still in sprites, and now we're going to do something
a bit more animated (pun intended) with the Bolls image that I showed
you back in GotSK Column #2.  The bluish blob that looks somewhat egg
shaped.  You remember.

So, let's get to it.

In the Code Addendum for this module, we will be loading in the code
from the last two columns, so you'll need to have the GotSK2.4th and
GotSK3.4th files in the directory.  And, if you can't find them, the
files have been uploaded to the Taygeta Scientific Forth FTP Archive
site (thanks, Dr. Everett Carter!), as will this one, about a minute
after I post it to the comp.lang.forth newsgroup.

---[ Sprites V ]-----------------------------------------------------

Ok, to do this code, I'm going to have to use a structure package for
handling the data being processed.  The one I'm going to use in this
example demo is the EDO package written by GT Hawkins, and is to be
found on the Taygeta Scientific site (www.taygeta.com) along with the
documentation and a short demo.

        \ ---[ EDO ]-------------------------------------------------
        \ The Extended Data Objects package by GT Hawkins

        1 CONSTANT 1BYTE
        cell CONSTANT 1WORD
        8 constant 1FLOAT
        : BYTE* ;
        : WORD+ 1WORD + ;
        : WORD* 1WORD * ;
        : DEF   CONSTANT ;
        : S{    0 ;
        : ::
          CREATE OVER , + DOES> @ + ;
        : }S  CONSTANT ;
        : []
          OVER * CONSTANT
          CREATE ,
          DOES> @ * + ;

        \ ---[ My additions to the EDO definition ]------------------

        : FLOAT* ( n -- n*FLOAT )       FLOATS ;
          1BYTE DEF {1BYTE}-DEF
        2 BYTE* DEF {2BYTE}-DEF
        4 BYTE* DEF {4BYTE}-DEF
          1WORD DEF {1WORD}-DEF
        2 WORD* DEF {2WORD}-DEF
        8 BYTE* DEF {1FLOAT}-DEF
        \ -----------------------------------------------[End EDO]---

Most of the available structure packages available for Forth will do
just as well, but this is the one I'm using for now.

We'll start off with defining the structures that the Bolls demo will
be using:

        S{
          {1WORD}-DEF :: .bheight
          {1WORD}-DEF :: .bwidth
          24 31 *     :: .bimage
        }S sprite-obj

        S{
          {1WORD}-DEF :: .vbX
          {1WORD}-DEF :: .vbY
          {1WORD}-DEF :: .vbZ
          {1WORD}-DEF :: .vbC
        }S vball-obj

        \ Defines a Floating Point array with 360 elements
        {1FLOAT}-DEF 360 [] sc[]-obj sc-ndx

        \ Defines the vector boll object array of type vball-obj
        vball-obj 8 [] object[]-obj object-ndx

        \ Allocates arrays in the dictionary
        create Sine[]    here sc[]-obj dup allot 0 fill
        create Cosine[]  here sc[]-obj dup allot 0 fill
        create object[]  here object[]-obj dup allot 0 fill
        create object2[] here object[]-obj dup allot 0 fill
        create temp[]    here object[]-obj dup allot 0 fill

        \ single dummy vector ball used for swapping
        create dummy here vball-obj dup allot 0 fill

And that's it for the structure definitions and allocations.

We will also be needing another double buffer array for this demo,
so we'll allocate another 64k block now:

        create VPage5[] here 65536 dup allot 0 fill

The next step is to perform the data initializations.  We'll start
with the Sine and Cosine lookup tables:

        floating        \ turn on 32Forth FP entry mode

        : CreateLookupTables() ( -- )
          360 0 do
            i S>F 3.14159265 F* 180.0 F/ FSINCOS
            Cosine[] i sc-ndx F!
            Sine[]   i sc-ndx F!
          loop
        ;

                ;


        integer         \ return to normal integer entry mode

This will set up the Sine and Cosine tables in the arrays created
above.  The 32Forth Floating Point function FSINCOS function performs
both Sine and Cosine on the TOS value, leaving both results on the
stack.

Next, we initialize the vector object tables.  SetObject stores the
data passed to it by the CreateVectorObject into the object[] array.
I have done it this way so that when you run the program, it will
initialize these values to a known state.  Useful when debugging.

        : SetObject ( x y z obj# -- )
          object[] swap object-ndx >R R@ .vbZ ! R@ .vbY ! R> .vbX !
        ;

        : CreateVectorObject() ( -- )
        \ the arrangement of the bolls will be in a cube pattern
          -30 -30  30 0 SetObject      \ back top left coords
           30 -30  31 1 SetObject      \ back top right coords
          -30  30  32 2 SetObject      \ back bottom left coords
           30  30  33 3 SetObject      \ back bottom right coords
          -30 -30 -30 4 SetObject      \ front top left coords
           30 -30 -31 5 SetObject      \ front top right coords
          -30  30 -32 6 SetObject      \ front bottom left coords
           30  30 -33 7 SetObject      \ front bottom right coords
           object[] object2[] object[]-obj cmove
        ;

We need a routine that will let us draw the Boll image to the buffer
array, and the previous DrawSprite version was coded to plot directly
to the video screen, so:

        value %ofs
        value %color
        value %src
        value %dst

        : DrawBollSprite() ( &obj x y -- )
          6 LSHIFT dup 2 LSHIFT + + to %ofs
          to %src
          VPage5[] to %dst
          %src .width @                 \ .w
          %src .height @ 0 do           \ .w
            dup 0 do                    \ .w
              dup                       \ .w .w
              j *                       \ .w .w*j
              i +                       \ .w .w*j+i
              %src .image + C@          \ .w src[.w*j+i]
              dup                       \ .w src[.w*j+i] src[.w*j+i]
              if                        \ .w src[.w*j+i]
                %dst %ofs + i + C!      \ .w
              else                      \ .w src[.w*j+i]
                drop                    \ .w                 \ skip if 0
              then                      \ .w
            loop                        \ .w
            320 +to %ofs                \ .w
          loop                          \ .w
          drop                          \ --
        ;

Ok, now we get to the meat of this new animation sequence, the
three dimensional rotations of the image points.

floating

: RotateVectors() ( &obj -- )
  dup object[] = if 240 else 80 then dvo:xofs !
  \ first we have to do all the rotations
  8 0 do
    dup i object-ndx >R
    \ rotate around the x-axis
    R@ .vbY @ S>F Cosine[] xangle @ sc-ndx F@ F*
    R@ .vbZ @ S>F Sine[]   xangle @ sc-ndx F@ F* F- F>S to dvo:ny
    R@ .vbY @ S>F Sine[]   xangle @ sc-ndx F@ F*
    R@ .vbZ @ S>F Cosine[] xangle @ sc-ndx F@ F* F+ F>S to dvo:nz
    R> .vbX @ to dvo:nx
    temp[] i object-ndx >R
    dvo:nx R@ .vbX !
    dvo:ny R@ .vbY !
    dvo:nz R@ .vbZ !
    \ rotate around the y-axis
    R@ .vbX @ S>F Cosine[] yangle @ sc-ndx F@ F*
    R@ .vbZ @ S>F Sine[]   yangle @ sc-ndx F@ F* F+ F>S to dvo:nx
    R@ .vbX @ negate S>F Sine[]   yangle @ sc-ndx F@ F*
    R@ .vbZ @ S>F Cosine[] yangle @ sc-ndx F@ F* F+ F>S to dvo:nz
    dvo:nx R@ .vbX !
    dvo:nz R@ .vbZ !
  \ rotate around the z-axis
    R@ .vbX @ S>F Cosine[] zangle @ sc-ndx F@ F*
    R@ .vbY @ S>F Sine[]   zangle @ sc-ndx F@ F* F- F>S to dvo:nx
    R@ .vbX @ S>F Sine[]   zangle @ sc-ndx F@ F*
    R@ .vbY @ S>F Cosine[] zangle @ sc-ndx F@ F* F+ F>S to dvo:ny
    dvo:nx R@ .vbX !
    dvo:ny R@ .vbY !
  \ now we have to push the z coordinates into the view area
    R@ .vbZ @ distance @ - R@ .vbZ !
  \ finally we project & copy the new x,y,z to a temporary array
    R@ .vbX @ 256 * R@ .vbZ @ / dvo:xofs @ + R@ .vbX !
    R@ .vbY @ 256 * R@ .vbZ @ / 100 + R@ .vbY !
    R>
    object[] i object-ndx .vbC @ swap .vbC !
  loop
  drop
;

integer

A description/walkthru of the the RotateVectors routine will have to
wait for somewhere in my Graphics of the Third Kind column sequence.

For those wanting more information right now, I can give you the
original C++ code that I derived this from, as follows:

 /------------------------------------------------------------------+
 | int i,j,k,a,b,nx,ny,nz;                                          |
 |                                                                  |
 | // do all the rotations                                          |
 | for(i=0;i<8;i++) {                                               |
 |   // rotate around the x-axis                                    |
 |   ny=(int)(object[i].y*cosine[xangle]-object[i].z*sine[xangle]); |
 |   nz=(int)(object[i].y*sine[xangle]+object[i].z*cosine[xangle]); |
 |   nx=(int)(object[i].x);                                         |
 |   temp[i].x=nx;                                                  |
 |   temp[i].y=ny;                                                  |
 |   temp[i].z=nz;                                                  |
 |                                                                  |
 |   // rotate around the y-axis                                    |
 |   nx=(int)(temp[i].x * cosine[yangle] +temp[i].z * sine[yangle]);|
 |   nz=(int)(-temp[i].x * sine[yangle]+temp[i].z * cosine[yangle]);|
 |   temp[i].x=nx;                                                  |
 |   temp[i].z=nz;                                                  |
 |                                                                  |
 |   // rotate around the z-axis                                    |
 |   nx=(int)(temp[i].x * cosine[zangle]-temp[i].y * sine[zangle]); |
 |   ny=(int)(temp[i].x * sine[zangle]+temp[i].y * cosine[zangle]); |
 |   temp[i].x=nx;                                                  |
 |   temp[i].y=ny;                                                  |
 |                                                                  |
 |   // now we have to push the z coordinates into the view area    |
 |   temp[i].z-=distance;                                           |
 |                                                                  |
 |   // project & copy the new x,y,z to a temporary array           |
 |   temp[i].x=(int)((temp[i].x*256)/temp[i].z+160);                |
 |   temp[i].y=(int)((temp[i].y*256)/temp[i].z+120);                |
 |   temp[i].color=object[i].color;                                 |
 | }                                                                |
 +------------------------------------------------------------------+

I'm hoping to find the time to convert this routine to an optimized
assembly code word.

After the rotations has been done, we have the ZBuffering function,
which sorts the coordinates so that the images that are farthest away
from the viewport are drawn first, and will then be overlapped by the
images in front of them.

Due to the fact that there are only 8 elements being sorted, a simple
bubble sort was used for this:

  : ZBuffering() ( -- )
    7 0 do
      8 i 1+ do
        temp[] j object-ndx .vbZ @        \ a=temp[j].z;
        temp[] i object-ndx .vbZ @        \ b=temp[i].z;
        >= if                             \ if (a >= b) {
        \ swap the two vector balls - this moves the struct
          temp[] j object-ndx dummy vball-obj cmove
          temp[] i object-ndx temp[] j object-ndx vball-obj cmove
          dummy temp[] i object-ndx vball-obj cmove
        then
      loop
    loop
  ;

The ZBuffering word moves an entire structure during the sorting
process, not just a byte or word value.

And we link these sections together with our vector object draw word.

  : DrawVectorObjects()
    object[] RotateVectors()
    ZBuffering()

  \ we're done everything, so draw the objects!
  \ first we erase the old stuff off the drawing zone
   VPage5[] ZeroIt
  \ and then draw the new ball positions
    8 0 do
      VBBitMap[]
      temp[] i object-ndx >R
      R@ .vbX @ 11 -
      R> .vbY @ 15 -
      DrawBollSprite
    loop
  \ do second object batch
    object2[] RotateVectors()
    ZBuffering()
    8 0 do
      VBBitMap[]
      temp[] i object-ndx >R
      R@ .vbX @ 11 -
      R> .vbY @ 15 -
      DrawBollSprite
    loop
  ;

Which leaves us with the final step, which is the main word that
runs all the other modules.

: bolls
  1 to %UseVR
  0 to %Speed
  360 rnd xangle !              \ init variables and arrays
  360 rnd yangle !
  360 rnd zangle !
  256 distance !
    1 direction !

  CreateLookupTables()          \ init the sine/cosine tables
  CreateVectorObject()          \ init the object[] structure

  24 %B !
  25 %G !
  26 %R !
  VPage0[] ZeroIt
  VPage5[] ZeroIt
  Background

  $13 InitGraph
  SetBollPalette1
  begin                         \ repeat until a key is pressed
    KeyCheck
  while
    direction @ 1 = if          \ update distance & direction
      1 distance +!
      distance @ 599 > if 0 direction ! 600 distance ! then
    else
      -1 distance +!
      distance @ 255 < if 1 direction ! 256 distance ! then
    then
  \ update the angles
    3 xangle +! xangle @ 359 > if   0 xangle ! then
    3 yangle +! yangle @ 359 > if   0 yangle ! then
   -2 zangle +! zangle @ 1   < if 359 zangle ! then

    DrawVectorObjects()         \ Draw to the video buffer

    %Speed if OneFrame then
    CombineVPages
    VPage5[] VPage0[] AddVPage
    VPage0[] BlitBuffer
    %UseVR if WaitRetrace then
    VPage5[] Zeroit
    VPage3[] ZeroIt               \ erase the buffers for
    VPage2[] ZeroIt               \ the next cycle
    VPage1[] ZeroIt
  repeat
  CloseGraph
;

I have implemented the KeyCheck function in the main loop, so that if
you press the Space Bar, it will toggle the use of the WaitRetrace,
so you can see what the speed of your system is like with no delay in
place.

The BackSpace key, toggling the %Speed value, let's you turn on and
off the display of the demo from the previous column, the thirteen
sprites that go bouncing all over the screen, with the Bolls from
this demo in the foreground.

For an additional effect, try commenting out the line

        VPage5[] ZeroIt

and recompile and run the program again.  It's an interesting effect,
and you should understand why it is doing what it does by this point.

---[ Wrapping Up ]---------------------------------------------------

We are almost done with the Graphics of the Second Kind, and have one
one more section, displaying text characters as a sprite.  This isn't
a new concept, certainly, and any time you've used a GUI you have
seen this in action.

So, I'll be back in a couple days.

