Date:  05-Sep-92 03:48 EDTFrom:  Michael Hore [100033,3164]Subj:  Starfighter.mops \ A "shoot the starfighter" game, using the graphics and windows GRAPHWIN \ package, which is available online on GEnie in the Forth Interest Group's \ library, under "FORTH" at the GEnie prompt. \ Version 1 \ Last modified: August 10, 1992 \ by Brian Dunn \ GEnie email: B.DUNN5\ Modified to run under Mops by Mike Hore, Sept 1992.\ Genie email: M.HORE\ The only significant change is that the text window for scoring is\ disabled, since GraphWin.mops doesn't support text windows yet. \ 100 RANDOM   returns a value from 0 to 99. \ SYSCOUNTER is a number whose value increments rapidly. \ 1SECOND is the number of ticks in each second.need graphwin.mops						\ requires the graphwin package\ vocabulary starfighter.voc\ starfighter.voc definitionswindow forward_window			\ the forward view\ 40 6 text_window score_window	\ the score and shots leftvariable 'x					\ position of the enemy starfightervariable 'yvariable 'xp				\ current speed of the enemyvariable 'ypvariable 'enemy_speed			\ max speed of the enemyvariable 'score				\ current scorevariable 'shots				\ shots left9000 constant wx			\ width of the forward view window9000 constant wy4500 constant cx			\ center of the window:   width 2/4500 constant cy100 constant enemy_size			\ size of the enemy fighter: .score				\ print score and shots left\	score_window  i/o_window	\ print into score window\	14 1  at-xy			\ position after the  Score :\	'score @  .  space		\ print score and 2 spaces\	14 2  at-xy			\ position after the  Shots Left :\	'shots @  .			\ print shots left	;: .initial_score	\ print the initial information into the score window:\	page\	cr\	."  Score      : "  cr\	."  Shots Left : "\	0  'score !	50  'shots !\	.score	;: .end					\ they must press in the score window\	score_window  i/o_window	\ where to print to\	0 4  at-xy			\ position below the shots left\	."  Press a key"  cr\	."  in this windowe ."		\ no CR	;: end_prog?  ( -- f )			\ end if out of shots or pressed key	key?				\ in the score window	dup if				\ if they pressed a key...		key drop		\ ... key rid of it	then	'shots @  1 <  or		\ out of shots?	;: position_enemy			\ randomly place a new starfighter	cx random  cx 4/ +  'x !	\ near the middle	cy random  cy 4/ +  'y !	;: turn_enemy				\ randomly change direction	'enemy_speed @ random  'enemy_speed @ 2/ -  'xp !\	'enemy_speed @ random  'enemy_speed @@ owe  2/ -  'yp !	'enemy_speed @ random  'enemy_speed @ 2/ -  'yp !	;: init_enemy				\ start a new enemy starfighter	position_enemy	turn_enemy	;: draw_enemy  { x y -- }		\ draw it around x,y	foreground_color		\ using the foreground color	\ draw left vertical wing:	x enemy_size -		y enemy_size -	x enemy_size -		y enemy_size +		draw_line	\ draw right vertical wing:	x enemy_size +		y enemy_size -	x enemy_size +		y enemy_size +		draw_line	\ draw horizontal wing:	x enemy_size -		y	x enemy_size +		y	 draw_line	\ draw center pod:	x y  enemy_size 4* 5 /  draw_filled_circle	;: erase_enemy  { x y -- }		\ blot out the whole area...	background_color		\ ... with the background color	x enemy_size -		y enemy_size -	x enemy_size +		y enemy_size +	draw_filled_rect	;: enemy_escaped?  ( -- f )		\ enemy got off the screen?	\ true if not:    enemy_size   <=   (x,y)   <=    w(x,y) - enemy_size	'x @   enemy_size   wx enemy_size -   within?	'y @   enemy_size   wy enemy_size -   within?  and	not	;: steer_enemy  { mouse_x  mouse_y  -- }	\ compute steering from mouse position:	cx  mouse_x -			\ how far left of center	15 /				\ scale to ship speeds	'xp @  +			\ offset for enemy motion	'x +!				\ add to current position	cy  mouse_y -			\ how far above center	15 /				\ scale to ship speeds	'yp @  +			\ offset for enemy motion	'y +!				\ add to current position	;: move_enemy				\ reposition and check edges	\ exit if the mouse is not in the forward view window	mouse_xy  forward_window = not  if	\ s: mouse_x y		2drop  exit	then				\ s: mouse_x y	\ s: mouse_x  mouse_y	'x @  'y @  >r >r		\ old position to erase at	steer_enemy			\ move them around	\ see if they got away:	enemy_escaped?  if		'enemy_speed @  negate  'score +!	\ subtract points		.score					\ print new score		init_enemy				\ get a new enemy	then	\ erase the old position then draw the new:	r> r>  erase_enemy	'x @  'y @  draw_enemy	;: draw_laser					\ draw a laser bla fow st	\ use whatever color is set in do_mouse	500 0 do				\ spread out several lines		cx cy  0 wy i -   draw_line	\ center to lower left		cx cy  wx wy i -  draw_line	\ center to lower right	100 +loop				\ spread out the lines	;: draw_explosion				\ draw an explosion	foreground_color	50 0 do					\ draw 50 random lines ...		'x @  'y @			\ ... from x,y ...		'x @  2000 random +  1000 -	\ ... to a nearby point		'y @  2000 random +  1000 -		draw_line	loop	;: draw_crosshairs			\ draw a crosshair and circle	foreground_color	\ horizontal and vertical lines:	cx 800 -	cy		cx 800 +	cy	  draw_line	cx		cy 800 -	cx		cy 800 +  draw_line	\ a circle around the center:	cx cy  400  draw_circle	;: fire_laser	foreground_color  draw_laser		\ draw the laser blast	1second 16 /  wait			\ wait for a moment	background_color  draw_laser		\ erase the laser blast	;: hit_enemy?  ( -- f )		\ was enemy starfighter near the center?	'x @  cx -  abs  enemy_size <		\ as  close as enemy_size?	'y @  cy -  abs  enemy_size <  and	;: do_mouse					\ handle a mouse event	event_buttons  0= if  exit  then	\ ignore mouse release	'shots @  1 <  if  exit  then		\ ignore if out of shots	fire_laser				\ draw a laser blast	hit_enemy?  if				\ hit the enemy		'enemy_speed @  'score +!	\ add to the score		20  'enemy_speed +!		\ speed up the enemies		draw_explosion			\ draw an explosion		init_enemy			\ form a new starfighter		erase_drawing_window		\ erase theas  explosion	then	draw_crosshairs				\ due to the laser & explosion	-1  'shots +!				\ one less shot is left	.score					\ print the new score/shots	;: do_prog					\ do one game	draw_crosshairs			\ draw the initial crosshairs	begin					\ until out of shots or quit		perform_events		\ handle mouse/keys/etc		\ redraw the crosshairs if the starfighter is on top of them:		'x @  cx -  abs  900 <		'y @  cy -  abs  900 <  and		if			draw_crosshairs		else			1second 16/ wait	\ sls ow down enough to see it		then		move_enemy				\ move them and ...		5 random  0=  if  turn_enemy  then	\ sometimes turn them	end_prog?  until			\ out of shots or quit?	;: my_update					\ update forward view	erase_drawing_window			\ erase it all	draw_crosshairs				\ draw new crosshairs	;: init_prog					\ setup everything	start_windows				\ set up graphwin & opsys	16K_space				\ 16K X 10K for typical screen	\ setup the two windows:	forward_window  add_window\	score_window  add_window	[tok] do_mouse			forward_window	takes_window_mouse	[tok] my_update			forward_window	updates_window	\ the score window uses the default text window handlers	"  Star Fighter : Cockpit "	str255 forward_window	title_window\	"  Star Fighter : Score "	str255 score_window	title_window	1000  1000	wx   wy		forward_window	move_window\	11000 1000	5000 5000	score_window	move_window	forward_window	open_window\	score_window	open_window	forward_window	drawing_window	erase_drawing_window\	score_window	i/o_window	forward_window	top_window	.initial_score	( enemy_size 2* ) 10  'enemy_speed !	\ an arbitrary initial speed	init_enemy			\ start up an enemy starfighter	;: shutdown_prog				\ shutdown the windows and such	forward_window  close_window\	score_window  close_window	forward_window  delete_window\	score_window  delete_window	end_windows			\ shutdown graphwin & op system	;\ forth definitions: starfighter\	[ starfighter.voc ]	init_prog			\ set it up	do_prog				\ do one game	.end				\ print ending message	key drop			\ wait for a key	shutdown_prog			\ shut it down	;                                                                                   