$Id: readme.arm,v 1.1 1997/08/18 10:34:40 crook Exp $

hf.tar contains these files:

readme.arm	- this file.

readme.eng	}
readme.kor	}
readme.ks	}
whatsnew.eng	} - Documentation from Dr Koh's release.
whatsnew.kor	}
whatsnew.ks	}
hforth.html	}

hf110bl.aif	- executable for the EBSA-110. Can be blown into
		  any Flash block.
hf110dm.aif	- executable for the EBSA-110. Can be run from
		  the ARMulator or on a board using DEMON
		  remote-debug stub.
hf285bl.aif	- executable for the EBSA-285. Can be blown into
		  any Flash block.

hfsarom.asm	- assembler source file.
build		- UNIX sh script to rebuild from source.
makesrc.awk	} 
modsntx.awk	} - gawk scripts used by the build process.
dat2tad.awk	}

coreext.f	}
double.f	}
muldemo.f	} - Forth definitions from Dr Koh's release.
multi.f		}
optional.f	}

110_hu.f	- Forth definitions for the EBSA-110 board.
285_hu.f	- Forth definitions for the EBSA-285 board.


What is FORTH?
==============

    Forth is an unusual computer programming language. It is a stack-based
    language (it uses reverse-polish or postfix notation) that includes
    both an interpreter and compiler together with a command-line
    interface. The basic execution unit in Forth is the 'word'. The Forth
    environment provides a number of defined words and new words can be
    defined in terms of existing words. The interactive nature of Forth
    encourages every word to be tested and debugged before it is used by
    other words; therefore, bottom-up design is a very natural element of
    projects developed in Forth.

    Advocates of Forth cite small, fast code and rapid development cycles
    as its advantages. Critics call it a 'write-only' language.

    Forth has traditionally been used in real-time systems; it was
    originally designed (by Charles Moore) as a control language for radio
    telescopes. It has been widely used by NASA for satellite control.

    In my opinion, Forth is the perfect language for hardware engineers
    trying to debug pieces of hardware. It is ideal for performing general
    'debug monitor' functions whilst allowing target-specific additions.
    

What is hFORTH
==============

    hForth is derived from eForth by Dr. Wonyong Koh. Refer to readme.eng
    and hforth.html for more details on its history.
    

This implementation
===================

    This implementation of hForth is a port of Dr. Koh's 8086 ROM
    model, version V0.9.9 to the ARM 32-bit RISC architecture. In doing
    the port I have had to make a few changed to the original source code
    but I have fed back as many changes as possible to Dr. Koh so that it
    is actually possible to ediff his code against mine and see something
    sensible.

    This kit also includes some of the high-level definitions from
    Dr. Koh's V0.9.9 release, and some high-level definitions that are
    specific to the supported target hardware.

    The current implementation is incomplete in some areas, but it does
    work and so it is supplied in the hope that it will be useful. The
    header of the source file, hfsarom.asm, includes some notes on
    possible future work. I welcome comments, re-writes of my code
    (whether in assembler or Forth) and feedback on the usefulness of
    the port.



Supported Targets
=================

    I originally did the port to provide a software environment for
    hardware debug on some StrongARM-based hardware. StrongARM is a
    high-performance Digital Semiconductor implementation of the ARM
    architecture. Two Digital Semiconductor evaluation boards are
    supported:

    EBSA-110 - this is an evaluation board for the SA-110 processor
    that uses discrete logic to implement a memory controller. This
    board  includes  ROM, Flash, SSRAM and DRAM memory and Ethernet,
    PCMCIA and UART I/O. It also includes timers and an interrupt
    controller.

    EBSA-285 - this is an evaluation board for the SA-110 processor
    and the 21285. The 21285 is a support chip for the SA-110 and
    provides a ROM and SDRAM controller and a PCI interface, along
    with DMA controllers, UART, interrupt controller, timers and other
    useful functions.

    Image files are provided for both of these boards.

    The build file allows you to rebuild the code for some other
    targets, but these are untested and may not work correctly.

    If you build the code to run on an older version of the ARM
    architecture, don;t try to use the memory-management words
    or the 16-bit loads and stores; these will attempt to execute
    instructions that are not implemented!
    
    For more information on Digital Semiconductor products:
    - visit http://www.digital.com/semiconductor
    - email semiconductor@digital.com


Getting Started
===============

    Pre-build images are provided for the EBSA-285 and EBSA-110. The
    basic process is:

    - use the Flash Management Utility (FMU) to program the image
      into a spare Flash ROM block
    - change the jumpers/swicth on the board to make the Primary
      Boot Loader (PBL) start up the new image
    - connect a terminal emulator to the board and reset.

    Read the Reference Manual for the board for more information on
    the PBL and FMU.

    A suitable terminal emulator is the Windows terminal emulator.
    You need a null-modem cable and a terminal set to 9600baud,
    XON/XOFF flow control, no parity, 8-bit, 1 stop bit. When you
    reset the system you should see a sign-on message like this:
 
hForth StrongARM ROM Model v0.9.9 by Wonyong Koh, 1997
StrongARM port by nealc@lsil.com
All noncommercial and commercial uses are granted.
Please send comment, bug report and suggestions to:
  wykoh@pado.krict.re.kr or wykoh@hitel.kol.co.kr


    On the EBSA-285, the yellow and green LEDs should be illuminated.
    On the EBSA-110, the red LED should be extinguished. If you get
    some other behaviour, check that you have set the image
    jumpers/switch correctly. If, on the EBSA-285, you get the
    sign-on message but cannot get any response when you press return
    on the terminal, check that the Stand-Alone link is set correctly.

    Note that there is no prompt. This is another way that Forth is
    unusual; *after* it has done something it reports whether it was
    successful or not, but it doesn't prompt you for new input. Try
    pressing carriage-return a few times and you'll see this:

    <cr> ok
    <cr> ok
    <cr> ok

    (<cr> is where you pressed the carriage-return key; the computer
    doesn't print this). Forth is processing your input, does everything
    you tell it (ie nothing) and reports that it was successful by printing
    'ok'. Now try typing decimal <cr>:

    decimal <cr> decimal ? undefined word

    (the computer echoed the word 'decimal' back to you, followed by a
    question mark and error message). Traditionally, Forth is case-sensitive
    and expects its input in UPPER CASE. Let's try again:

    DECIMAL <cr>
    ok

    The hForth programmed into Flash 'understands' a limited set of commands.
    You can expand its 'vocabulary' by downloading additional definitions
    as described in a later section. Load the definitions optional.f and
    coreext.f before continuing with the examples in this section.

    Use the command WORDS to find out what has been defined:

    WORDS <cr>

SLOWDOWN SPEEDUP INITMMU BUILDFLATMAP STARTOF-MM FL-FORTH QCSUM FLPROG FLI-DEL F
LB-DEL FLBUSY FLSTAT0 FLSTAT .FLB-LIST .FLI-LIST FLIUSED FLBUSED FLINBLOCK FLINI
MAGE FLHDR FLB2A STARTOF-FLASH FREEBIT .U2 STARTOF-UTILS HEX CS-ROLL CS-PICK U>
TUCK ROLL C" ?DO 2R@ 2R> 2>R 0> 0<> <> WORDS SEE DUMP ? .S UNUSED ENDOF OF ENDCA
SE CASE U.R TRUE PAD MARKER U> HEX FALSE .R D.R .( ORDER PREVIOUS ONLY FORTH ALS
O WORDLIST SET-ORDER GET-ORDER DEFINITIONS SET-CURRENT [THEN] [IF] [ELSE] COMPAR
E EMIT? EKEY? \ [CHAR] ['] WORD WHILE VARIABLE VALUE UNTIL U. TO SPACES SM/REM S
" SLITERAL RSHIFT REPEAT RECURSE POSTPONE PICK MOD MIN MAX M* LSHIFT LOOP LEAVE
J IMMEDIATE FIND FILL EVALUATE ENVIRONMENT? ELSE DOES> DO CHAR C, BEGIN ALLOT AB
S ABORT" >BODY 2OVER ." +LOOP */MOD */ * ( ] [ WITHIN UNLOOP UM/MOD UM* U< TYPE
THROW THEN STATE SPACE SOURCE SIGN SEARCH-WORDLIST S>D ROT REFILL QUIT PARSE NIP
 NEGATE LITERAL KEY INVERT IF I HOLD HERE GET-CURRENT FM/MOD EMITE EMIT EKEY DNE
GATE DEPTH DECIMAL D. D+ CREATE COUNT CONSTANT COMPILE, CHAR+ CELL+ CATCH BL AHE
AD AGAIN ACCEPT ABORT ?DUP >NUMBER >IN > = <# < ; :NONAME : 2SWAP 2DUP 2DROP 2@
2! 1- 1+ /STRING /MOD / . - , +! + ' #S #> # NONSTANDARD-WORDLIST FORTH-WORDLIST
 BASE SOURCE-ID XOR SWAP R@ R> OVER OR MOVE EXIT EXECUTE DUP DROP C@ C! AND @ >R
 2/ 2* 0= 0< ! CHARS CELLS ALIGNED ALIGN BYE CR  235 words ok

    That was a list of all the definitions that are currently built in (the
    list you see will be smaller). The definitions are stored in a
    dictionary. When the Forth interpreter parses your input, it treats is
    as a set of character strings separated by spaces. For each character
    string in turn, it tries 2 things: firstly, it tries to find a matching
    string in the dictionary (the list of words you saw above) with the
    same name. If it succeeds, it performs the behaviours defined by the
    definition. If the string does not match a name in the dictionary, the
    Forth interpreter tries to treat the string, in the current number
    base, which it then pushes onto the data stack. The Forth interpreter
    continues in this way until it exhausts the input stream (when it will
    print 'ok') or until it finds a string which is neither defined nor a
    valid number. After reset, the current number base is set to 10
    (decimal). You can change the number base by typing DECIMAL or HEX. Try
    entering some numbers: 

    1 <cr> ok                   [you typed 1 followed by carriage-return]
    2 <cr> ok
    3 <cr> ok
    .S <cr>                     [.S tells Forth to print the data stack]
     1 2 3 <sp ok
    + <cr> ok                   [add the top two items on the stack]
    .S <cr>                     [check the result]
     1 5 <sp ok                 [yes, they have been replaced by their sum]
    .s .s ? undefined word      [oops, I mis-typed]
    .S <cr>
    <sp <cr> ok                 [the error reset the stack pointer]

    Everything we've seen so far shows Forth acting as an interpreter.
    Let's use the compiler by defining a word of our own:

    : HELLO ." Greetings, glad you could come by" ; <cr> ok

    The colon turns on the compiler, the semi-colon turns it off. The ok is
    a response to pressing the carriage-return key; it shows that the
    definition was compiled correctly. HELLO is the name of the definition.
    The actions of the word are to print a string. Dot-quote is the print
    word, the string is delimited by a double quote. be sure to include
    spaces in all the right places. The space between the dot-quote and the
    start of the string is not part of the string, it is the delimiter that
    allows the compiler to 'see' the dot-quote. At the end of the string,
    there is no need for a delimiter between the last character of the
    string and the double quote. However, there *is* a need for the space
    between the double quote and the semi-colon. Let's try it out:

    HELLO<cr>Greetings, glad you could come by ok

    Forth put the whole thing on one line, which looked messy. Let's try
    again:

    : HELLO CR HELLO ; <cr> redefine HELLO ok

    CR is a word whose behaviour is to print a carriage-return. The text
    "redefine HELLO" was a warning to you that your definition has
    superceeded some other, older definition with the same name. The new
    definition isn't available until the end of the definition, and so the
    use of HELLO within the definition refers to the *old* definition. Let's
    try this new version out:
  
    HELLO <cr>
    Greetings, glad you could come by ok

    That looks better. What we did here was to create a NEW definition of
    HELLO in terms of the old definition. This is not recursion and we have
    not deleted or affected the old definition (it *is* possible to use a
    word recursively, using the word RECURSE). When the dictionary is
    searched, it is searched from the most recent definition, backwards.
    Therefore, when the second version of HELLO is defined, it compiles a
    call to the old version (the only version of HELLO that can be found
    until the new definition has been completed). Any subsequent uses of
    the word HELLO (either by typing it at the command line or by using
    it in some other definition) will find the second, newer, version. Type
    WORDS again to see the new definitions:
    
    WORDS <cr>

HELLO HELLO SLOWDOWN SPEEDUP INITMMU BUILDFLATMAP STARTOF-MM FL-FORTH QCSUM FLPR
OG FLI-DEL FLB-DEL FLBUSY FLSTAT0 FLSTAT .FLB-LIST .FLI-LIST FLIUSED FLBUSED FLI
NBLOCK FLINIMAGE FLHDR FLB2A STARTOF-FLASH FREEBIT .U2 STARTOF-UTILS HEX CS-ROLL
 CS-PICK U> TUCK ROLL C" ?DO 2R@ 2R> 2>R 0> 0<> <> WORDS SEE DUMP ? .S UNUSED EN
DOF OF ENDCASE CASE U.R TRUE PAD MARKER U> HEX FALSE .R D.R .( ORDER PREVIOUS ON
LY FORTH ALSO WORDLIST SET-ORDER GET-ORDER DEFINITIONS SET-CURRENT [THEN] [IF] [
ELSE] COMPARE EMIT? EKEY? \ [CHAR] ['] WORD WHILE VARIABLE VALUE UNTIL U. TO SPA
CES SM/REM S" SLITERAL RSHIFT REPEAT RECURSE POSTPONE PICK MOD MIN MAX M* LSHIFT
 LOOP LEAVE J IMMEDIATE FIND FILL EVALUATE ENVIRONMENT? ELSE DOES> DO CHAR C, BE
GIN ALLOT ABS ABORT" >BODY 2OVER ." +LOOP */MOD */ * ( ] [ WITHIN UNLOOP UM/MOD
UM* U< TYPE THROW THEN STATE SPACE SOURCE SIGN SEARCH-WORDLIST S>D ROT REFILL QU
IT PARSE NIP NEGATE LITERAL KEY INVERT IF I HOLD HERE GET-CURRENT FM/MOD EMITE E
MIT EKEY DNEGATE DEPTH DECIMAL D. D+ CREATE COUNT  <cr><cr>167 words ok


    The list was aborted by pressing carriage-return twice. Here's an
    endless loop:

    : FOREVER BEGIN AGAIN ; ok

    Here's a loop that reads from address 3 repeatedly:

    : FOREVER BEGIN 3 @ DROP AGAIN ;

    Here's a loop that writes an alternating pattern to address 3:

    HEX
    : FOREVER AAAAAAAA 3 ! 55555555 3 ! AGAIN ;

    These loops are fast enough to trigger on an oscilloscope.

    Since this is not intended to be a Forth tutorial, I now recommend that
    you get a copy of FPRIMER.ZIP and read the material there. See the
    "Further Reading" section, below.


Loading New Definitions
=======================

    If you are communicating with hForth through a terminal emulator
    then you can easily download new definitions from a file. Use a
    terminal emulator like the one provided with Microsoft Windows,
    and set it up like this:

    settings => communications: * 9600baud * XON/XOFF flow control *
    no parity * 8 bit * 1 stop bit

    settings => text transfers: * standard flow control

    To download a file, type FILE <return>, select Transfers => send text
    file on the terminal emulator and select the file to be sent to the
    target.

    After the transfer has completed, type HAND <return>. This will not be
    echoed. Alternatively, you can put HAND <return> at the end of your
    file.

    The file is accepted just as though it had been typed at the keyboard,
    so anything you can legally type, you can put in the file. The only
    exceptions are commands that alter the file redirection.

    One potential problem here is that the files require CR/LF line
    termination. If you took the files from a UNIX system they will
    not be formatted in this way, and the result is that the
    download will fail. To fix this, just use the DOS editor to
    edit each file; hit space then backspace and save the file and the
    editor will convert all CR to CR/LF for you.

    You can use this technique to download the .f files provided in the
    kit. Download them one-at-a-time in this order:

    optional.f coreext.f multi.f 285_hu.f

    (for the EBSA-110, download 110_hu.f instead of 285_hu.f)

    The _hu files provide utilities for accessing the Flash ROM. The
    EBSA-110 version is quite crude but the EBSA-285 version provides
    most of the same functions as the Flash Management Utility. Try
    typing .FLI-LIST and .FLB-LIST

    On the EBSA-285 you can type:

    FL-FORTH NewVersion

    And this will allocate a new Flash block and reprogram the current
    set of definitions into this block. If you set the image selection
    switch to the new image number (reported during the programming) you
    can power-cycle the board and still get all of your definitions
    back. Type .FLI-LIST and you will see the new image.

    To change the baudrate from the current baudrate do this:

    IOBYTES . <cr>
    502 TO IOBYTES <cr>
    set-i/o <cr>

    The first line determines the current baud rate setting and com
    port. 502 sets the baud rate to 19K2 on COM2 (refer to the source
    code for legal values in IOBYTES). The final line re-initialises
    communications with the new IOBYTES value.

    You can also swap between COM1 and COM2. In this case you need to
    update IOBYTES and call set-i/o all in one go (without returning
    to the command prompt in between). Either type:

    401 TO IOBYTES set-i/o <cr>

    or define some words to do it for you:

    : COM19600 \ do I/O on com1 at 9600 baud
      401 TO IOBYTES set-i/o
    ;

    : COM29600 \ do I/O on com2 at 9600 baud
      402 TO IOBYTES set-i/o
    ;
   
     
Modifying hForth
================

    The original 8086 version was written using macros to facilitate the
    generation of some internal data structures. It uses Microsoft macro
    assembler syntax. The ARM tools require different syntax and have the
    restriction that they do not allow you to have multiple ORG statements
    within the code (something that the macros in the original code depends
    upon). The reason for this restriction is probably that the ARM
    assembler is a 1-pass assembler. Rather than change the source, I chose
    to write some gawk (GNU AWK) scripts to modify the syntax and
    pre-process the source. This allows me to keep a source pool that can
    be correlated back to the 8086 quite easily.

    hForth was assembled in a UNIX environment, but it is possible to
    assemble it from a DOS/Windows environment, using the ARM toolkit's
    command-line tools. To re-build it, you need to get a copy of GNU
    AWK; freeware copyleft DOS ports of gawk are readily available and
    the AWK scripts have been run on a DOS environment. You'll also need
    the GNU tar and gunzip in order to unpack the files.

    If you wish to modify the source, modify the file hfsarom.asm. The
    shell script 'build' show the magic incantations required to
    pre-process this source file for various targets. To rebuild in
    DOS, you'll have to write a little batch file.
    

Known Bugs
==========

    I know of the following bugs in this release

    - MARKER doesn't work; one reason for this is that it stores info.
      in volatile DATA space, but that doesn't seem to be the only
      problem
    - Once you have loaded MULDEMO, you must not store the system
      back to Flash. Again, this is because MULDEMO uses data space
      and this is volatile.
    - The Ethernet words in 110_hu.fth don't work if the caches are
      turned on


Further Reading
===============

    This short note doesn't even scratch the surface of Forth's
    capabilities. Unfortunately, there is little material easily available
    in print. Fortunately (if you have network access) there is quite a lot
    of material available on the Internet.

    "Starting Forth" (2nd Edition) Leo Brodie/Forth, Inc.
    Prentice-Hall 1987 ISBN 0-13-843087-X is a good introduction, but gets
    rather sketchy on the more complex areas of Forth.

    IMO, a better overall book is "FORTH: A Text And Reference" by Mahon
    Kelly and Nick Spies Prentice-Hall, 1986, 487pps ISBN 0-13-326331-2 and
    in hardcover  0-13-326349-5.

    These books can be very expensive/hard to get hold of from bookshops,
    but mail-order from the US is easy with the help of a credit card. I
    bought Kelly & Spies from MMS in Massachusetts, and they were very
    helpful (Miller Microcomputer Services (MMS) - email to
    dmiller@im.lcs.mit.edu).

    Visit:
    
    http://taygeta.com/forth.html - Forth information on Taygeta

    http://pisa.rockefeller.edu:8080/penev/FORTH/ - Forth on the web

    ftp://asterix.inescn.pt/pub/forth

    A good starting point is to trawl your local mirrors for FPRIMER.ZIP,
    which contains a good introduction to Forth as well as two Forth
    compilers, a tutorial and the original sources of eForth. FPRIMER.ZIP
    is present on many MSDOS archive sites and CDs (for example, it is on
    the SIMTEL archive).
    
    After that, try reading Tim Hendtlass's shareware book, "Real-Time
    Forth".

    The American National Standard draft (March 1994) Forth standard is
    available from several sites, in MS Word (.DOC) format. This is the
    (draft of the) definitive standard Forth, but not very useful as a
    tutorial.

    There are many free or shareware implementations of Forth, for
    microprocessors, Windows and Unix. For Unix, try Dirk Zoller's Portable
    Forth Environment.

    The hForth source itself is quite well documented, though the
    documentation is incomplete. Also, try looking through the .f files
    for examples of Forth code.

    Enjoy Forth!

    Neal Crook              nealc@lsil.com    
[end]


