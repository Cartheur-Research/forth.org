\ Downloaded from the Forth SIG on Compuserve\ Copyright  1987 by Creative Solutions, Inc.TN0011.MFP                01-May-87 10752              45    Keywords: TECHNOTE CONSOLE INFILE OUTFILE TYPE CSIAn introductory technote describing the MacForth Plus Console.  Includes a discussion of INFILE, OUTFILE & DEBUGFILE.  Shows how to set up your own console table, direct input to your window, etc...           MacForth Console technote          MacForth provides an end user a great deal of flexibility in intercepting and directing console character Input and output. By the term "Console" we mean simple character input and ouptut. All keystrokes and source code input to be compiled is supplied by the currently selectedinfile (See Key, Expect in the glossary).  All text output using the wordTYPE is directed to the current outfile.  When an error is encounteredwhile compiling, the text error message, via EPRINT, is directed to the current DebugFile.  At any time, the output currently being output toOutFile may be echoed to PrtFile."Just what can I put into Infile, OutFile, DebugFile, or ErrorFile?"===================================================================== Output files may contain a fileid (as returned by Open), a CSI wptr, as returned by New.Window, or -1, or zero.  Devices (such as a serial port) are handled by their fileid's.  Simple grafports, or non-CSI windows may not be specified for simple character output, because, only MacForth Windows have the necessary "extended window record" containing the needed console variables.  Use DrawText or DrawString to output to non-CSI windows or grafports.  If Outfile is set to -1, then the outfile follows the current window (as selected by WINDOW).  This is the default value.  If OutFile is set to 0, all text that is TYPEd is discarded, and not output.  PrintFile=========   Default is Stream.Printing.  This works for all Macintosh printers.  The printer will be opened automatically the first time that you attempt to output to it.  If you Exit with the printer on, MacForth will close the printer for you.  In order to print to a spool.file, or window, simply execute File.Printing and place the appropriate Fileid (returned by OPEN" ") or window pointer into the User Variable PRTFILE.  Printer ON echoes console output to the printer.  Printer OFF disables console echo.  addr\cnt Print uses the current print style to print the text at addr. DebugFile=========DebugFile directs output to the currently selected error file.  Any message that is the result of a compilation error, or is otherwise output with EPRINT is directed to the current Debug file.  Tracing is also directedto the DebugFile.  For example, if you wanted to capture trace output within the current Sibley Editor window, set DebugFile as follows: trace on : test  ( -- )          \ select the current window for output,                                        \  and trace a loop                 get.window debugfile !         5 0 do cr i . loop ;  trace offtest                    [ 0 ]          WLIT       [ 1 ] \ 5          0          [ 2 ] \ 5 \ 0          (DO)       [ 0 ]             CR                     [ 0 ]             I       [ 1 ] \ 0             . 0       [ 0 ]             (LOOP)       [ 0 ]             CR                     [ 0 ]             I       [ 1 ] \ 1             . 1       [ 0 ]             (LOOP)       [ 0 ]             CR                     [ 0 ]             I       [ 1 ] \ 2             . 2       [ 0 ]             (LOOP)       [ 0 ]             CR                     [ 0 ]             I       [ 1 ] \ 3             . 3       [ 0 ]             (LOOP)       [ 0 ]             CR                     [ 0 ]             I       [ 1 ] \ 4             . 4       [ 0 ]             (LOOP)       [ 0 ]          (;) infile======Infile contains either a FileId (includes deviceIds), or a csi Wptr. Ifthe contents of InFile is a Window Pointer, the cursor is flashed in thecurrently active window, at the current grafport cursor position, untila character is struck at the keyboard.  If the contents of Infile is aFileId, and not interactive, then each line is read from the fileuntil the end of the file is reached.  At that point control is returnedto the file that caused the current one to be included.  Eventually, theend of the first file's input is reached. If this is not an interactive device, BYE is executed, under the presumption that launch occured withI/O re-direction specified by the OS Shell Command line interpreter.  Ifthe first device was interactive, control passes back to the text interpreter, which asks for a new line of text.  EXPECT automatically preserves and recovers input streams from an unlimited input-stream stack (actually constructed as a linked list ofrecords in the heap). When a file is included, the current infile and associated status is pushed into the stream heap.  The selected file is opened, and rewound, and then Infile is then pointed to the new file. Thenext line to be interpereted will come from the new file.see Prior.streamConsole Editing===============A minimal edit facility is provided to allow line editing of console data. (It is highly suggested that end-users be presented with a Sibley Editor or TE windows in which to edit their input).  While in console windows,only backspace is supported for line editing.  The Active Window=================MacForth is inherently a Multi-tasking system.  As a result, more than one task may attempt to utilize the keyboard at the same time.  In order to resolve such contention, the keyboard input events are only enabled for the window pointer contained within the Global variable Active.Window.  Active.Window is normally maintained by activate events.  For example, all Activate events force the wptr of the window becoming active into Active.Window.  As a result, selecting between two active windows that are both attempting to read from the keyboard should operate as expected.  The Flashing text cursor indicates which window will receive keystrokes.Sometimes the default action is not what you want.  For example, let's saythat you want to be typing in one window while another window is active.(note that this is frowned upon by the Mac User interface guidelines). Inorder to accept keystrokes, and present a cursor to the inactive window,you will need to store the desired wptr in Active.Window. (see examplebelow).The Text Cursor===============While Macforth is waiting for a keystroke at the console, a cursor is flashedat the position where the next character will be placed. You may modifythe default undeline cursor to any character that you desire.  The defaultis font 4, character 5Fh  the ASCII Underline "_".  The first 16-bits of variable CURSOR.CHAR contain the font number, and the second 16-bitscontain the ascii character code (default is hex 0004005F).  The cursor is rendered in the current text Size and Style.  If you would like todisable the cursor, simply set the character code to Blank (hex 20).Positioning the Text Cursor===========================The following example, provided by Ward McFarland, illustrates positioningthe text cursor.New.Window  Input.Window " Cursor Test"   Input.Window  W.Title                 Input.Window Add.Window: Do.Test  IF INPUT.WINDOW ACTIVE.WINDOW ! INPUT.WINDOW INFILE !    Ginit Page Init.Cursor    BEGIN      15 20 Move.To ." Input your Name:"      PAD 15 Input.String cr      15 40 Move.To ." Hello " PAD Count Type    AGAIN  Then ;Input.Window ON.ACTIVATE Do.TestConsole Table=============The system specific console related operators have been factored out intoan array of values and tokens which allow you to extensively modifyhow a console operates.  The User variable CONSOLE points to the console array of the current console device.  Operators such as TYPE, EXPECT, and KEY are vectored to tokens within the console array, and interpret data fields within the array in order to determine what facilities are or are notsupported by the console device.    Offset       size   dflt   Byte:Bit     (bits)  value      function           --------      ----   -----      --------    0:7           1         1      Indicates that character echo is required                                    for interactive input.    0:6           1         1      Indicates that CRLF echo is required during                                    interactive compilation (within a colon                                    definition) if a CR is input.  Many System                                    "console devices automatically echo a CRLF                                    for you.      0:5-0         6         0      Reserved for CSI use only.    1             8         0Dh    input EOL character.  Terminates an input                                    line     2             8         20h    Character to echo when an EOL is                                    received.  No echo for value of zero     3             8         08h    Input line backspace character    4             8         04h    Console inout and output Tabs are modulo this                                    number of spaces     5             8         01h    Number of characters to output for CR    6             8         0Dh    First character output for CR    7             8         0Ah    Second characters to output for CR (not used)    8-0B         32         0      Reserved for use by CSI    0Ch          16  <?TERMINAL Token to execute for ?TERMINAL on this console    0Eh          16  <<EXPECT   Token to execute for EXPECT    on this console    10h          16  +PRINTER   Token to execute for TYPE      on this console    12h          16  <KEY       Token to execute for KEY       on this console    14h          16  <PRINT     Token to execute for PRINT     on this console    16h          16  <DEBUG     Token to execute for EPRINT    on this console    18h          16  <busy      Token to execute for BUSY      on this consoleExample Consoles================      hex CREATE  DFLT.CON   \ this is the actual code for the default                                         \ MacForth console          c00d2008 ,        04010d0A ,  0 ,        ] <<?TERMINAL  <<EXPECT  +PRINTER <<KEY <PRINT <DEBUG  <busy [CREATE  PRINTER.ONLY    \ This is sample code for a console array that                                                 \ outputs only to the printer         0 ,  0 ,  0 ,        ]  0  ABORT  PRINT  ABORT  2DROP  2DROP  drop  [decimalWriting to Windows==================  Other than Console output via TYPE, MacForth allows two other methods forwriting to windows: Quickdraw calls, and WRITE calls.   QuickDraw supports text output to windows with the MoveTo, DrawChar, DrawString, and DrawText traps.  MacForth supports these as Forth Words.  Refer to the graphics chapters of the manual and glossary for further information.    The word WRITE has been generalized to accept wptrs as well as FileIds.For example, you may output text to any CSI window pointer by substitutinga wptr for a FileID.  When the TEXT appears on the window, carriage returnmoves to the next line, and scrolling occurs to keep the last line on the screen.  This has proven very useful for debugging text output to files.